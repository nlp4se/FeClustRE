{
  "metadata": {
    "generated_at": "2025-09-17T20:23:14.970711",
    "query_type": "worst_taxonomies",
    "taxonomy_count": 20
  },
  "individual_queries": [
    {
      "taxonomy_rank": 1,
      "root_id": "mini_taxonomy_root_ChatGPT_ChatGPT_llm_clusters_20250910_201138_66eec707_2_2b3aa0a9",
      "tag": "productivity and information retrieval",
      "quality_score": 52.3,
      "queries": {
        "screenshot_tree": "\n// Screenshot-friendly tree for: productivity and information retrieval (Top 10 features only)\nMATCH (root:MiniTaxonomyNode {id: 'mini_taxonomy_root_ChatGPT_ChatGPT_llm_clusters_20250910_201138_66eec707_2_2b3aa0a9'})\nWHERE NOT (()-[:HAS_CHILD]->(root))\nOPTIONAL MATCH path = (root)-[:HAS_CHILD*1..3]->(node:MiniTaxonomyNode)\nWITH root, node, path\nORDER BY length(path), node.feature\nWITH root, collect(DISTINCT {\n    feature: node.feature,\n    depth: length(path),\n    is_leaf: NOT (node)-[:HAS_CHILD]->()\n})[0..10] as sample_nodes\nRETURN root.llm_tag as taxonomy_name,\n       root.feature as root_feature,\n       sample_nodes",
        "sample_features": "\n// Sample features for screenshots: productivity and information retrieval (Max 8 features)\nMATCH (root:MiniTaxonomyNode {id: 'mini_taxonomy_root_ChatGPT_ChatGPT_llm_clusters_20250910_201138_66eec707_2_2b3aa0a9'})\nWHERE NOT (()-[:HAS_CHILD]->(root))\nMATCH (root)-[:HAS_CHILD*]->(leaf:MiniTaxonomyNode)\nWHERE NOT (leaf)-[:HAS_CHILD]->() AND leaf.feature IS NOT NULL\nWITH root, collect(DISTINCT leaf.feature) as all_features\nRETURN root.llm_tag as taxonomy_name,\n       size(all_features) as total_features,\n       all_features[0..8] as sample_features",
        "compact_hierarchy": "\n// Compact hierarchy for: productivity and information retrieval (Screenshot ready)\nMATCH (root:MiniTaxonomyNode {id: 'mini_taxonomy_root_ChatGPT_ChatGPT_llm_clusters_20250910_201138_66eec707_2_2b3aa0a9'})\nWHERE NOT (()-[:HAS_CHILD]->(root))\nOPTIONAL MATCH (root)-[:HAS_CHILD]->(level1:MiniTaxonomyNode)\nOPTIONAL MATCH (level1)-[:HAS_CHILD]->(level2:MiniTaxonomyNode)\nWHERE NOT (level2)-[:HAS_CHILD]->()\nWITH root, level1, collect(level2.feature)[0..3] as level2_sample\nRETURN root.llm_tag as root_tag,\n       level1.feature as level1_feature,\n       level2_sample\nORDER BY level1.feature\nLIMIT 5",
        "leaf_features": "\n// Top 10 leaf features for: productivity and information retrieval\nMATCH (root:MiniTaxonomyNode {id: 'mini_taxonomy_root_ChatGPT_ChatGPT_llm_clusters_20250910_201138_66eec707_2_2b3aa0a9'})\nWHERE NOT (()-[:HAS_CHILD]->(root))\nMATCH (root)-[:HAS_CHILD*]->(leaf:MiniTaxonomyNode)\nWHERE NOT (leaf)-[:HAS_CHILD]->() AND leaf.feature IS NOT NULL\nRETURN root.llm_tag as taxonomy_tag,\n       collect(DISTINCT leaf.feature)[0..10] as top_features,\n       count(DISTINCT leaf) as total_leaf_count",
        "tree_depth": "\n// Tree depth and structure metrics for: productivity and information retrieval\nMATCH (root:MiniTaxonomyNode {id: 'mini_taxonomy_root_ChatGPT_ChatGPT_llm_clusters_20250910_201138_66eec707_2_2b3aa0a9'})\nWHERE NOT (()-[:HAS_CHILD]->(root))\nOPTIONAL MATCH path = (root)-[:HAS_CHILD*]->(leaf)\nWHERE NOT (leaf)-[:HAS_CHILD]->()\nWITH root, \n     max(length(path)) as max_depth,\n     count(DISTINCT leaf) as leaf_count,\n     avg(length(path)) as avg_depth\nRETURN root.llm_tag as taxonomy_tag,\n       max_depth,\n       leaf_count,\n       round(avg_depth, 2) as average_depth",
        "parent_child_relationships": "\n// Parent-child relationships for: productivity and information retrieval\nMATCH (parent:MiniTaxonomyNode)-[:HAS_CHILD]->(child:MiniTaxonomyNode)\nWHERE parent.id = 'mini_taxonomy_root_ChatGPT_ChatGPT_llm_clusters_20250910_201138_66eec707_2_2b3aa0a9' OR \n      (parent)-[:HAS_CHILD*0..]-(:MiniTaxonomyNode {id: 'mini_taxonomy_root_ChatGPT_ChatGPT_llm_clusters_20250910_201138_66eec707_2_2b3aa0a9'})\nRETURN parent.id as parent_id,\n       parent.feature as parent_feature,\n       parent.is_leaf as parent_is_leaf,\n       child.id as child_id,\n       child.feature as child_feature,\n       child.is_leaf as child_is_leaf\nORDER BY parent.feature, child.feature"
      }
    },
    {
      "taxonomy_rank": 2,
      "root_id": "mini_taxonomy_root_Claude by Anthropic_Claude by Anthropic_llm_clusters_20250910_113541_869f247f_0_1770d541",
      "tag": "text",
      "quality_score": 51.5,
      "queries": {
        "screenshot_tree": "\n// Screenshot-friendly tree for: text (Top 10 features only)\nMATCH (root:MiniTaxonomyNode {id: 'mini_taxonomy_root_Claude by Anthropic_Claude by Anthropic_llm_clusters_20250910_113541_869f247f_0_1770d541'})\nWHERE NOT (()-[:HAS_CHILD]->(root))\nOPTIONAL MATCH path = (root)-[:HAS_CHILD*1..3]->(node:MiniTaxonomyNode)\nWITH root, node, path\nORDER BY length(path), node.feature\nWITH root, collect(DISTINCT {\n    feature: node.feature,\n    depth: length(path),\n    is_leaf: NOT (node)-[:HAS_CHILD]->()\n})[0..10] as sample_nodes\nRETURN root.llm_tag as taxonomy_name,\n       root.feature as root_feature,\n       sample_nodes",
        "sample_features": "\n// Sample features for screenshots: text (Max 8 features)\nMATCH (root:MiniTaxonomyNode {id: 'mini_taxonomy_root_Claude by Anthropic_Claude by Anthropic_llm_clusters_20250910_113541_869f247f_0_1770d541'})\nWHERE NOT (()-[:HAS_CHILD]->(root))\nMATCH (root)-[:HAS_CHILD*]->(leaf:MiniTaxonomyNode)\nWHERE NOT (leaf)-[:HAS_CHILD]->() AND leaf.feature IS NOT NULL\nWITH root, collect(DISTINCT leaf.feature) as all_features\nRETURN root.llm_tag as taxonomy_name,\n       size(all_features) as total_features,\n       all_features[0..8] as sample_features",
        "compact_hierarchy": "\n// Compact hierarchy for: text (Screenshot ready)\nMATCH (root:MiniTaxonomyNode {id: 'mini_taxonomy_root_Claude by Anthropic_Claude by Anthropic_llm_clusters_20250910_113541_869f247f_0_1770d541'})\nWHERE NOT (()-[:HAS_CHILD]->(root))\nOPTIONAL MATCH (root)-[:HAS_CHILD]->(level1:MiniTaxonomyNode)\nOPTIONAL MATCH (level1)-[:HAS_CHILD]->(level2:MiniTaxonomyNode)\nWHERE NOT (level2)-[:HAS_CHILD]->()\nWITH root, level1, collect(level2.feature)[0..3] as level2_sample\nRETURN root.llm_tag as root_tag,\n       level1.feature as level1_feature,\n       level2_sample\nORDER BY level1.feature\nLIMIT 5",
        "leaf_features": "\n// Top 10 leaf features for: text\nMATCH (root:MiniTaxonomyNode {id: 'mini_taxonomy_root_Claude by Anthropic_Claude by Anthropic_llm_clusters_20250910_113541_869f247f_0_1770d541'})\nWHERE NOT (()-[:HAS_CHILD]->(root))\nMATCH (root)-[:HAS_CHILD*]->(leaf:MiniTaxonomyNode)\nWHERE NOT (leaf)-[:HAS_CHILD]->() AND leaf.feature IS NOT NULL\nRETURN root.llm_tag as taxonomy_tag,\n       collect(DISTINCT leaf.feature)[0..10] as top_features,\n       count(DISTINCT leaf) as total_leaf_count",
        "tree_depth": "\n// Tree depth and structure metrics for: text\nMATCH (root:MiniTaxonomyNode {id: 'mini_taxonomy_root_Claude by Anthropic_Claude by Anthropic_llm_clusters_20250910_113541_869f247f_0_1770d541'})\nWHERE NOT (()-[:HAS_CHILD]->(root))\nOPTIONAL MATCH path = (root)-[:HAS_CHILD*]->(leaf)\nWHERE NOT (leaf)-[:HAS_CHILD]->()\nWITH root, \n     max(length(path)) as max_depth,\n     count(DISTINCT leaf) as leaf_count,\n     avg(length(path)) as avg_depth\nRETURN root.llm_tag as taxonomy_tag,\n       max_depth,\n       leaf_count,\n       round(avg_depth, 2) as average_depth",
        "parent_child_relationships": "\n// Parent-child relationships for: text\nMATCH (parent:MiniTaxonomyNode)-[:HAS_CHILD]->(child:MiniTaxonomyNode)\nWHERE parent.id = 'mini_taxonomy_root_Claude by Anthropic_Claude by Anthropic_llm_clusters_20250910_113541_869f247f_0_1770d541' OR \n      (parent)-[:HAS_CHILD*0..]-(:MiniTaxonomyNode {id: 'mini_taxonomy_root_Claude by Anthropic_Claude by Anthropic_llm_clusters_20250910_113541_869f247f_0_1770d541'})\nRETURN parent.id as parent_id,\n       parent.feature as parent_feature,\n       parent.is_leaf as parent_is_leaf,\n       child.id as child_id,\n       child.feature as child_feature,\n       child.is_leaf as child_is_leaf\nORDER BY parent.feature, child.feature"
      }
    },
    {
      "taxonomy_rank": 3,
      "root_id": "mini_taxonomy_root_ChatGPT_ChatGPT_llm_clusters_20250910_082253_e6995ce8_4_a4b72909",
      "tag": "education",
      "quality_score": 50.5,
      "queries": {
        "screenshot_tree": "\n// Screenshot-friendly tree for: education (Top 10 features only)\nMATCH (root:MiniTaxonomyNode {id: 'mini_taxonomy_root_ChatGPT_ChatGPT_llm_clusters_20250910_082253_e6995ce8_4_a4b72909'})\nWHERE NOT (()-[:HAS_CHILD]->(root))\nOPTIONAL MATCH path = (root)-[:HAS_CHILD*1..3]->(node:MiniTaxonomyNode)\nWITH root, node, path\nORDER BY length(path), node.feature\nWITH root, collect(DISTINCT {\n    feature: node.feature,\n    depth: length(path),\n    is_leaf: NOT (node)-[:HAS_CHILD]->()\n})[0..10] as sample_nodes\nRETURN root.llm_tag as taxonomy_name,\n       root.feature as root_feature,\n       sample_nodes",
        "sample_features": "\n// Sample features for screenshots: education (Max 8 features)\nMATCH (root:MiniTaxonomyNode {id: 'mini_taxonomy_root_ChatGPT_ChatGPT_llm_clusters_20250910_082253_e6995ce8_4_a4b72909'})\nWHERE NOT (()-[:HAS_CHILD]->(root))\nMATCH (root)-[:HAS_CHILD*]->(leaf:MiniTaxonomyNode)\nWHERE NOT (leaf)-[:HAS_CHILD]->() AND leaf.feature IS NOT NULL\nWITH root, collect(DISTINCT leaf.feature) as all_features\nRETURN root.llm_tag as taxonomy_name,\n       size(all_features) as total_features,\n       all_features[0..8] as sample_features",
        "compact_hierarchy": "\n// Compact hierarchy for: education (Screenshot ready)\nMATCH (root:MiniTaxonomyNode {id: 'mini_taxonomy_root_ChatGPT_ChatGPT_llm_clusters_20250910_082253_e6995ce8_4_a4b72909'})\nWHERE NOT (()-[:HAS_CHILD]->(root))\nOPTIONAL MATCH (root)-[:HAS_CHILD]->(level1:MiniTaxonomyNode)\nOPTIONAL MATCH (level1)-[:HAS_CHILD]->(level2:MiniTaxonomyNode)\nWHERE NOT (level2)-[:HAS_CHILD]->()\nWITH root, level1, collect(level2.feature)[0..3] as level2_sample\nRETURN root.llm_tag as root_tag,\n       level1.feature as level1_feature,\n       level2_sample\nORDER BY level1.feature\nLIMIT 5",
        "leaf_features": "\n// Top 10 leaf features for: education\nMATCH (root:MiniTaxonomyNode {id: 'mini_taxonomy_root_ChatGPT_ChatGPT_llm_clusters_20250910_082253_e6995ce8_4_a4b72909'})\nWHERE NOT (()-[:HAS_CHILD]->(root))\nMATCH (root)-[:HAS_CHILD*]->(leaf:MiniTaxonomyNode)\nWHERE NOT (leaf)-[:HAS_CHILD]->() AND leaf.feature IS NOT NULL\nRETURN root.llm_tag as taxonomy_tag,\n       collect(DISTINCT leaf.feature)[0..10] as top_features,\n       count(DISTINCT leaf) as total_leaf_count",
        "tree_depth": "\n// Tree depth and structure metrics for: education\nMATCH (root:MiniTaxonomyNode {id: 'mini_taxonomy_root_ChatGPT_ChatGPT_llm_clusters_20250910_082253_e6995ce8_4_a4b72909'})\nWHERE NOT (()-[:HAS_CHILD]->(root))\nOPTIONAL MATCH path = (root)-[:HAS_CHILD*]->(leaf)\nWHERE NOT (leaf)-[:HAS_CHILD]->()\nWITH root, \n     max(length(path)) as max_depth,\n     count(DISTINCT leaf) as leaf_count,\n     avg(length(path)) as avg_depth\nRETURN root.llm_tag as taxonomy_tag,\n       max_depth,\n       leaf_count,\n       round(avg_depth, 2) as average_depth",
        "parent_child_relationships": "\n// Parent-child relationships for: education\nMATCH (parent:MiniTaxonomyNode)-[:HAS_CHILD]->(child:MiniTaxonomyNode)\nWHERE parent.id = 'mini_taxonomy_root_ChatGPT_ChatGPT_llm_clusters_20250910_082253_e6995ce8_4_a4b72909' OR \n      (parent)-[:HAS_CHILD*0..]-(:MiniTaxonomyNode {id: 'mini_taxonomy_root_ChatGPT_ChatGPT_llm_clusters_20250910_082253_e6995ce8_4_a4b72909'})\nRETURN parent.id as parent_id,\n       parent.feature as parent_feature,\n       parent.is_leaf as parent_is_leaf,\n       child.id as child_id,\n       child.feature as child_feature,\n       child.is_leaf as child_is_leaf\nORDER BY parent.feature, child.feature"
      }
    },
    {
      "taxonomy_rank": 4,
      "root_id": "mini_taxonomy_root_Google Gemini_Google Gemini_llm_clusters_20250912_020749_ecf39b6e_37_01c3d1c3",
      "tag": "productivity and organization",
      "quality_score": 49.900000000000006,
      "queries": {
        "screenshot_tree": "\n// Screenshot-friendly tree for: productivity and organization (Top 10 features only)\nMATCH (root:MiniTaxonomyNode {id: 'mini_taxonomy_root_Google Gemini_Google Gemini_llm_clusters_20250912_020749_ecf39b6e_37_01c3d1c3'})\nWHERE NOT (()-[:HAS_CHILD]->(root))\nOPTIONAL MATCH path = (root)-[:HAS_CHILD*1..3]->(node:MiniTaxonomyNode)\nWITH root, node, path\nORDER BY length(path), node.feature\nWITH root, collect(DISTINCT {\n    feature: node.feature,\n    depth: length(path),\n    is_leaf: NOT (node)-[:HAS_CHILD]->()\n})[0..10] as sample_nodes\nRETURN root.llm_tag as taxonomy_name,\n       root.feature as root_feature,\n       sample_nodes",
        "sample_features": "\n// Sample features for screenshots: productivity and organization (Max 8 features)\nMATCH (root:MiniTaxonomyNode {id: 'mini_taxonomy_root_Google Gemini_Google Gemini_llm_clusters_20250912_020749_ecf39b6e_37_01c3d1c3'})\nWHERE NOT (()-[:HAS_CHILD]->(root))\nMATCH (root)-[:HAS_CHILD*]->(leaf:MiniTaxonomyNode)\nWHERE NOT (leaf)-[:HAS_CHILD]->() AND leaf.feature IS NOT NULL\nWITH root, collect(DISTINCT leaf.feature) as all_features\nRETURN root.llm_tag as taxonomy_name,\n       size(all_features) as total_features,\n       all_features[0..8] as sample_features",
        "compact_hierarchy": "\n// Compact hierarchy for: productivity and organization (Screenshot ready)\nMATCH (root:MiniTaxonomyNode {id: 'mini_taxonomy_root_Google Gemini_Google Gemini_llm_clusters_20250912_020749_ecf39b6e_37_01c3d1c3'})\nWHERE NOT (()-[:HAS_CHILD]->(root))\nOPTIONAL MATCH (root)-[:HAS_CHILD]->(level1:MiniTaxonomyNode)\nOPTIONAL MATCH (level1)-[:HAS_CHILD]->(level2:MiniTaxonomyNode)\nWHERE NOT (level2)-[:HAS_CHILD]->()\nWITH root, level1, collect(level2.feature)[0..3] as level2_sample\nRETURN root.llm_tag as root_tag,\n       level1.feature as level1_feature,\n       level2_sample\nORDER BY level1.feature\nLIMIT 5",
        "leaf_features": "\n// Top 10 leaf features for: productivity and organization\nMATCH (root:MiniTaxonomyNode {id: 'mini_taxonomy_root_Google Gemini_Google Gemini_llm_clusters_20250912_020749_ecf39b6e_37_01c3d1c3'})\nWHERE NOT (()-[:HAS_CHILD]->(root))\nMATCH (root)-[:HAS_CHILD*]->(leaf:MiniTaxonomyNode)\nWHERE NOT (leaf)-[:HAS_CHILD]->() AND leaf.feature IS NOT NULL\nRETURN root.llm_tag as taxonomy_tag,\n       collect(DISTINCT leaf.feature)[0..10] as top_features,\n       count(DISTINCT leaf) as total_leaf_count",
        "tree_depth": "\n// Tree depth and structure metrics for: productivity and organization\nMATCH (root:MiniTaxonomyNode {id: 'mini_taxonomy_root_Google Gemini_Google Gemini_llm_clusters_20250912_020749_ecf39b6e_37_01c3d1c3'})\nWHERE NOT (()-[:HAS_CHILD]->(root))\nOPTIONAL MATCH path = (root)-[:HAS_CHILD*]->(leaf)\nWHERE NOT (leaf)-[:HAS_CHILD]->()\nWITH root, \n     max(length(path)) as max_depth,\n     count(DISTINCT leaf) as leaf_count,\n     avg(length(path)) as avg_depth\nRETURN root.llm_tag as taxonomy_tag,\n       max_depth,\n       leaf_count,\n       round(avg_depth, 2) as average_depth",
        "parent_child_relationships": "\n// Parent-child relationships for: productivity and organization\nMATCH (parent:MiniTaxonomyNode)-[:HAS_CHILD]->(child:MiniTaxonomyNode)\nWHERE parent.id = 'mini_taxonomy_root_Google Gemini_Google Gemini_llm_clusters_20250912_020749_ecf39b6e_37_01c3d1c3' OR \n      (parent)-[:HAS_CHILD*0..]-(:MiniTaxonomyNode {id: 'mini_taxonomy_root_Google Gemini_Google Gemini_llm_clusters_20250912_020749_ecf39b6e_37_01c3d1c3'})\nRETURN parent.id as parent_id,\n       parent.feature as parent_feature,\n       parent.is_leaf as parent_is_leaf,\n       child.id as child_id,\n       child.feature as child_feature,\n       child.is_leaf as child_is_leaf\nORDER BY parent.feature, child.feature"
      }
    },
    {
      "taxonomy_rank": 5,
      "root_id": "mini_taxonomy_root_Microsoft Copilot_Microsoft Copilot_llm_clusters_20250912_223025_37325bf6_39_69c74ffd",
      "tag": "social media support",
      "quality_score": 49.0,
      "queries": {
        "screenshot_tree": "\n// Screenshot-friendly tree for: social media support (Top 10 features only)\nMATCH (root:MiniTaxonomyNode {id: 'mini_taxonomy_root_Microsoft Copilot_Microsoft Copilot_llm_clusters_20250912_223025_37325bf6_39_69c74ffd'})\nWHERE NOT (()-[:HAS_CHILD]->(root))\nOPTIONAL MATCH path = (root)-[:HAS_CHILD*1..3]->(node:MiniTaxonomyNode)\nWITH root, node, path\nORDER BY length(path), node.feature\nWITH root, collect(DISTINCT {\n    feature: node.feature,\n    depth: length(path),\n    is_leaf: NOT (node)-[:HAS_CHILD]->()\n})[0..10] as sample_nodes\nRETURN root.llm_tag as taxonomy_name,\n       root.feature as root_feature,\n       sample_nodes",
        "sample_features": "\n// Sample features for screenshots: social media support (Max 8 features)\nMATCH (root:MiniTaxonomyNode {id: 'mini_taxonomy_root_Microsoft Copilot_Microsoft Copilot_llm_clusters_20250912_223025_37325bf6_39_69c74ffd'})\nWHERE NOT (()-[:HAS_CHILD]->(root))\nMATCH (root)-[:HAS_CHILD*]->(leaf:MiniTaxonomyNode)\nWHERE NOT (leaf)-[:HAS_CHILD]->() AND leaf.feature IS NOT NULL\nWITH root, collect(DISTINCT leaf.feature) as all_features\nRETURN root.llm_tag as taxonomy_name,\n       size(all_features) as total_features,\n       all_features[0..8] as sample_features",
        "compact_hierarchy": "\n// Compact hierarchy for: social media support (Screenshot ready)\nMATCH (root:MiniTaxonomyNode {id: 'mini_taxonomy_root_Microsoft Copilot_Microsoft Copilot_llm_clusters_20250912_223025_37325bf6_39_69c74ffd'})\nWHERE NOT (()-[:HAS_CHILD]->(root))\nOPTIONAL MATCH (root)-[:HAS_CHILD]->(level1:MiniTaxonomyNode)\nOPTIONAL MATCH (level1)-[:HAS_CHILD]->(level2:MiniTaxonomyNode)\nWHERE NOT (level2)-[:HAS_CHILD]->()\nWITH root, level1, collect(level2.feature)[0..3] as level2_sample\nRETURN root.llm_tag as root_tag,\n       level1.feature as level1_feature,\n       level2_sample\nORDER BY level1.feature\nLIMIT 5",
        "leaf_features": "\n// Top 10 leaf features for: social media support\nMATCH (root:MiniTaxonomyNode {id: 'mini_taxonomy_root_Microsoft Copilot_Microsoft Copilot_llm_clusters_20250912_223025_37325bf6_39_69c74ffd'})\nWHERE NOT (()-[:HAS_CHILD]->(root))\nMATCH (root)-[:HAS_CHILD*]->(leaf:MiniTaxonomyNode)\nWHERE NOT (leaf)-[:HAS_CHILD]->() AND leaf.feature IS NOT NULL\nRETURN root.llm_tag as taxonomy_tag,\n       collect(DISTINCT leaf.feature)[0..10] as top_features,\n       count(DISTINCT leaf) as total_leaf_count",
        "tree_depth": "\n// Tree depth and structure metrics for: social media support\nMATCH (root:MiniTaxonomyNode {id: 'mini_taxonomy_root_Microsoft Copilot_Microsoft Copilot_llm_clusters_20250912_223025_37325bf6_39_69c74ffd'})\nWHERE NOT (()-[:HAS_CHILD]->(root))\nOPTIONAL MATCH path = (root)-[:HAS_CHILD*]->(leaf)\nWHERE NOT (leaf)-[:HAS_CHILD]->()\nWITH root, \n     max(length(path)) as max_depth,\n     count(DISTINCT leaf) as leaf_count,\n     avg(length(path)) as avg_depth\nRETURN root.llm_tag as taxonomy_tag,\n       max_depth,\n       leaf_count,\n       round(avg_depth, 2) as average_depth",
        "parent_child_relationships": "\n// Parent-child relationships for: social media support\nMATCH (parent:MiniTaxonomyNode)-[:HAS_CHILD]->(child:MiniTaxonomyNode)\nWHERE parent.id = 'mini_taxonomy_root_Microsoft Copilot_Microsoft Copilot_llm_clusters_20250912_223025_37325bf6_39_69c74ffd' OR \n      (parent)-[:HAS_CHILD*0..]-(:MiniTaxonomyNode {id: 'mini_taxonomy_root_Microsoft Copilot_Microsoft Copilot_llm_clusters_20250912_223025_37325bf6_39_69c74ffd'})\nRETURN parent.id as parent_id,\n       parent.feature as parent_feature,\n       parent.is_leaf as parent_is_leaf,\n       child.id as child_id,\n       child.feature as child_feature,\n       child.is_leaf as child_is_leaf\nORDER BY parent.feature, child.feature"
      }
    },
    {
      "taxonomy_rank": 6,
      "root_id": "mini_taxonomy_root_Google Gemini_Google Gemini_llm_clusters_20250912_023901_a71aa325_23_a78ea684",
      "tag": "context-aware interaction",
      "quality_score": 48.900000000000006,
      "queries": {
        "screenshot_tree": "\n// Screenshot-friendly tree for: context-aware interaction (Top 10 features only)\nMATCH (root:MiniTaxonomyNode {id: 'mini_taxonomy_root_Google Gemini_Google Gemini_llm_clusters_20250912_023901_a71aa325_23_a78ea684'})\nWHERE NOT (()-[:HAS_CHILD]->(root))\nOPTIONAL MATCH path = (root)-[:HAS_CHILD*1..3]->(node:MiniTaxonomyNode)\nWITH root, node, path\nORDER BY length(path), node.feature\nWITH root, collect(DISTINCT {\n    feature: node.feature,\n    depth: length(path),\n    is_leaf: NOT (node)-[:HAS_CHILD]->()\n})[0..10] as sample_nodes\nRETURN root.llm_tag as taxonomy_name,\n       root.feature as root_feature,\n       sample_nodes",
        "sample_features": "\n// Sample features for screenshots: context-aware interaction (Max 8 features)\nMATCH (root:MiniTaxonomyNode {id: 'mini_taxonomy_root_Google Gemini_Google Gemini_llm_clusters_20250912_023901_a71aa325_23_a78ea684'})\nWHERE NOT (()-[:HAS_CHILD]->(root))\nMATCH (root)-[:HAS_CHILD*]->(leaf:MiniTaxonomyNode)\nWHERE NOT (leaf)-[:HAS_CHILD]->() AND leaf.feature IS NOT NULL\nWITH root, collect(DISTINCT leaf.feature) as all_features\nRETURN root.llm_tag as taxonomy_name,\n       size(all_features) as total_features,\n       all_features[0..8] as sample_features",
        "compact_hierarchy": "\n// Compact hierarchy for: context-aware interaction (Screenshot ready)\nMATCH (root:MiniTaxonomyNode {id: 'mini_taxonomy_root_Google Gemini_Google Gemini_llm_clusters_20250912_023901_a71aa325_23_a78ea684'})\nWHERE NOT (()-[:HAS_CHILD]->(root))\nOPTIONAL MATCH (root)-[:HAS_CHILD]->(level1:MiniTaxonomyNode)\nOPTIONAL MATCH (level1)-[:HAS_CHILD]->(level2:MiniTaxonomyNode)\nWHERE NOT (level2)-[:HAS_CHILD]->()\nWITH root, level1, collect(level2.feature)[0..3] as level2_sample\nRETURN root.llm_tag as root_tag,\n       level1.feature as level1_feature,\n       level2_sample\nORDER BY level1.feature\nLIMIT 5",
        "leaf_features": "\n// Top 10 leaf features for: context-aware interaction\nMATCH (root:MiniTaxonomyNode {id: 'mini_taxonomy_root_Google Gemini_Google Gemini_llm_clusters_20250912_023901_a71aa325_23_a78ea684'})\nWHERE NOT (()-[:HAS_CHILD]->(root))\nMATCH (root)-[:HAS_CHILD*]->(leaf:MiniTaxonomyNode)\nWHERE NOT (leaf)-[:HAS_CHILD]->() AND leaf.feature IS NOT NULL\nRETURN root.llm_tag as taxonomy_tag,\n       collect(DISTINCT leaf.feature)[0..10] as top_features,\n       count(DISTINCT leaf) as total_leaf_count",
        "tree_depth": "\n// Tree depth and structure metrics for: context-aware interaction\nMATCH (root:MiniTaxonomyNode {id: 'mini_taxonomy_root_Google Gemini_Google Gemini_llm_clusters_20250912_023901_a71aa325_23_a78ea684'})\nWHERE NOT (()-[:HAS_CHILD]->(root))\nOPTIONAL MATCH path = (root)-[:HAS_CHILD*]->(leaf)\nWHERE NOT (leaf)-[:HAS_CHILD]->()\nWITH root, \n     max(length(path)) as max_depth,\n     count(DISTINCT leaf) as leaf_count,\n     avg(length(path)) as avg_depth\nRETURN root.llm_tag as taxonomy_tag,\n       max_depth,\n       leaf_count,\n       round(avg_depth, 2) as average_depth",
        "parent_child_relationships": "\n// Parent-child relationships for: context-aware interaction\nMATCH (parent:MiniTaxonomyNode)-[:HAS_CHILD]->(child:MiniTaxonomyNode)\nWHERE parent.id = 'mini_taxonomy_root_Google Gemini_Google Gemini_llm_clusters_20250912_023901_a71aa325_23_a78ea684' OR \n      (parent)-[:HAS_CHILD*0..]-(:MiniTaxonomyNode {id: 'mini_taxonomy_root_Google Gemini_Google Gemini_llm_clusters_20250912_023901_a71aa325_23_a78ea684'})\nRETURN parent.id as parent_id,\n       parent.feature as parent_feature,\n       parent.is_leaf as parent_is_leaf,\n       child.id as child_id,\n       child.feature as child_feature,\n       child.is_leaf as child_is_leaf\nORDER BY parent.feature, child.feature"
      }
    },
    {
      "taxonomy_rank": 7,
      "root_id": "mini_taxonomy_root_Microsoft Copilot_Microsoft Copilot_llm_clusters_20250912_223928_6edadcdb_19_2c16fa89",
      "tag": "productivity and organization",
      "quality_score": 47.7,
      "queries": {
        "screenshot_tree": "\n// Screenshot-friendly tree for: productivity and organization (Top 10 features only)\nMATCH (root:MiniTaxonomyNode {id: 'mini_taxonomy_root_Microsoft Copilot_Microsoft Copilot_llm_clusters_20250912_223928_6edadcdb_19_2c16fa89'})\nWHERE NOT (()-[:HAS_CHILD]->(root))\nOPTIONAL MATCH path = (root)-[:HAS_CHILD*1..3]->(node:MiniTaxonomyNode)\nWITH root, node, path\nORDER BY length(path), node.feature\nWITH root, collect(DISTINCT {\n    feature: node.feature,\n    depth: length(path),\n    is_leaf: NOT (node)-[:HAS_CHILD]->()\n})[0..10] as sample_nodes\nRETURN root.llm_tag as taxonomy_name,\n       root.feature as root_feature,\n       sample_nodes",
        "sample_features": "\n// Sample features for screenshots: productivity and organization (Max 8 features)\nMATCH (root:MiniTaxonomyNode {id: 'mini_taxonomy_root_Microsoft Copilot_Microsoft Copilot_llm_clusters_20250912_223928_6edadcdb_19_2c16fa89'})\nWHERE NOT (()-[:HAS_CHILD]->(root))\nMATCH (root)-[:HAS_CHILD*]->(leaf:MiniTaxonomyNode)\nWHERE NOT (leaf)-[:HAS_CHILD]->() AND leaf.feature IS NOT NULL\nWITH root, collect(DISTINCT leaf.feature) as all_features\nRETURN root.llm_tag as taxonomy_name,\n       size(all_features) as total_features,\n       all_features[0..8] as sample_features",
        "compact_hierarchy": "\n// Compact hierarchy for: productivity and organization (Screenshot ready)\nMATCH (root:MiniTaxonomyNode {id: 'mini_taxonomy_root_Microsoft Copilot_Microsoft Copilot_llm_clusters_20250912_223928_6edadcdb_19_2c16fa89'})\nWHERE NOT (()-[:HAS_CHILD]->(root))\nOPTIONAL MATCH (root)-[:HAS_CHILD]->(level1:MiniTaxonomyNode)\nOPTIONAL MATCH (level1)-[:HAS_CHILD]->(level2:MiniTaxonomyNode)\nWHERE NOT (level2)-[:HAS_CHILD]->()\nWITH root, level1, collect(level2.feature)[0..3] as level2_sample\nRETURN root.llm_tag as root_tag,\n       level1.feature as level1_feature,\n       level2_sample\nORDER BY level1.feature\nLIMIT 5",
        "leaf_features": "\n// Top 10 leaf features for: productivity and organization\nMATCH (root:MiniTaxonomyNode {id: 'mini_taxonomy_root_Microsoft Copilot_Microsoft Copilot_llm_clusters_20250912_223928_6edadcdb_19_2c16fa89'})\nWHERE NOT (()-[:HAS_CHILD]->(root))\nMATCH (root)-[:HAS_CHILD*]->(leaf:MiniTaxonomyNode)\nWHERE NOT (leaf)-[:HAS_CHILD]->() AND leaf.feature IS NOT NULL\nRETURN root.llm_tag as taxonomy_tag,\n       collect(DISTINCT leaf.feature)[0..10] as top_features,\n       count(DISTINCT leaf) as total_leaf_count",
        "tree_depth": "\n// Tree depth and structure metrics for: productivity and organization\nMATCH (root:MiniTaxonomyNode {id: 'mini_taxonomy_root_Microsoft Copilot_Microsoft Copilot_llm_clusters_20250912_223928_6edadcdb_19_2c16fa89'})\nWHERE NOT (()-[:HAS_CHILD]->(root))\nOPTIONAL MATCH path = (root)-[:HAS_CHILD*]->(leaf)\nWHERE NOT (leaf)-[:HAS_CHILD]->()\nWITH root, \n     max(length(path)) as max_depth,\n     count(DISTINCT leaf) as leaf_count,\n     avg(length(path)) as avg_depth\nRETURN root.llm_tag as taxonomy_tag,\n       max_depth,\n       leaf_count,\n       round(avg_depth, 2) as average_depth",
        "parent_child_relationships": "\n// Parent-child relationships for: productivity and organization\nMATCH (parent:MiniTaxonomyNode)-[:HAS_CHILD]->(child:MiniTaxonomyNode)\nWHERE parent.id = 'mini_taxonomy_root_Microsoft Copilot_Microsoft Copilot_llm_clusters_20250912_223928_6edadcdb_19_2c16fa89' OR \n      (parent)-[:HAS_CHILD*0..]-(:MiniTaxonomyNode {id: 'mini_taxonomy_root_Microsoft Copilot_Microsoft Copilot_llm_clusters_20250912_223928_6edadcdb_19_2c16fa89'})\nRETURN parent.id as parent_id,\n       parent.feature as parent_feature,\n       parent.is_leaf as parent_is_leaf,\n       child.id as child_id,\n       child.feature as child_feature,\n       child.is_leaf as child_is_leaf\nORDER BY parent.feature, child.feature"
      }
    },
    {
      "taxonomy_rank": 8,
      "root_id": "mini_taxonomy_root_ChatGPT_ChatGPT_llm_clusters_20250910_082155_c4ba5aa6_17_dbcac723",
      "tag": "ai applications",
      "quality_score": 47.2,
      "queries": {
        "screenshot_tree": "\n// Screenshot-friendly tree for: ai applications (Top 10 features only)\nMATCH (root:MiniTaxonomyNode {id: 'mini_taxonomy_root_ChatGPT_ChatGPT_llm_clusters_20250910_082155_c4ba5aa6_17_dbcac723'})\nWHERE NOT (()-[:HAS_CHILD]->(root))\nOPTIONAL MATCH path = (root)-[:HAS_CHILD*1..3]->(node:MiniTaxonomyNode)\nWITH root, node, path\nORDER BY length(path), node.feature\nWITH root, collect(DISTINCT {\n    feature: node.feature,\n    depth: length(path),\n    is_leaf: NOT (node)-[:HAS_CHILD]->()\n})[0..10] as sample_nodes\nRETURN root.llm_tag as taxonomy_name,\n       root.feature as root_feature,\n       sample_nodes",
        "sample_features": "\n// Sample features for screenshots: ai applications (Max 8 features)\nMATCH (root:MiniTaxonomyNode {id: 'mini_taxonomy_root_ChatGPT_ChatGPT_llm_clusters_20250910_082155_c4ba5aa6_17_dbcac723'})\nWHERE NOT (()-[:HAS_CHILD]->(root))\nMATCH (root)-[:HAS_CHILD*]->(leaf:MiniTaxonomyNode)\nWHERE NOT (leaf)-[:HAS_CHILD]->() AND leaf.feature IS NOT NULL\nWITH root, collect(DISTINCT leaf.feature) as all_features\nRETURN root.llm_tag as taxonomy_name,\n       size(all_features) as total_features,\n       all_features[0..8] as sample_features",
        "compact_hierarchy": "\n// Compact hierarchy for: ai applications (Screenshot ready)\nMATCH (root:MiniTaxonomyNode {id: 'mini_taxonomy_root_ChatGPT_ChatGPT_llm_clusters_20250910_082155_c4ba5aa6_17_dbcac723'})\nWHERE NOT (()-[:HAS_CHILD]->(root))\nOPTIONAL MATCH (root)-[:HAS_CHILD]->(level1:MiniTaxonomyNode)\nOPTIONAL MATCH (level1)-[:HAS_CHILD]->(level2:MiniTaxonomyNode)\nWHERE NOT (level2)-[:HAS_CHILD]->()\nWITH root, level1, collect(level2.feature)[0..3] as level2_sample\nRETURN root.llm_tag as root_tag,\n       level1.feature as level1_feature,\n       level2_sample\nORDER BY level1.feature\nLIMIT 5",
        "leaf_features": "\n// Top 10 leaf features for: ai applications\nMATCH (root:MiniTaxonomyNode {id: 'mini_taxonomy_root_ChatGPT_ChatGPT_llm_clusters_20250910_082155_c4ba5aa6_17_dbcac723'})\nWHERE NOT (()-[:HAS_CHILD]->(root))\nMATCH (root)-[:HAS_CHILD*]->(leaf:MiniTaxonomyNode)\nWHERE NOT (leaf)-[:HAS_CHILD]->() AND leaf.feature IS NOT NULL\nRETURN root.llm_tag as taxonomy_tag,\n       collect(DISTINCT leaf.feature)[0..10] as top_features,\n       count(DISTINCT leaf) as total_leaf_count",
        "tree_depth": "\n// Tree depth and structure metrics for: ai applications\nMATCH (root:MiniTaxonomyNode {id: 'mini_taxonomy_root_ChatGPT_ChatGPT_llm_clusters_20250910_082155_c4ba5aa6_17_dbcac723'})\nWHERE NOT (()-[:HAS_CHILD]->(root))\nOPTIONAL MATCH path = (root)-[:HAS_CHILD*]->(leaf)\nWHERE NOT (leaf)-[:HAS_CHILD]->()\nWITH root, \n     max(length(path)) as max_depth,\n     count(DISTINCT leaf) as leaf_count,\n     avg(length(path)) as avg_depth\nRETURN root.llm_tag as taxonomy_tag,\n       max_depth,\n       leaf_count,\n       round(avg_depth, 2) as average_depth",
        "parent_child_relationships": "\n// Parent-child relationships for: ai applications\nMATCH (parent:MiniTaxonomyNode)-[:HAS_CHILD]->(child:MiniTaxonomyNode)\nWHERE parent.id = 'mini_taxonomy_root_ChatGPT_ChatGPT_llm_clusters_20250910_082155_c4ba5aa6_17_dbcac723' OR \n      (parent)-[:HAS_CHILD*0..]-(:MiniTaxonomyNode {id: 'mini_taxonomy_root_ChatGPT_ChatGPT_llm_clusters_20250910_082155_c4ba5aa6_17_dbcac723'})\nRETURN parent.id as parent_id,\n       parent.feature as parent_feature,\n       parent.is_leaf as parent_is_leaf,\n       child.id as child_id,\n       child.feature as child_feature,\n       child.is_leaf as child_is_leaf\nORDER BY parent.feature, child.feature"
      }
    },
    {
      "taxonomy_rank": 9,
      "root_id": "mini_taxonomy_root_ChatGPT_ChatGPT_llm_clusters_20250910_083141_b1b6b350_0_636310ca",
      "tag": "artificial intelligence ai",
      "quality_score": 46.4,
      "queries": {
        "screenshot_tree": "\n// Screenshot-friendly tree for: artificial intelligence ai (Top 10 features only)\nMATCH (root:MiniTaxonomyNode {id: 'mini_taxonomy_root_ChatGPT_ChatGPT_llm_clusters_20250910_083141_b1b6b350_0_636310ca'})\nWHERE NOT (()-[:HAS_CHILD]->(root))\nOPTIONAL MATCH path = (root)-[:HAS_CHILD*1..3]->(node:MiniTaxonomyNode)\nWITH root, node, path\nORDER BY length(path), node.feature\nWITH root, collect(DISTINCT {\n    feature: node.feature,\n    depth: length(path),\n    is_leaf: NOT (node)-[:HAS_CHILD]->()\n})[0..10] as sample_nodes\nRETURN root.llm_tag as taxonomy_name,\n       root.feature as root_feature,\n       sample_nodes",
        "sample_features": "\n// Sample features for screenshots: artificial intelligence ai (Max 8 features)\nMATCH (root:MiniTaxonomyNode {id: 'mini_taxonomy_root_ChatGPT_ChatGPT_llm_clusters_20250910_083141_b1b6b350_0_636310ca'})\nWHERE NOT (()-[:HAS_CHILD]->(root))\nMATCH (root)-[:HAS_CHILD*]->(leaf:MiniTaxonomyNode)\nWHERE NOT (leaf)-[:HAS_CHILD]->() AND leaf.feature IS NOT NULL\nWITH root, collect(DISTINCT leaf.feature) as all_features\nRETURN root.llm_tag as taxonomy_name,\n       size(all_features) as total_features,\n       all_features[0..8] as sample_features",
        "compact_hierarchy": "\n// Compact hierarchy for: artificial intelligence ai (Screenshot ready)\nMATCH (root:MiniTaxonomyNode {id: 'mini_taxonomy_root_ChatGPT_ChatGPT_llm_clusters_20250910_083141_b1b6b350_0_636310ca'})\nWHERE NOT (()-[:HAS_CHILD]->(root))\nOPTIONAL MATCH (root)-[:HAS_CHILD]->(level1:MiniTaxonomyNode)\nOPTIONAL MATCH (level1)-[:HAS_CHILD]->(level2:MiniTaxonomyNode)\nWHERE NOT (level2)-[:HAS_CHILD]->()\nWITH root, level1, collect(level2.feature)[0..3] as level2_sample\nRETURN root.llm_tag as root_tag,\n       level1.feature as level1_feature,\n       level2_sample\nORDER BY level1.feature\nLIMIT 5",
        "leaf_features": "\n// Top 10 leaf features for: artificial intelligence ai\nMATCH (root:MiniTaxonomyNode {id: 'mini_taxonomy_root_ChatGPT_ChatGPT_llm_clusters_20250910_083141_b1b6b350_0_636310ca'})\nWHERE NOT (()-[:HAS_CHILD]->(root))\nMATCH (root)-[:HAS_CHILD*]->(leaf:MiniTaxonomyNode)\nWHERE NOT (leaf)-[:HAS_CHILD]->() AND leaf.feature IS NOT NULL\nRETURN root.llm_tag as taxonomy_tag,\n       collect(DISTINCT leaf.feature)[0..10] as top_features,\n       count(DISTINCT leaf) as total_leaf_count",
        "tree_depth": "\n// Tree depth and structure metrics for: artificial intelligence ai\nMATCH (root:MiniTaxonomyNode {id: 'mini_taxonomy_root_ChatGPT_ChatGPT_llm_clusters_20250910_083141_b1b6b350_0_636310ca'})\nWHERE NOT (()-[:HAS_CHILD]->(root))\nOPTIONAL MATCH path = (root)-[:HAS_CHILD*]->(leaf)\nWHERE NOT (leaf)-[:HAS_CHILD]->()\nWITH root, \n     max(length(path)) as max_depth,\n     count(DISTINCT leaf) as leaf_count,\n     avg(length(path)) as avg_depth\nRETURN root.llm_tag as taxonomy_tag,\n       max_depth,\n       leaf_count,\n       round(avg_depth, 2) as average_depth",
        "parent_child_relationships": "\n// Parent-child relationships for: artificial intelligence ai\nMATCH (parent:MiniTaxonomyNode)-[:HAS_CHILD]->(child:MiniTaxonomyNode)\nWHERE parent.id = 'mini_taxonomy_root_ChatGPT_ChatGPT_llm_clusters_20250910_083141_b1b6b350_0_636310ca' OR \n      (parent)-[:HAS_CHILD*0..]-(:MiniTaxonomyNode {id: 'mini_taxonomy_root_ChatGPT_ChatGPT_llm_clusters_20250910_083141_b1b6b350_0_636310ca'})\nRETURN parent.id as parent_id,\n       parent.feature as parent_feature,\n       parent.is_leaf as parent_is_leaf,\n       child.id as child_id,\n       child.feature as child_feature,\n       child.is_leaf as child_is_leaf\nORDER BY parent.feature, child.feature"
      }
    },
    {
      "taxonomy_rank": 10,
      "root_id": "mini_taxonomy_root_ChatGPT_ChatGPT_llm_clusters_20250910_082050_d634221b_174_9f47e36b",
      "tag": "image processing",
      "quality_score": 45.6,
      "queries": {
        "screenshot_tree": "\n// Screenshot-friendly tree for: image processing (Top 10 features only)\nMATCH (root:MiniTaxonomyNode {id: 'mini_taxonomy_root_ChatGPT_ChatGPT_llm_clusters_20250910_082050_d634221b_174_9f47e36b'})\nWHERE NOT (()-[:HAS_CHILD]->(root))\nOPTIONAL MATCH path = (root)-[:HAS_CHILD*1..3]->(node:MiniTaxonomyNode)\nWITH root, node, path\nORDER BY length(path), node.feature\nWITH root, collect(DISTINCT {\n    feature: node.feature,\n    depth: length(path),\n    is_leaf: NOT (node)-[:HAS_CHILD]->()\n})[0..10] as sample_nodes\nRETURN root.llm_tag as taxonomy_name,\n       root.feature as root_feature,\n       sample_nodes",
        "sample_features": "\n// Sample features for screenshots: image processing (Max 8 features)\nMATCH (root:MiniTaxonomyNode {id: 'mini_taxonomy_root_ChatGPT_ChatGPT_llm_clusters_20250910_082050_d634221b_174_9f47e36b'})\nWHERE NOT (()-[:HAS_CHILD]->(root))\nMATCH (root)-[:HAS_CHILD*]->(leaf:MiniTaxonomyNode)\nWHERE NOT (leaf)-[:HAS_CHILD]->() AND leaf.feature IS NOT NULL\nWITH root, collect(DISTINCT leaf.feature) as all_features\nRETURN root.llm_tag as taxonomy_name,\n       size(all_features) as total_features,\n       all_features[0..8] as sample_features",
        "compact_hierarchy": "\n// Compact hierarchy for: image processing (Screenshot ready)\nMATCH (root:MiniTaxonomyNode {id: 'mini_taxonomy_root_ChatGPT_ChatGPT_llm_clusters_20250910_082050_d634221b_174_9f47e36b'})\nWHERE NOT (()-[:HAS_CHILD]->(root))\nOPTIONAL MATCH (root)-[:HAS_CHILD]->(level1:MiniTaxonomyNode)\nOPTIONAL MATCH (level1)-[:HAS_CHILD]->(level2:MiniTaxonomyNode)\nWHERE NOT (level2)-[:HAS_CHILD]->()\nWITH root, level1, collect(level2.feature)[0..3] as level2_sample\nRETURN root.llm_tag as root_tag,\n       level1.feature as level1_feature,\n       level2_sample\nORDER BY level1.feature\nLIMIT 5",
        "leaf_features": "\n// Top 10 leaf features for: image processing\nMATCH (root:MiniTaxonomyNode {id: 'mini_taxonomy_root_ChatGPT_ChatGPT_llm_clusters_20250910_082050_d634221b_174_9f47e36b'})\nWHERE NOT (()-[:HAS_CHILD]->(root))\nMATCH (root)-[:HAS_CHILD*]->(leaf:MiniTaxonomyNode)\nWHERE NOT (leaf)-[:HAS_CHILD]->() AND leaf.feature IS NOT NULL\nRETURN root.llm_tag as taxonomy_tag,\n       collect(DISTINCT leaf.feature)[0..10] as top_features,\n       count(DISTINCT leaf) as total_leaf_count",
        "tree_depth": "\n// Tree depth and structure metrics for: image processing\nMATCH (root:MiniTaxonomyNode {id: 'mini_taxonomy_root_ChatGPT_ChatGPT_llm_clusters_20250910_082050_d634221b_174_9f47e36b'})\nWHERE NOT (()-[:HAS_CHILD]->(root))\nOPTIONAL MATCH path = (root)-[:HAS_CHILD*]->(leaf)\nWHERE NOT (leaf)-[:HAS_CHILD]->()\nWITH root, \n     max(length(path)) as max_depth,\n     count(DISTINCT leaf) as leaf_count,\n     avg(length(path)) as avg_depth\nRETURN root.llm_tag as taxonomy_tag,\n       max_depth,\n       leaf_count,\n       round(avg_depth, 2) as average_depth",
        "parent_child_relationships": "\n// Parent-child relationships for: image processing\nMATCH (parent:MiniTaxonomyNode)-[:HAS_CHILD]->(child:MiniTaxonomyNode)\nWHERE parent.id = 'mini_taxonomy_root_ChatGPT_ChatGPT_llm_clusters_20250910_082050_d634221b_174_9f47e36b' OR \n      (parent)-[:HAS_CHILD*0..]-(:MiniTaxonomyNode {id: 'mini_taxonomy_root_ChatGPT_ChatGPT_llm_clusters_20250910_082050_d634221b_174_9f47e36b'})\nRETURN parent.id as parent_id,\n       parent.feature as parent_feature,\n       parent.is_leaf as parent_is_leaf,\n       child.id as child_id,\n       child.feature as child_feature,\n       child.is_leaf as child_is_leaf\nORDER BY parent.feature, child.feature"
      }
    },
    {
      "taxonomy_rank": 11,
      "root_id": "mini_taxonomy_root_ChatGPT_ChatGPT_llm_clusters_20250910_204708_70fa85d0_19_3c8fef39",
      "tag": "multimodal understanding",
      "quality_score": 45.4,
      "queries": {
        "screenshot_tree": "\n// Screenshot-friendly tree for: multimodal understanding (Top 10 features only)\nMATCH (root:MiniTaxonomyNode {id: 'mini_taxonomy_root_ChatGPT_ChatGPT_llm_clusters_20250910_204708_70fa85d0_19_3c8fef39'})\nWHERE NOT (()-[:HAS_CHILD]->(root))\nOPTIONAL MATCH path = (root)-[:HAS_CHILD*1..3]->(node:MiniTaxonomyNode)\nWITH root, node, path\nORDER BY length(path), node.feature\nWITH root, collect(DISTINCT {\n    feature: node.feature,\n    depth: length(path),\n    is_leaf: NOT (node)-[:HAS_CHILD]->()\n})[0..10] as sample_nodes\nRETURN root.llm_tag as taxonomy_name,\n       root.feature as root_feature,\n       sample_nodes",
        "sample_features": "\n// Sample features for screenshots: multimodal understanding (Max 8 features)\nMATCH (root:MiniTaxonomyNode {id: 'mini_taxonomy_root_ChatGPT_ChatGPT_llm_clusters_20250910_204708_70fa85d0_19_3c8fef39'})\nWHERE NOT (()-[:HAS_CHILD]->(root))\nMATCH (root)-[:HAS_CHILD*]->(leaf:MiniTaxonomyNode)\nWHERE NOT (leaf)-[:HAS_CHILD]->() AND leaf.feature IS NOT NULL\nWITH root, collect(DISTINCT leaf.feature) as all_features\nRETURN root.llm_tag as taxonomy_name,\n       size(all_features) as total_features,\n       all_features[0..8] as sample_features",
        "compact_hierarchy": "\n// Compact hierarchy for: multimodal understanding (Screenshot ready)\nMATCH (root:MiniTaxonomyNode {id: 'mini_taxonomy_root_ChatGPT_ChatGPT_llm_clusters_20250910_204708_70fa85d0_19_3c8fef39'})\nWHERE NOT (()-[:HAS_CHILD]->(root))\nOPTIONAL MATCH (root)-[:HAS_CHILD]->(level1:MiniTaxonomyNode)\nOPTIONAL MATCH (level1)-[:HAS_CHILD]->(level2:MiniTaxonomyNode)\nWHERE NOT (level2)-[:HAS_CHILD]->()\nWITH root, level1, collect(level2.feature)[0..3] as level2_sample\nRETURN root.llm_tag as root_tag,\n       level1.feature as level1_feature,\n       level2_sample\nORDER BY level1.feature\nLIMIT 5",
        "leaf_features": "\n// Top 10 leaf features for: multimodal understanding\nMATCH (root:MiniTaxonomyNode {id: 'mini_taxonomy_root_ChatGPT_ChatGPT_llm_clusters_20250910_204708_70fa85d0_19_3c8fef39'})\nWHERE NOT (()-[:HAS_CHILD]->(root))\nMATCH (root)-[:HAS_CHILD*]->(leaf:MiniTaxonomyNode)\nWHERE NOT (leaf)-[:HAS_CHILD]->() AND leaf.feature IS NOT NULL\nRETURN root.llm_tag as taxonomy_tag,\n       collect(DISTINCT leaf.feature)[0..10] as top_features,\n       count(DISTINCT leaf) as total_leaf_count",
        "tree_depth": "\n// Tree depth and structure metrics for: multimodal understanding\nMATCH (root:MiniTaxonomyNode {id: 'mini_taxonomy_root_ChatGPT_ChatGPT_llm_clusters_20250910_204708_70fa85d0_19_3c8fef39'})\nWHERE NOT (()-[:HAS_CHILD]->(root))\nOPTIONAL MATCH path = (root)-[:HAS_CHILD*]->(leaf)\nWHERE NOT (leaf)-[:HAS_CHILD]->()\nWITH root, \n     max(length(path)) as max_depth,\n     count(DISTINCT leaf) as leaf_count,\n     avg(length(path)) as avg_depth\nRETURN root.llm_tag as taxonomy_tag,\n       max_depth,\n       leaf_count,\n       round(avg_depth, 2) as average_depth",
        "parent_child_relationships": "\n// Parent-child relationships for: multimodal understanding\nMATCH (parent:MiniTaxonomyNode)-[:HAS_CHILD]->(child:MiniTaxonomyNode)\nWHERE parent.id = 'mini_taxonomy_root_ChatGPT_ChatGPT_llm_clusters_20250910_204708_70fa85d0_19_3c8fef39' OR \n      (parent)-[:HAS_CHILD*0..]-(:MiniTaxonomyNode {id: 'mini_taxonomy_root_ChatGPT_ChatGPT_llm_clusters_20250910_204708_70fa85d0_19_3c8fef39'})\nRETURN parent.id as parent_id,\n       parent.feature as parent_feature,\n       parent.is_leaf as parent_is_leaf,\n       child.id as child_id,\n       child.feature as child_feature,\n       child.is_leaf as child_is_leaf\nORDER BY parent.feature, child.feature"
      }
    },
    {
      "taxonomy_rank": 12,
      "root_id": "mini_taxonomy_root_Google Gemini_Google Gemini_llm_clusters_20250912_020749_ecf39b6e_25_8c9eba83",
      "tag": "social media support",
      "quality_score": 45.1,
      "queries": {
        "screenshot_tree": "\n// Screenshot-friendly tree for: social media support (Top 10 features only)\nMATCH (root:MiniTaxonomyNode {id: 'mini_taxonomy_root_Google Gemini_Google Gemini_llm_clusters_20250912_020749_ecf39b6e_25_8c9eba83'})\nWHERE NOT (()-[:HAS_CHILD]->(root))\nOPTIONAL MATCH path = (root)-[:HAS_CHILD*1..3]->(node:MiniTaxonomyNode)\nWITH root, node, path\nORDER BY length(path), node.feature\nWITH root, collect(DISTINCT {\n    feature: node.feature,\n    depth: length(path),\n    is_leaf: NOT (node)-[:HAS_CHILD]->()\n})[0..10] as sample_nodes\nRETURN root.llm_tag as taxonomy_name,\n       root.feature as root_feature,\n       sample_nodes",
        "sample_features": "\n// Sample features for screenshots: social media support (Max 8 features)\nMATCH (root:MiniTaxonomyNode {id: 'mini_taxonomy_root_Google Gemini_Google Gemini_llm_clusters_20250912_020749_ecf39b6e_25_8c9eba83'})\nWHERE NOT (()-[:HAS_CHILD]->(root))\nMATCH (root)-[:HAS_CHILD*]->(leaf:MiniTaxonomyNode)\nWHERE NOT (leaf)-[:HAS_CHILD]->() AND leaf.feature IS NOT NULL\nWITH root, collect(DISTINCT leaf.feature) as all_features\nRETURN root.llm_tag as taxonomy_name,\n       size(all_features) as total_features,\n       all_features[0..8] as sample_features",
        "compact_hierarchy": "\n// Compact hierarchy for: social media support (Screenshot ready)\nMATCH (root:MiniTaxonomyNode {id: 'mini_taxonomy_root_Google Gemini_Google Gemini_llm_clusters_20250912_020749_ecf39b6e_25_8c9eba83'})\nWHERE NOT (()-[:HAS_CHILD]->(root))\nOPTIONAL MATCH (root)-[:HAS_CHILD]->(level1:MiniTaxonomyNode)\nOPTIONAL MATCH (level1)-[:HAS_CHILD]->(level2:MiniTaxonomyNode)\nWHERE NOT (level2)-[:HAS_CHILD]->()\nWITH root, level1, collect(level2.feature)[0..3] as level2_sample\nRETURN root.llm_tag as root_tag,\n       level1.feature as level1_feature,\n       level2_sample\nORDER BY level1.feature\nLIMIT 5",
        "leaf_features": "\n// Top 10 leaf features for: social media support\nMATCH (root:MiniTaxonomyNode {id: 'mini_taxonomy_root_Google Gemini_Google Gemini_llm_clusters_20250912_020749_ecf39b6e_25_8c9eba83'})\nWHERE NOT (()-[:HAS_CHILD]->(root))\nMATCH (root)-[:HAS_CHILD*]->(leaf:MiniTaxonomyNode)\nWHERE NOT (leaf)-[:HAS_CHILD]->() AND leaf.feature IS NOT NULL\nRETURN root.llm_tag as taxonomy_tag,\n       collect(DISTINCT leaf.feature)[0..10] as top_features,\n       count(DISTINCT leaf) as total_leaf_count",
        "tree_depth": "\n// Tree depth and structure metrics for: social media support\nMATCH (root:MiniTaxonomyNode {id: 'mini_taxonomy_root_Google Gemini_Google Gemini_llm_clusters_20250912_020749_ecf39b6e_25_8c9eba83'})\nWHERE NOT (()-[:HAS_CHILD]->(root))\nOPTIONAL MATCH path = (root)-[:HAS_CHILD*]->(leaf)\nWHERE NOT (leaf)-[:HAS_CHILD]->()\nWITH root, \n     max(length(path)) as max_depth,\n     count(DISTINCT leaf) as leaf_count,\n     avg(length(path)) as avg_depth\nRETURN root.llm_tag as taxonomy_tag,\n       max_depth,\n       leaf_count,\n       round(avg_depth, 2) as average_depth",
        "parent_child_relationships": "\n// Parent-child relationships for: social media support\nMATCH (parent:MiniTaxonomyNode)-[:HAS_CHILD]->(child:MiniTaxonomyNode)\nWHERE parent.id = 'mini_taxonomy_root_Google Gemini_Google Gemini_llm_clusters_20250912_020749_ecf39b6e_25_8c9eba83' OR \n      (parent)-[:HAS_CHILD*0..]-(:MiniTaxonomyNode {id: 'mini_taxonomy_root_Google Gemini_Google Gemini_llm_clusters_20250912_020749_ecf39b6e_25_8c9eba83'})\nRETURN parent.id as parent_id,\n       parent.feature as parent_feature,\n       parent.is_leaf as parent_is_leaf,\n       child.id as child_id,\n       child.feature as child_feature,\n       child.is_leaf as child_is_leaf\nORDER BY parent.feature, child.feature"
      }
    },
    {
      "taxonomy_rank": 13,
      "root_id": "mini_taxonomy_root_ChatGPT_ChatGPT_llm_clusters_20250910_194105_caca669e_9_c8e636e6",
      "tag": "learning and education support",
      "quality_score": 44.4,
      "queries": {
        "screenshot_tree": "\n// Screenshot-friendly tree for: learning and education support (Top 10 features only)\nMATCH (root:MiniTaxonomyNode {id: 'mini_taxonomy_root_ChatGPT_ChatGPT_llm_clusters_20250910_194105_caca669e_9_c8e636e6'})\nWHERE NOT (()-[:HAS_CHILD]->(root))\nOPTIONAL MATCH path = (root)-[:HAS_CHILD*1..3]->(node:MiniTaxonomyNode)\nWITH root, node, path\nORDER BY length(path), node.feature\nWITH root, collect(DISTINCT {\n    feature: node.feature,\n    depth: length(path),\n    is_leaf: NOT (node)-[:HAS_CHILD]->()\n})[0..10] as sample_nodes\nRETURN root.llm_tag as taxonomy_name,\n       root.feature as root_feature,\n       sample_nodes",
        "sample_features": "\n// Sample features for screenshots: learning and education support (Max 8 features)\nMATCH (root:MiniTaxonomyNode {id: 'mini_taxonomy_root_ChatGPT_ChatGPT_llm_clusters_20250910_194105_caca669e_9_c8e636e6'})\nWHERE NOT (()-[:HAS_CHILD]->(root))\nMATCH (root)-[:HAS_CHILD*]->(leaf:MiniTaxonomyNode)\nWHERE NOT (leaf)-[:HAS_CHILD]->() AND leaf.feature IS NOT NULL\nWITH root, collect(DISTINCT leaf.feature) as all_features\nRETURN root.llm_tag as taxonomy_name,\n       size(all_features) as total_features,\n       all_features[0..8] as sample_features",
        "compact_hierarchy": "\n// Compact hierarchy for: learning and education support (Screenshot ready)\nMATCH (root:MiniTaxonomyNode {id: 'mini_taxonomy_root_ChatGPT_ChatGPT_llm_clusters_20250910_194105_caca669e_9_c8e636e6'})\nWHERE NOT (()-[:HAS_CHILD]->(root))\nOPTIONAL MATCH (root)-[:HAS_CHILD]->(level1:MiniTaxonomyNode)\nOPTIONAL MATCH (level1)-[:HAS_CHILD]->(level2:MiniTaxonomyNode)\nWHERE NOT (level2)-[:HAS_CHILD]->()\nWITH root, level1, collect(level2.feature)[0..3] as level2_sample\nRETURN root.llm_tag as root_tag,\n       level1.feature as level1_feature,\n       level2_sample\nORDER BY level1.feature\nLIMIT 5",
        "leaf_features": "\n// Top 10 leaf features for: learning and education support\nMATCH (root:MiniTaxonomyNode {id: 'mini_taxonomy_root_ChatGPT_ChatGPT_llm_clusters_20250910_194105_caca669e_9_c8e636e6'})\nWHERE NOT (()-[:HAS_CHILD]->(root))\nMATCH (root)-[:HAS_CHILD*]->(leaf:MiniTaxonomyNode)\nWHERE NOT (leaf)-[:HAS_CHILD]->() AND leaf.feature IS NOT NULL\nRETURN root.llm_tag as taxonomy_tag,\n       collect(DISTINCT leaf.feature)[0..10] as top_features,\n       count(DISTINCT leaf) as total_leaf_count",
        "tree_depth": "\n// Tree depth and structure metrics for: learning and education support\nMATCH (root:MiniTaxonomyNode {id: 'mini_taxonomy_root_ChatGPT_ChatGPT_llm_clusters_20250910_194105_caca669e_9_c8e636e6'})\nWHERE NOT (()-[:HAS_CHILD]->(root))\nOPTIONAL MATCH path = (root)-[:HAS_CHILD*]->(leaf)\nWHERE NOT (leaf)-[:HAS_CHILD]->()\nWITH root, \n     max(length(path)) as max_depth,\n     count(DISTINCT leaf) as leaf_count,\n     avg(length(path)) as avg_depth\nRETURN root.llm_tag as taxonomy_tag,\n       max_depth,\n       leaf_count,\n       round(avg_depth, 2) as average_depth",
        "parent_child_relationships": "\n// Parent-child relationships for: learning and education support\nMATCH (parent:MiniTaxonomyNode)-[:HAS_CHILD]->(child:MiniTaxonomyNode)\nWHERE parent.id = 'mini_taxonomy_root_ChatGPT_ChatGPT_llm_clusters_20250910_194105_caca669e_9_c8e636e6' OR \n      (parent)-[:HAS_CHILD*0..]-(:MiniTaxonomyNode {id: 'mini_taxonomy_root_ChatGPT_ChatGPT_llm_clusters_20250910_194105_caca669e_9_c8e636e6'})\nRETURN parent.id as parent_id,\n       parent.feature as parent_feature,\n       parent.is_leaf as parent_is_leaf,\n       child.id as child_id,\n       child.feature as child_feature,\n       child.is_leaf as child_is_leaf\nORDER BY parent.feature, child.feature"
      }
    },
    {
      "taxonomy_rank": 14,
      "root_id": "mini_taxonomy_root_Google Gemini_Google Gemini_llm_clusters_20250912_020311_2f8b14f4_3_8964bb42",
      "tag": "text",
      "quality_score": 43.4,
      "queries": {
        "screenshot_tree": "\n// Screenshot-friendly tree for: text (Top 10 features only)\nMATCH (root:MiniTaxonomyNode {id: 'mini_taxonomy_root_Google Gemini_Google Gemini_llm_clusters_20250912_020311_2f8b14f4_3_8964bb42'})\nWHERE NOT (()-[:HAS_CHILD]->(root))\nOPTIONAL MATCH path = (root)-[:HAS_CHILD*1..3]->(node:MiniTaxonomyNode)\nWITH root, node, path\nORDER BY length(path), node.feature\nWITH root, collect(DISTINCT {\n    feature: node.feature,\n    depth: length(path),\n    is_leaf: NOT (node)-[:HAS_CHILD]->()\n})[0..10] as sample_nodes\nRETURN root.llm_tag as taxonomy_name,\n       root.feature as root_feature,\n       sample_nodes",
        "sample_features": "\n// Sample features for screenshots: text (Max 8 features)\nMATCH (root:MiniTaxonomyNode {id: 'mini_taxonomy_root_Google Gemini_Google Gemini_llm_clusters_20250912_020311_2f8b14f4_3_8964bb42'})\nWHERE NOT (()-[:HAS_CHILD]->(root))\nMATCH (root)-[:HAS_CHILD*]->(leaf:MiniTaxonomyNode)\nWHERE NOT (leaf)-[:HAS_CHILD]->() AND leaf.feature IS NOT NULL\nWITH root, collect(DISTINCT leaf.feature) as all_features\nRETURN root.llm_tag as taxonomy_name,\n       size(all_features) as total_features,\n       all_features[0..8] as sample_features",
        "compact_hierarchy": "\n// Compact hierarchy for: text (Screenshot ready)\nMATCH (root:MiniTaxonomyNode {id: 'mini_taxonomy_root_Google Gemini_Google Gemini_llm_clusters_20250912_020311_2f8b14f4_3_8964bb42'})\nWHERE NOT (()-[:HAS_CHILD]->(root))\nOPTIONAL MATCH (root)-[:HAS_CHILD]->(level1:MiniTaxonomyNode)\nOPTIONAL MATCH (level1)-[:HAS_CHILD]->(level2:MiniTaxonomyNode)\nWHERE NOT (level2)-[:HAS_CHILD]->()\nWITH root, level1, collect(level2.feature)[0..3] as level2_sample\nRETURN root.llm_tag as root_tag,\n       level1.feature as level1_feature,\n       level2_sample\nORDER BY level1.feature\nLIMIT 5",
        "leaf_features": "\n// Top 10 leaf features for: text\nMATCH (root:MiniTaxonomyNode {id: 'mini_taxonomy_root_Google Gemini_Google Gemini_llm_clusters_20250912_020311_2f8b14f4_3_8964bb42'})\nWHERE NOT (()-[:HAS_CHILD]->(root))\nMATCH (root)-[:HAS_CHILD*]->(leaf:MiniTaxonomyNode)\nWHERE NOT (leaf)-[:HAS_CHILD]->() AND leaf.feature IS NOT NULL\nRETURN root.llm_tag as taxonomy_tag,\n       collect(DISTINCT leaf.feature)[0..10] as top_features,\n       count(DISTINCT leaf) as total_leaf_count",
        "tree_depth": "\n// Tree depth and structure metrics for: text\nMATCH (root:MiniTaxonomyNode {id: 'mini_taxonomy_root_Google Gemini_Google Gemini_llm_clusters_20250912_020311_2f8b14f4_3_8964bb42'})\nWHERE NOT (()-[:HAS_CHILD]->(root))\nOPTIONAL MATCH path = (root)-[:HAS_CHILD*]->(leaf)\nWHERE NOT (leaf)-[:HAS_CHILD]->()\nWITH root, \n     max(length(path)) as max_depth,\n     count(DISTINCT leaf) as leaf_count,\n     avg(length(path)) as avg_depth\nRETURN root.llm_tag as taxonomy_tag,\n       max_depth,\n       leaf_count,\n       round(avg_depth, 2) as average_depth",
        "parent_child_relationships": "\n// Parent-child relationships for: text\nMATCH (parent:MiniTaxonomyNode)-[:HAS_CHILD]->(child:MiniTaxonomyNode)\nWHERE parent.id = 'mini_taxonomy_root_Google Gemini_Google Gemini_llm_clusters_20250912_020311_2f8b14f4_3_8964bb42' OR \n      (parent)-[:HAS_CHILD*0..]-(:MiniTaxonomyNode {id: 'mini_taxonomy_root_Google Gemini_Google Gemini_llm_clusters_20250912_020311_2f8b14f4_3_8964bb42'})\nRETURN parent.id as parent_id,\n       parent.feature as parent_feature,\n       parent.is_leaf as parent_is_leaf,\n       child.id as child_id,\n       child.feature as child_feature,\n       child.is_leaf as child_is_leaf\nORDER BY parent.feature, child.feature"
      }
    },
    {
      "taxonomy_rank": 15,
      "root_id": "mini_taxonomy_root_ChatGPT_ChatGPT_llm_clusters_20250910_080717_f2c7aed2_2_f03866f7",
      "tag": "social media support",
      "quality_score": 42.2,
      "queries": {
        "screenshot_tree": "\n// Screenshot-friendly tree for: social media support (Top 10 features only)\nMATCH (root:MiniTaxonomyNode {id: 'mini_taxonomy_root_ChatGPT_ChatGPT_llm_clusters_20250910_080717_f2c7aed2_2_f03866f7'})\nWHERE NOT (()-[:HAS_CHILD]->(root))\nOPTIONAL MATCH path = (root)-[:HAS_CHILD*1..3]->(node:MiniTaxonomyNode)\nWITH root, node, path\nORDER BY length(path), node.feature\nWITH root, collect(DISTINCT {\n    feature: node.feature,\n    depth: length(path),\n    is_leaf: NOT (node)-[:HAS_CHILD]->()\n})[0..10] as sample_nodes\nRETURN root.llm_tag as taxonomy_name,\n       root.feature as root_feature,\n       sample_nodes",
        "sample_features": "\n// Sample features for screenshots: social media support (Max 8 features)\nMATCH (root:MiniTaxonomyNode {id: 'mini_taxonomy_root_ChatGPT_ChatGPT_llm_clusters_20250910_080717_f2c7aed2_2_f03866f7'})\nWHERE NOT (()-[:HAS_CHILD]->(root))\nMATCH (root)-[:HAS_CHILD*]->(leaf:MiniTaxonomyNode)\nWHERE NOT (leaf)-[:HAS_CHILD]->() AND leaf.feature IS NOT NULL\nWITH root, collect(DISTINCT leaf.feature) as all_features\nRETURN root.llm_tag as taxonomy_name,\n       size(all_features) as total_features,\n       all_features[0..8] as sample_features",
        "compact_hierarchy": "\n// Compact hierarchy for: social media support (Screenshot ready)\nMATCH (root:MiniTaxonomyNode {id: 'mini_taxonomy_root_ChatGPT_ChatGPT_llm_clusters_20250910_080717_f2c7aed2_2_f03866f7'})\nWHERE NOT (()-[:HAS_CHILD]->(root))\nOPTIONAL MATCH (root)-[:HAS_CHILD]->(level1:MiniTaxonomyNode)\nOPTIONAL MATCH (level1)-[:HAS_CHILD]->(level2:MiniTaxonomyNode)\nWHERE NOT (level2)-[:HAS_CHILD]->()\nWITH root, level1, collect(level2.feature)[0..3] as level2_sample\nRETURN root.llm_tag as root_tag,\n       level1.feature as level1_feature,\n       level2_sample\nORDER BY level1.feature\nLIMIT 5",
        "leaf_features": "\n// Top 10 leaf features for: social media support\nMATCH (root:MiniTaxonomyNode {id: 'mini_taxonomy_root_ChatGPT_ChatGPT_llm_clusters_20250910_080717_f2c7aed2_2_f03866f7'})\nWHERE NOT (()-[:HAS_CHILD]->(root))\nMATCH (root)-[:HAS_CHILD*]->(leaf:MiniTaxonomyNode)\nWHERE NOT (leaf)-[:HAS_CHILD]->() AND leaf.feature IS NOT NULL\nRETURN root.llm_tag as taxonomy_tag,\n       collect(DISTINCT leaf.feature)[0..10] as top_features,\n       count(DISTINCT leaf) as total_leaf_count",
        "tree_depth": "\n// Tree depth and structure metrics for: social media support\nMATCH (root:MiniTaxonomyNode {id: 'mini_taxonomy_root_ChatGPT_ChatGPT_llm_clusters_20250910_080717_f2c7aed2_2_f03866f7'})\nWHERE NOT (()-[:HAS_CHILD]->(root))\nOPTIONAL MATCH path = (root)-[:HAS_CHILD*]->(leaf)\nWHERE NOT (leaf)-[:HAS_CHILD]->()\nWITH root, \n     max(length(path)) as max_depth,\n     count(DISTINCT leaf) as leaf_count,\n     avg(length(path)) as avg_depth\nRETURN root.llm_tag as taxonomy_tag,\n       max_depth,\n       leaf_count,\n       round(avg_depth, 2) as average_depth",
        "parent_child_relationships": "\n// Parent-child relationships for: social media support\nMATCH (parent:MiniTaxonomyNode)-[:HAS_CHILD]->(child:MiniTaxonomyNode)\nWHERE parent.id = 'mini_taxonomy_root_ChatGPT_ChatGPT_llm_clusters_20250910_080717_f2c7aed2_2_f03866f7' OR \n      (parent)-[:HAS_CHILD*0..]-(:MiniTaxonomyNode {id: 'mini_taxonomy_root_ChatGPT_ChatGPT_llm_clusters_20250910_080717_f2c7aed2_2_f03866f7'})\nRETURN parent.id as parent_id,\n       parent.feature as parent_feature,\n       parent.is_leaf as parent_is_leaf,\n       child.id as child_id,\n       child.feature as child_feature,\n       child.is_leaf as child_is_leaf\nORDER BY parent.feature, child.feature"
      }
    },
    {
      "taxonomy_rank": 16,
      "root_id": "mini_taxonomy_root_Perplexity - Ask Anything_Perplexity - Ask Anything_llm_clusters_20250913_072623_d6afa9ba_55_c1cbd8be",
      "tag": "productivity and organization",
      "quality_score": 41.2,
      "queries": {
        "screenshot_tree": "\n// Screenshot-friendly tree for: productivity and organization (Top 10 features only)\nMATCH (root:MiniTaxonomyNode {id: 'mini_taxonomy_root_Perplexity - Ask Anything_Perplexity - Ask Anything_llm_clusters_20250913_072623_d6afa9ba_55_c1cbd8be'})\nWHERE NOT (()-[:HAS_CHILD]->(root))\nOPTIONAL MATCH path = (root)-[:HAS_CHILD*1..3]->(node:MiniTaxonomyNode)\nWITH root, node, path\nORDER BY length(path), node.feature\nWITH root, collect(DISTINCT {\n    feature: node.feature,\n    depth: length(path),\n    is_leaf: NOT (node)-[:HAS_CHILD]->()\n})[0..10] as sample_nodes\nRETURN root.llm_tag as taxonomy_name,\n       root.feature as root_feature,\n       sample_nodes",
        "sample_features": "\n// Sample features for screenshots: productivity and organization (Max 8 features)\nMATCH (root:MiniTaxonomyNode {id: 'mini_taxonomy_root_Perplexity - Ask Anything_Perplexity - Ask Anything_llm_clusters_20250913_072623_d6afa9ba_55_c1cbd8be'})\nWHERE NOT (()-[:HAS_CHILD]->(root))\nMATCH (root)-[:HAS_CHILD*]->(leaf:MiniTaxonomyNode)\nWHERE NOT (leaf)-[:HAS_CHILD]->() AND leaf.feature IS NOT NULL\nWITH root, collect(DISTINCT leaf.feature) as all_features\nRETURN root.llm_tag as taxonomy_name,\n       size(all_features) as total_features,\n       all_features[0..8] as sample_features",
        "compact_hierarchy": "\n// Compact hierarchy for: productivity and organization (Screenshot ready)\nMATCH (root:MiniTaxonomyNode {id: 'mini_taxonomy_root_Perplexity - Ask Anything_Perplexity - Ask Anything_llm_clusters_20250913_072623_d6afa9ba_55_c1cbd8be'})\nWHERE NOT (()-[:HAS_CHILD]->(root))\nOPTIONAL MATCH (root)-[:HAS_CHILD]->(level1:MiniTaxonomyNode)\nOPTIONAL MATCH (level1)-[:HAS_CHILD]->(level2:MiniTaxonomyNode)\nWHERE NOT (level2)-[:HAS_CHILD]->()\nWITH root, level1, collect(level2.feature)[0..3] as level2_sample\nRETURN root.llm_tag as root_tag,\n       level1.feature as level1_feature,\n       level2_sample\nORDER BY level1.feature\nLIMIT 5",
        "leaf_features": "\n// Top 10 leaf features for: productivity and organization\nMATCH (root:MiniTaxonomyNode {id: 'mini_taxonomy_root_Perplexity - Ask Anything_Perplexity - Ask Anything_llm_clusters_20250913_072623_d6afa9ba_55_c1cbd8be'})\nWHERE NOT (()-[:HAS_CHILD]->(root))\nMATCH (root)-[:HAS_CHILD*]->(leaf:MiniTaxonomyNode)\nWHERE NOT (leaf)-[:HAS_CHILD]->() AND leaf.feature IS NOT NULL\nRETURN root.llm_tag as taxonomy_tag,\n       collect(DISTINCT leaf.feature)[0..10] as top_features,\n       count(DISTINCT leaf) as total_leaf_count",
        "tree_depth": "\n// Tree depth and structure metrics for: productivity and organization\nMATCH (root:MiniTaxonomyNode {id: 'mini_taxonomy_root_Perplexity - Ask Anything_Perplexity - Ask Anything_llm_clusters_20250913_072623_d6afa9ba_55_c1cbd8be'})\nWHERE NOT (()-[:HAS_CHILD]->(root))\nOPTIONAL MATCH path = (root)-[:HAS_CHILD*]->(leaf)\nWHERE NOT (leaf)-[:HAS_CHILD]->()\nWITH root, \n     max(length(path)) as max_depth,\n     count(DISTINCT leaf) as leaf_count,\n     avg(length(path)) as avg_depth\nRETURN root.llm_tag as taxonomy_tag,\n       max_depth,\n       leaf_count,\n       round(avg_depth, 2) as average_depth",
        "parent_child_relationships": "\n// Parent-child relationships for: productivity and organization\nMATCH (parent:MiniTaxonomyNode)-[:HAS_CHILD]->(child:MiniTaxonomyNode)\nWHERE parent.id = 'mini_taxonomy_root_Perplexity - Ask Anything_Perplexity - Ask Anything_llm_clusters_20250913_072623_d6afa9ba_55_c1cbd8be' OR \n      (parent)-[:HAS_CHILD*0..]-(:MiniTaxonomyNode {id: 'mini_taxonomy_root_Perplexity - Ask Anything_Perplexity - Ask Anything_llm_clusters_20250913_072623_d6afa9ba_55_c1cbd8be'})\nRETURN parent.id as parent_id,\n       parent.feature as parent_feature,\n       parent.is_leaf as parent_is_leaf,\n       child.id as child_id,\n       child.feature as child_feature,\n       child.is_leaf as child_is_leaf\nORDER BY parent.feature, child.feature"
      }
    },
    {
      "taxonomy_rank": 17,
      "root_id": "mini_taxonomy_root_ChatGPT_ChatGPT_llm_clusters_20250910_080720_6f1048b4_5_a37f2653",
      "tag": "image editing",
      "quality_score": 40.3,
      "queries": {
        "screenshot_tree": "\n// Screenshot-friendly tree for: image editing (Top 10 features only)\nMATCH (root:MiniTaxonomyNode {id: 'mini_taxonomy_root_ChatGPT_ChatGPT_llm_clusters_20250910_080720_6f1048b4_5_a37f2653'})\nWHERE NOT (()-[:HAS_CHILD]->(root))\nOPTIONAL MATCH path = (root)-[:HAS_CHILD*1..3]->(node:MiniTaxonomyNode)\nWITH root, node, path\nORDER BY length(path), node.feature\nWITH root, collect(DISTINCT {\n    feature: node.feature,\n    depth: length(path),\n    is_leaf: NOT (node)-[:HAS_CHILD]->()\n})[0..10] as sample_nodes\nRETURN root.llm_tag as taxonomy_name,\n       root.feature as root_feature,\n       sample_nodes",
        "sample_features": "\n// Sample features for screenshots: image editing (Max 8 features)\nMATCH (root:MiniTaxonomyNode {id: 'mini_taxonomy_root_ChatGPT_ChatGPT_llm_clusters_20250910_080720_6f1048b4_5_a37f2653'})\nWHERE NOT (()-[:HAS_CHILD]->(root))\nMATCH (root)-[:HAS_CHILD*]->(leaf:MiniTaxonomyNode)\nWHERE NOT (leaf)-[:HAS_CHILD]->() AND leaf.feature IS NOT NULL\nWITH root, collect(DISTINCT leaf.feature) as all_features\nRETURN root.llm_tag as taxonomy_name,\n       size(all_features) as total_features,\n       all_features[0..8] as sample_features",
        "compact_hierarchy": "\n// Compact hierarchy for: image editing (Screenshot ready)\nMATCH (root:MiniTaxonomyNode {id: 'mini_taxonomy_root_ChatGPT_ChatGPT_llm_clusters_20250910_080720_6f1048b4_5_a37f2653'})\nWHERE NOT (()-[:HAS_CHILD]->(root))\nOPTIONAL MATCH (root)-[:HAS_CHILD]->(level1:MiniTaxonomyNode)\nOPTIONAL MATCH (level1)-[:HAS_CHILD]->(level2:MiniTaxonomyNode)\nWHERE NOT (level2)-[:HAS_CHILD]->()\nWITH root, level1, collect(level2.feature)[0..3] as level2_sample\nRETURN root.llm_tag as root_tag,\n       level1.feature as level1_feature,\n       level2_sample\nORDER BY level1.feature\nLIMIT 5",
        "leaf_features": "\n// Top 10 leaf features for: image editing\nMATCH (root:MiniTaxonomyNode {id: 'mini_taxonomy_root_ChatGPT_ChatGPT_llm_clusters_20250910_080720_6f1048b4_5_a37f2653'})\nWHERE NOT (()-[:HAS_CHILD]->(root))\nMATCH (root)-[:HAS_CHILD*]->(leaf:MiniTaxonomyNode)\nWHERE NOT (leaf)-[:HAS_CHILD]->() AND leaf.feature IS NOT NULL\nRETURN root.llm_tag as taxonomy_tag,\n       collect(DISTINCT leaf.feature)[0..10] as top_features,\n       count(DISTINCT leaf) as total_leaf_count",
        "tree_depth": "\n// Tree depth and structure metrics for: image editing\nMATCH (root:MiniTaxonomyNode {id: 'mini_taxonomy_root_ChatGPT_ChatGPT_llm_clusters_20250910_080720_6f1048b4_5_a37f2653'})\nWHERE NOT (()-[:HAS_CHILD]->(root))\nOPTIONAL MATCH path = (root)-[:HAS_CHILD*]->(leaf)\nWHERE NOT (leaf)-[:HAS_CHILD]->()\nWITH root, \n     max(length(path)) as max_depth,\n     count(DISTINCT leaf) as leaf_count,\n     avg(length(path)) as avg_depth\nRETURN root.llm_tag as taxonomy_tag,\n       max_depth,\n       leaf_count,\n       round(avg_depth, 2) as average_depth",
        "parent_child_relationships": "\n// Parent-child relationships for: image editing\nMATCH (parent:MiniTaxonomyNode)-[:HAS_CHILD]->(child:MiniTaxonomyNode)\nWHERE parent.id = 'mini_taxonomy_root_ChatGPT_ChatGPT_llm_clusters_20250910_080720_6f1048b4_5_a37f2653' OR \n      (parent)-[:HAS_CHILD*0..]-(:MiniTaxonomyNode {id: 'mini_taxonomy_root_ChatGPT_ChatGPT_llm_clusters_20250910_080720_6f1048b4_5_a37f2653'})\nRETURN parent.id as parent_id,\n       parent.feature as parent_feature,\n       parent.is_leaf as parent_is_leaf,\n       child.id as child_id,\n       child.feature as child_feature,\n       child.is_leaf as child_is_leaf\nORDER BY parent.feature, child.feature"
      }
    },
    {
      "taxonomy_rank": 18,
      "root_id": "mini_taxonomy_root_Perplexity - Ask Anything_Perplexity - Ask Anything_llm_clusters_20250913_072115_481ae932_16_17172e79",
      "tag": "image generation",
      "quality_score": 40.0,
      "queries": {
        "screenshot_tree": "\n// Screenshot-friendly tree for: image generation (Top 10 features only)\nMATCH (root:MiniTaxonomyNode {id: 'mini_taxonomy_root_Perplexity - Ask Anything_Perplexity - Ask Anything_llm_clusters_20250913_072115_481ae932_16_17172e79'})\nWHERE NOT (()-[:HAS_CHILD]->(root))\nOPTIONAL MATCH path = (root)-[:HAS_CHILD*1..3]->(node:MiniTaxonomyNode)\nWITH root, node, path\nORDER BY length(path), node.feature\nWITH root, collect(DISTINCT {\n    feature: node.feature,\n    depth: length(path),\n    is_leaf: NOT (node)-[:HAS_CHILD]->()\n})[0..10] as sample_nodes\nRETURN root.llm_tag as taxonomy_name,\n       root.feature as root_feature,\n       sample_nodes",
        "sample_features": "\n// Sample features for screenshots: image generation (Max 8 features)\nMATCH (root:MiniTaxonomyNode {id: 'mini_taxonomy_root_Perplexity - Ask Anything_Perplexity - Ask Anything_llm_clusters_20250913_072115_481ae932_16_17172e79'})\nWHERE NOT (()-[:HAS_CHILD]->(root))\nMATCH (root)-[:HAS_CHILD*]->(leaf:MiniTaxonomyNode)\nWHERE NOT (leaf)-[:HAS_CHILD]->() AND leaf.feature IS NOT NULL\nWITH root, collect(DISTINCT leaf.feature) as all_features\nRETURN root.llm_tag as taxonomy_name,\n       size(all_features) as total_features,\n       all_features[0..8] as sample_features",
        "compact_hierarchy": "\n// Compact hierarchy for: image generation (Screenshot ready)\nMATCH (root:MiniTaxonomyNode {id: 'mini_taxonomy_root_Perplexity - Ask Anything_Perplexity - Ask Anything_llm_clusters_20250913_072115_481ae932_16_17172e79'})\nWHERE NOT (()-[:HAS_CHILD]->(root))\nOPTIONAL MATCH (root)-[:HAS_CHILD]->(level1:MiniTaxonomyNode)\nOPTIONAL MATCH (level1)-[:HAS_CHILD]->(level2:MiniTaxonomyNode)\nWHERE NOT (level2)-[:HAS_CHILD]->()\nWITH root, level1, collect(level2.feature)[0..3] as level2_sample\nRETURN root.llm_tag as root_tag,\n       level1.feature as level1_feature,\n       level2_sample\nORDER BY level1.feature\nLIMIT 5",
        "leaf_features": "\n// Top 10 leaf features for: image generation\nMATCH (root:MiniTaxonomyNode {id: 'mini_taxonomy_root_Perplexity - Ask Anything_Perplexity - Ask Anything_llm_clusters_20250913_072115_481ae932_16_17172e79'})\nWHERE NOT (()-[:HAS_CHILD]->(root))\nMATCH (root)-[:HAS_CHILD*]->(leaf:MiniTaxonomyNode)\nWHERE NOT (leaf)-[:HAS_CHILD]->() AND leaf.feature IS NOT NULL\nRETURN root.llm_tag as taxonomy_tag,\n       collect(DISTINCT leaf.feature)[0..10] as top_features,\n       count(DISTINCT leaf) as total_leaf_count",
        "tree_depth": "\n// Tree depth and structure metrics for: image generation\nMATCH (root:MiniTaxonomyNode {id: 'mini_taxonomy_root_Perplexity - Ask Anything_Perplexity - Ask Anything_llm_clusters_20250913_072115_481ae932_16_17172e79'})\nWHERE NOT (()-[:HAS_CHILD]->(root))\nOPTIONAL MATCH path = (root)-[:HAS_CHILD*]->(leaf)\nWHERE NOT (leaf)-[:HAS_CHILD]->()\nWITH root, \n     max(length(path)) as max_depth,\n     count(DISTINCT leaf) as leaf_count,\n     avg(length(path)) as avg_depth\nRETURN root.llm_tag as taxonomy_tag,\n       max_depth,\n       leaf_count,\n       round(avg_depth, 2) as average_depth",
        "parent_child_relationships": "\n// Parent-child relationships for: image generation\nMATCH (parent:MiniTaxonomyNode)-[:HAS_CHILD]->(child:MiniTaxonomyNode)\nWHERE parent.id = 'mini_taxonomy_root_Perplexity - Ask Anything_Perplexity - Ask Anything_llm_clusters_20250913_072115_481ae932_16_17172e79' OR \n      (parent)-[:HAS_CHILD*0..]-(:MiniTaxonomyNode {id: 'mini_taxonomy_root_Perplexity - Ask Anything_Perplexity - Ask Anything_llm_clusters_20250913_072115_481ae932_16_17172e79'})\nRETURN parent.id as parent_id,\n       parent.feature as parent_feature,\n       parent.is_leaf as parent_is_leaf,\n       child.id as child_id,\n       child.feature as child_feature,\n       child.is_leaf as child_is_leaf\nORDER BY parent.feature, child.feature"
      }
    },
    {
      "taxonomy_rank": 19,
      "root_id": "mini_taxonomy_root_DeepSeek - AI Assistant_DeepSeek - AI Assistant_llm_clusters_20250910_114925_1d7694a1_1_e5c1470e",
      "tag": "translation",
      "quality_score": 37.0,
      "queries": {
        "screenshot_tree": "\n// Screenshot-friendly tree for: translation (Top 10 features only)\nMATCH (root:MiniTaxonomyNode {id: 'mini_taxonomy_root_DeepSeek - AI Assistant_DeepSeek - AI Assistant_llm_clusters_20250910_114925_1d7694a1_1_e5c1470e'})\nWHERE NOT (()-[:HAS_CHILD]->(root))\nOPTIONAL MATCH path = (root)-[:HAS_CHILD*1..3]->(node:MiniTaxonomyNode)\nWITH root, node, path\nORDER BY length(path), node.feature\nWITH root, collect(DISTINCT {\n    feature: node.feature,\n    depth: length(path),\n    is_leaf: NOT (node)-[:HAS_CHILD]->()\n})[0..10] as sample_nodes\nRETURN root.llm_tag as taxonomy_name,\n       root.feature as root_feature,\n       sample_nodes",
        "sample_features": "\n// Sample features for screenshots: translation (Max 8 features)\nMATCH (root:MiniTaxonomyNode {id: 'mini_taxonomy_root_DeepSeek - AI Assistant_DeepSeek - AI Assistant_llm_clusters_20250910_114925_1d7694a1_1_e5c1470e'})\nWHERE NOT (()-[:HAS_CHILD]->(root))\nMATCH (root)-[:HAS_CHILD*]->(leaf:MiniTaxonomyNode)\nWHERE NOT (leaf)-[:HAS_CHILD]->() AND leaf.feature IS NOT NULL\nWITH root, collect(DISTINCT leaf.feature) as all_features\nRETURN root.llm_tag as taxonomy_name,\n       size(all_features) as total_features,\n       all_features[0..8] as sample_features",
        "compact_hierarchy": "\n// Compact hierarchy for: translation (Screenshot ready)\nMATCH (root:MiniTaxonomyNode {id: 'mini_taxonomy_root_DeepSeek - AI Assistant_DeepSeek - AI Assistant_llm_clusters_20250910_114925_1d7694a1_1_e5c1470e'})\nWHERE NOT (()-[:HAS_CHILD]->(root))\nOPTIONAL MATCH (root)-[:HAS_CHILD]->(level1:MiniTaxonomyNode)\nOPTIONAL MATCH (level1)-[:HAS_CHILD]->(level2:MiniTaxonomyNode)\nWHERE NOT (level2)-[:HAS_CHILD]->()\nWITH root, level1, collect(level2.feature)[0..3] as level2_sample\nRETURN root.llm_tag as root_tag,\n       level1.feature as level1_feature,\n       level2_sample\nORDER BY level1.feature\nLIMIT 5",
        "leaf_features": "\n// Top 10 leaf features for: translation\nMATCH (root:MiniTaxonomyNode {id: 'mini_taxonomy_root_DeepSeek - AI Assistant_DeepSeek - AI Assistant_llm_clusters_20250910_114925_1d7694a1_1_e5c1470e'})\nWHERE NOT (()-[:HAS_CHILD]->(root))\nMATCH (root)-[:HAS_CHILD*]->(leaf:MiniTaxonomyNode)\nWHERE NOT (leaf)-[:HAS_CHILD]->() AND leaf.feature IS NOT NULL\nRETURN root.llm_tag as taxonomy_tag,\n       collect(DISTINCT leaf.feature)[0..10] as top_features,\n       count(DISTINCT leaf) as total_leaf_count",
        "tree_depth": "\n// Tree depth and structure metrics for: translation\nMATCH (root:MiniTaxonomyNode {id: 'mini_taxonomy_root_DeepSeek - AI Assistant_DeepSeek - AI Assistant_llm_clusters_20250910_114925_1d7694a1_1_e5c1470e'})\nWHERE NOT (()-[:HAS_CHILD]->(root))\nOPTIONAL MATCH path = (root)-[:HAS_CHILD*]->(leaf)\nWHERE NOT (leaf)-[:HAS_CHILD]->()\nWITH root, \n     max(length(path)) as max_depth,\n     count(DISTINCT leaf) as leaf_count,\n     avg(length(path)) as avg_depth\nRETURN root.llm_tag as taxonomy_tag,\n       max_depth,\n       leaf_count,\n       round(avg_depth, 2) as average_depth",
        "parent_child_relationships": "\n// Parent-child relationships for: translation\nMATCH (parent:MiniTaxonomyNode)-[:HAS_CHILD]->(child:MiniTaxonomyNode)\nWHERE parent.id = 'mini_taxonomy_root_DeepSeek - AI Assistant_DeepSeek - AI Assistant_llm_clusters_20250910_114925_1d7694a1_1_e5c1470e' OR \n      (parent)-[:HAS_CHILD*0..]-(:MiniTaxonomyNode {id: 'mini_taxonomy_root_DeepSeek - AI Assistant_DeepSeek - AI Assistant_llm_clusters_20250910_114925_1d7694a1_1_e5c1470e'})\nRETURN parent.id as parent_id,\n       parent.feature as parent_feature,\n       parent.is_leaf as parent_is_leaf,\n       child.id as child_id,\n       child.feature as child_feature,\n       child.is_leaf as child_is_leaf\nORDER BY parent.feature, child.feature"
      }
    },
    {
      "taxonomy_rank": 20,
      "root_id": "mini_taxonomy_root_ChatGPT_ChatGPT_llm_clusters_20250910_080741_a1a69ff1_9_2a676c55",
      "tag": "assistance",
      "quality_score": 36.6,
      "queries": {
        "screenshot_tree": "\n// Screenshot-friendly tree for: assistance (Top 10 features only)\nMATCH (root:MiniTaxonomyNode {id: 'mini_taxonomy_root_ChatGPT_ChatGPT_llm_clusters_20250910_080741_a1a69ff1_9_2a676c55'})\nWHERE NOT (()-[:HAS_CHILD]->(root))\nOPTIONAL MATCH path = (root)-[:HAS_CHILD*1..3]->(node:MiniTaxonomyNode)\nWITH root, node, path\nORDER BY length(path), node.feature\nWITH root, collect(DISTINCT {\n    feature: node.feature,\n    depth: length(path),\n    is_leaf: NOT (node)-[:HAS_CHILD]->()\n})[0..10] as sample_nodes\nRETURN root.llm_tag as taxonomy_name,\n       root.feature as root_feature,\n       sample_nodes",
        "sample_features": "\n// Sample features for screenshots: assistance (Max 8 features)\nMATCH (root:MiniTaxonomyNode {id: 'mini_taxonomy_root_ChatGPT_ChatGPT_llm_clusters_20250910_080741_a1a69ff1_9_2a676c55'})\nWHERE NOT (()-[:HAS_CHILD]->(root))\nMATCH (root)-[:HAS_CHILD*]->(leaf:MiniTaxonomyNode)\nWHERE NOT (leaf)-[:HAS_CHILD]->() AND leaf.feature IS NOT NULL\nWITH root, collect(DISTINCT leaf.feature) as all_features\nRETURN root.llm_tag as taxonomy_name,\n       size(all_features) as total_features,\n       all_features[0..8] as sample_features",
        "compact_hierarchy": "\n// Compact hierarchy for: assistance (Screenshot ready)\nMATCH (root:MiniTaxonomyNode {id: 'mini_taxonomy_root_ChatGPT_ChatGPT_llm_clusters_20250910_080741_a1a69ff1_9_2a676c55'})\nWHERE NOT (()-[:HAS_CHILD]->(root))\nOPTIONAL MATCH (root)-[:HAS_CHILD]->(level1:MiniTaxonomyNode)\nOPTIONAL MATCH (level1)-[:HAS_CHILD]->(level2:MiniTaxonomyNode)\nWHERE NOT (level2)-[:HAS_CHILD]->()\nWITH root, level1, collect(level2.feature)[0..3] as level2_sample\nRETURN root.llm_tag as root_tag,\n       level1.feature as level1_feature,\n       level2_sample\nORDER BY level1.feature\nLIMIT 5",
        "leaf_features": "\n// Top 10 leaf features for: assistance\nMATCH (root:MiniTaxonomyNode {id: 'mini_taxonomy_root_ChatGPT_ChatGPT_llm_clusters_20250910_080741_a1a69ff1_9_2a676c55'})\nWHERE NOT (()-[:HAS_CHILD]->(root))\nMATCH (root)-[:HAS_CHILD*]->(leaf:MiniTaxonomyNode)\nWHERE NOT (leaf)-[:HAS_CHILD]->() AND leaf.feature IS NOT NULL\nRETURN root.llm_tag as taxonomy_tag,\n       collect(DISTINCT leaf.feature)[0..10] as top_features,\n       count(DISTINCT leaf) as total_leaf_count",
        "tree_depth": "\n// Tree depth and structure metrics for: assistance\nMATCH (root:MiniTaxonomyNode {id: 'mini_taxonomy_root_ChatGPT_ChatGPT_llm_clusters_20250910_080741_a1a69ff1_9_2a676c55'})\nWHERE NOT (()-[:HAS_CHILD]->(root))\nOPTIONAL MATCH path = (root)-[:HAS_CHILD*]->(leaf)\nWHERE NOT (leaf)-[:HAS_CHILD]->()\nWITH root, \n     max(length(path)) as max_depth,\n     count(DISTINCT leaf) as leaf_count,\n     avg(length(path)) as avg_depth\nRETURN root.llm_tag as taxonomy_tag,\n       max_depth,\n       leaf_count,\n       round(avg_depth, 2) as average_depth",
        "parent_child_relationships": "\n// Parent-child relationships for: assistance\nMATCH (parent:MiniTaxonomyNode)-[:HAS_CHILD]->(child:MiniTaxonomyNode)\nWHERE parent.id = 'mini_taxonomy_root_ChatGPT_ChatGPT_llm_clusters_20250910_080741_a1a69ff1_9_2a676c55' OR \n      (parent)-[:HAS_CHILD*0..]-(:MiniTaxonomyNode {id: 'mini_taxonomy_root_ChatGPT_ChatGPT_llm_clusters_20250910_080741_a1a69ff1_9_2a676c55'})\nRETURN parent.id as parent_id,\n       parent.feature as parent_feature,\n       parent.is_leaf as parent_is_leaf,\n       child.id as child_id,\n       child.feature as child_feature,\n       child.is_leaf as child_is_leaf\nORDER BY parent.feature, child.feature"
      }
    }
  ],
  "batch_queries": {
    "all_selected_taxonomies": "\n// All selected taxonomies overview\nMATCH (root:MiniTaxonomyNode)\nWHERE root.id IN ['mini_taxonomy_root_ChatGPT_ChatGPT_llm_clusters_20250910_201138_66eec707_2_2b3aa0a9', 'mini_taxonomy_root_Claude by Anthropic_Claude by Anthropic_llm_clusters_20250910_113541_869f247f_0_1770d541', 'mini_taxonomy_root_ChatGPT_ChatGPT_llm_clusters_20250910_082253_e6995ce8_4_a4b72909', 'mini_taxonomy_root_Google Gemini_Google Gemini_llm_clusters_20250912_020749_ecf39b6e_37_01c3d1c3', 'mini_taxonomy_root_Microsoft Copilot_Microsoft Copilot_llm_clusters_20250912_223025_37325bf6_39_69c74ffd', 'mini_taxonomy_root_Google Gemini_Google Gemini_llm_clusters_20250912_023901_a71aa325_23_a78ea684', 'mini_taxonomy_root_Microsoft Copilot_Microsoft Copilot_llm_clusters_20250912_223928_6edadcdb_19_2c16fa89', 'mini_taxonomy_root_ChatGPT_ChatGPT_llm_clusters_20250910_082155_c4ba5aa6_17_dbcac723', 'mini_taxonomy_root_ChatGPT_ChatGPT_llm_clusters_20250910_083141_b1b6b350_0_636310ca', 'mini_taxonomy_root_ChatGPT_ChatGPT_llm_clusters_20250910_082050_d634221b_174_9f47e36b', 'mini_taxonomy_root_ChatGPT_ChatGPT_llm_clusters_20250910_204708_70fa85d0_19_3c8fef39', 'mini_taxonomy_root_Google Gemini_Google Gemini_llm_clusters_20250912_020749_ecf39b6e_25_8c9eba83', 'mini_taxonomy_root_ChatGPT_ChatGPT_llm_clusters_20250910_194105_caca669e_9_c8e636e6', 'mini_taxonomy_root_Google Gemini_Google Gemini_llm_clusters_20250912_020311_2f8b14f4_3_8964bb42', 'mini_taxonomy_root_ChatGPT_ChatGPT_llm_clusters_20250910_080717_f2c7aed2_2_f03866f7', 'mini_taxonomy_root_Perplexity - Ask Anything_Perplexity - Ask Anything_llm_clusters_20250913_072623_d6afa9ba_55_c1cbd8be', 'mini_taxonomy_root_ChatGPT_ChatGPT_llm_clusters_20250910_080720_6f1048b4_5_a37f2653', 'mini_taxonomy_root_Perplexity - Ask Anything_Perplexity - Ask Anything_llm_clusters_20250913_072115_481ae932_16_17172e79', 'mini_taxonomy_root_DeepSeek - AI Assistant_DeepSeek - AI Assistant_llm_clusters_20250910_114925_1d7694a1_1_e5c1470e', 'mini_taxonomy_root_ChatGPT_ChatGPT_llm_clusters_20250910_080741_a1a69ff1_9_2a676c55'] AND NOT (()-[:HAS_CHILD]->(root))\nOPTIONAL MATCH (root)-[:HAS_CHILD*]->(leaf:MiniTaxonomyNode)\nWHERE NOT (leaf)-[:HAS_CHILD]->()\nWITH root,\n     count(DISTINCT leaf) as leaf_count,\n     collect(DISTINCT leaf.feature) as leaf_features\nOPTIONAL MATCH path = (root)-[:HAS_CHILD*]->(descendant)\nWITH root, leaf_count, leaf_features,\n     max(length(path)) as max_depth\nRETURN root.id as root_id,\n       root.llm_tag as tag,\n       root.session_id as session_id,\n       max_depth as depth,\n       leaf_count as leaves,\n       leaf_features\nORDER BY root.llm_tag",
    "feature_overlap_analysis": "\n// Feature overlap analysis between selected taxonomies\nMATCH (root1:MiniTaxonomyNode)-[:HAS_CHILD*]->(leaf1:MiniTaxonomyNode)\nWHERE root1.id IN ['mini_taxonomy_root_ChatGPT_ChatGPT_llm_clusters_20250910_201138_66eec707_2_2b3aa0a9', 'mini_taxonomy_root_Claude by Anthropic_Claude by Anthropic_llm_clusters_20250910_113541_869f247f_0_1770d541', 'mini_taxonomy_root_ChatGPT_ChatGPT_llm_clusters_20250910_082253_e6995ce8_4_a4b72909', 'mini_taxonomy_root_Google Gemini_Google Gemini_llm_clusters_20250912_020749_ecf39b6e_37_01c3d1c3', 'mini_taxonomy_root_Microsoft Copilot_Microsoft Copilot_llm_clusters_20250912_223025_37325bf6_39_69c74ffd', 'mini_taxonomy_root_Google Gemini_Google Gemini_llm_clusters_20250912_023901_a71aa325_23_a78ea684', 'mini_taxonomy_root_Microsoft Copilot_Microsoft Copilot_llm_clusters_20250912_223928_6edadcdb_19_2c16fa89', 'mini_taxonomy_root_ChatGPT_ChatGPT_llm_clusters_20250910_082155_c4ba5aa6_17_dbcac723', 'mini_taxonomy_root_ChatGPT_ChatGPT_llm_clusters_20250910_083141_b1b6b350_0_636310ca', 'mini_taxonomy_root_ChatGPT_ChatGPT_llm_clusters_20250910_082050_d634221b_174_9f47e36b', 'mini_taxonomy_root_ChatGPT_ChatGPT_llm_clusters_20250910_204708_70fa85d0_19_3c8fef39', 'mini_taxonomy_root_Google Gemini_Google Gemini_llm_clusters_20250912_020749_ecf39b6e_25_8c9eba83', 'mini_taxonomy_root_ChatGPT_ChatGPT_llm_clusters_20250910_194105_caca669e_9_c8e636e6', 'mini_taxonomy_root_Google Gemini_Google Gemini_llm_clusters_20250912_020311_2f8b14f4_3_8964bb42', 'mini_taxonomy_root_ChatGPT_ChatGPT_llm_clusters_20250910_080717_f2c7aed2_2_f03866f7', 'mini_taxonomy_root_Perplexity - Ask Anything_Perplexity - Ask Anything_llm_clusters_20250913_072623_d6afa9ba_55_c1cbd8be', 'mini_taxonomy_root_ChatGPT_ChatGPT_llm_clusters_20250910_080720_6f1048b4_5_a37f2653', 'mini_taxonomy_root_Perplexity - Ask Anything_Perplexity - Ask Anything_llm_clusters_20250913_072115_481ae932_16_17172e79', 'mini_taxonomy_root_DeepSeek - AI Assistant_DeepSeek - AI Assistant_llm_clusters_20250910_114925_1d7694a1_1_e5c1470e', 'mini_taxonomy_root_ChatGPT_ChatGPT_llm_clusters_20250910_080741_a1a69ff1_9_2a676c55'] AND NOT (()-[:HAS_CHILD]->(root1)) AND NOT (leaf1)-[:HAS_CHILD]->()\nMATCH (root2:MiniTaxonomyNode)-[:HAS_CHILD*]->(leaf2:MiniTaxonomyNode)\nWHERE root2.id IN ['mini_taxonomy_root_ChatGPT_ChatGPT_llm_clusters_20250910_201138_66eec707_2_2b3aa0a9', 'mini_taxonomy_root_Claude by Anthropic_Claude by Anthropic_llm_clusters_20250910_113541_869f247f_0_1770d541', 'mini_taxonomy_root_ChatGPT_ChatGPT_llm_clusters_20250910_082253_e6995ce8_4_a4b72909', 'mini_taxonomy_root_Google Gemini_Google Gemini_llm_clusters_20250912_020749_ecf39b6e_37_01c3d1c3', 'mini_taxonomy_root_Microsoft Copilot_Microsoft Copilot_llm_clusters_20250912_223025_37325bf6_39_69c74ffd', 'mini_taxonomy_root_Google Gemini_Google Gemini_llm_clusters_20250912_023901_a71aa325_23_a78ea684', 'mini_taxonomy_root_Microsoft Copilot_Microsoft Copilot_llm_clusters_20250912_223928_6edadcdb_19_2c16fa89', 'mini_taxonomy_root_ChatGPT_ChatGPT_llm_clusters_20250910_082155_c4ba5aa6_17_dbcac723', 'mini_taxonomy_root_ChatGPT_ChatGPT_llm_clusters_20250910_083141_b1b6b350_0_636310ca', 'mini_taxonomy_root_ChatGPT_ChatGPT_llm_clusters_20250910_082050_d634221b_174_9f47e36b', 'mini_taxonomy_root_ChatGPT_ChatGPT_llm_clusters_20250910_204708_70fa85d0_19_3c8fef39', 'mini_taxonomy_root_Google Gemini_Google Gemini_llm_clusters_20250912_020749_ecf39b6e_25_8c9eba83', 'mini_taxonomy_root_ChatGPT_ChatGPT_llm_clusters_20250910_194105_caca669e_9_c8e636e6', 'mini_taxonomy_root_Google Gemini_Google Gemini_llm_clusters_20250912_020311_2f8b14f4_3_8964bb42', 'mini_taxonomy_root_ChatGPT_ChatGPT_llm_clusters_20250910_080717_f2c7aed2_2_f03866f7', 'mini_taxonomy_root_Perplexity - Ask Anything_Perplexity - Ask Anything_llm_clusters_20250913_072623_d6afa9ba_55_c1cbd8be', 'mini_taxonomy_root_ChatGPT_ChatGPT_llm_clusters_20250910_080720_6f1048b4_5_a37f2653', 'mini_taxonomy_root_Perplexity - Ask Anything_Perplexity - Ask Anything_llm_clusters_20250913_072115_481ae932_16_17172e79', 'mini_taxonomy_root_DeepSeek - AI Assistant_DeepSeek - AI Assistant_llm_clusters_20250910_114925_1d7694a1_1_e5c1470e', 'mini_taxonomy_root_ChatGPT_ChatGPT_llm_clusters_20250910_080741_a1a69ff1_9_2a676c55'] AND NOT (()-[:HAS_CHILD]->(root2)) AND NOT (leaf2)-[:HAS_CHILD]->()\n      AND root1.id < root2.id AND leaf1.feature = leaf2.feature\nRETURN root1.llm_tag as taxonomy1,\n       root2.llm_tag as taxonomy2,\n       collect(DISTINCT leaf1.feature) as shared_features,\n       count(DISTINCT leaf1.feature) as overlap_count\nORDER BY overlap_count DESC",
    "session_analysis": "\n// Session analysis for selected taxonomies\nMATCH (root:MiniTaxonomyNode)\nWHERE root.id IN ['mini_taxonomy_root_ChatGPT_ChatGPT_llm_clusters_20250910_201138_66eec707_2_2b3aa0a9', 'mini_taxonomy_root_Claude by Anthropic_Claude by Anthropic_llm_clusters_20250910_113541_869f247f_0_1770d541', 'mini_taxonomy_root_ChatGPT_ChatGPT_llm_clusters_20250910_082253_e6995ce8_4_a4b72909', 'mini_taxonomy_root_Google Gemini_Google Gemini_llm_clusters_20250912_020749_ecf39b6e_37_01c3d1c3', 'mini_taxonomy_root_Microsoft Copilot_Microsoft Copilot_llm_clusters_20250912_223025_37325bf6_39_69c74ffd', 'mini_taxonomy_root_Google Gemini_Google Gemini_llm_clusters_20250912_023901_a71aa325_23_a78ea684', 'mini_taxonomy_root_Microsoft Copilot_Microsoft Copilot_llm_clusters_20250912_223928_6edadcdb_19_2c16fa89', 'mini_taxonomy_root_ChatGPT_ChatGPT_llm_clusters_20250910_082155_c4ba5aa6_17_dbcac723', 'mini_taxonomy_root_ChatGPT_ChatGPT_llm_clusters_20250910_083141_b1b6b350_0_636310ca', 'mini_taxonomy_root_ChatGPT_ChatGPT_llm_clusters_20250910_082050_d634221b_174_9f47e36b', 'mini_taxonomy_root_ChatGPT_ChatGPT_llm_clusters_20250910_204708_70fa85d0_19_3c8fef39', 'mini_taxonomy_root_Google Gemini_Google Gemini_llm_clusters_20250912_020749_ecf39b6e_25_8c9eba83', 'mini_taxonomy_root_ChatGPT_ChatGPT_llm_clusters_20250910_194105_caca669e_9_c8e636e6', 'mini_taxonomy_root_Google Gemini_Google Gemini_llm_clusters_20250912_020311_2f8b14f4_3_8964bb42', 'mini_taxonomy_root_ChatGPT_ChatGPT_llm_clusters_20250910_080717_f2c7aed2_2_f03866f7', 'mini_taxonomy_root_Perplexity - Ask Anything_Perplexity - Ask Anything_llm_clusters_20250913_072623_d6afa9ba_55_c1cbd8be', 'mini_taxonomy_root_ChatGPT_ChatGPT_llm_clusters_20250910_080720_6f1048b4_5_a37f2653', 'mini_taxonomy_root_Perplexity - Ask Anything_Perplexity - Ask Anything_llm_clusters_20250913_072115_481ae932_16_17172e79', 'mini_taxonomy_root_DeepSeek - AI Assistant_DeepSeek - AI Assistant_llm_clusters_20250910_114925_1d7694a1_1_e5c1470e', 'mini_taxonomy_root_ChatGPT_ChatGPT_llm_clusters_20250910_080741_a1a69ff1_9_2a676c55'] AND NOT (()-[:HAS_CHILD]->(root))\nWITH root.session_id as session_id, collect(root.llm_tag) as taxonomy_tags, count(*) as count\nRETURN session_id,\n       count as taxonomies_in_session,\n       taxonomy_tags\nORDER BY count DESC",
    "comparative_metrics": "\n// Comparative metrics for selected taxonomies\nMATCH (root:MiniTaxonomyNode)\nWHERE root.id IN ['mini_taxonomy_root_ChatGPT_ChatGPT_llm_clusters_20250910_201138_66eec707_2_2b3aa0a9', 'mini_taxonomy_root_Claude by Anthropic_Claude by Anthropic_llm_clusters_20250910_113541_869f247f_0_1770d541', 'mini_taxonomy_root_ChatGPT_ChatGPT_llm_clusters_20250910_082253_e6995ce8_4_a4b72909', 'mini_taxonomy_root_Google Gemini_Google Gemini_llm_clusters_20250912_020749_ecf39b6e_37_01c3d1c3', 'mini_taxonomy_root_Microsoft Copilot_Microsoft Copilot_llm_clusters_20250912_223025_37325bf6_39_69c74ffd', 'mini_taxonomy_root_Google Gemini_Google Gemini_llm_clusters_20250912_023901_a71aa325_23_a78ea684', 'mini_taxonomy_root_Microsoft Copilot_Microsoft Copilot_llm_clusters_20250912_223928_6edadcdb_19_2c16fa89', 'mini_taxonomy_root_ChatGPT_ChatGPT_llm_clusters_20250910_082155_c4ba5aa6_17_dbcac723', 'mini_taxonomy_root_ChatGPT_ChatGPT_llm_clusters_20250910_083141_b1b6b350_0_636310ca', 'mini_taxonomy_root_ChatGPT_ChatGPT_llm_clusters_20250910_082050_d634221b_174_9f47e36b', 'mini_taxonomy_root_ChatGPT_ChatGPT_llm_clusters_20250910_204708_70fa85d0_19_3c8fef39', 'mini_taxonomy_root_Google Gemini_Google Gemini_llm_clusters_20250912_020749_ecf39b6e_25_8c9eba83', 'mini_taxonomy_root_ChatGPT_ChatGPT_llm_clusters_20250910_194105_caca669e_9_c8e636e6', 'mini_taxonomy_root_Google Gemini_Google Gemini_llm_clusters_20250912_020311_2f8b14f4_3_8964bb42', 'mini_taxonomy_root_ChatGPT_ChatGPT_llm_clusters_20250910_080717_f2c7aed2_2_f03866f7', 'mini_taxonomy_root_Perplexity - Ask Anything_Perplexity - Ask Anything_llm_clusters_20250913_072623_d6afa9ba_55_c1cbd8be', 'mini_taxonomy_root_ChatGPT_ChatGPT_llm_clusters_20250910_080720_6f1048b4_5_a37f2653', 'mini_taxonomy_root_Perplexity - Ask Anything_Perplexity - Ask Anything_llm_clusters_20250913_072115_481ae932_16_17172e79', 'mini_taxonomy_root_DeepSeek - AI Assistant_DeepSeek - AI Assistant_llm_clusters_20250910_114925_1d7694a1_1_e5c1470e', 'mini_taxonomy_root_ChatGPT_ChatGPT_llm_clusters_20250910_080741_a1a69ff1_9_2a676c55'] AND NOT (()-[:HAS_CHILD]->(root))\nOPTIONAL MATCH (root)-[:HAS_CHILD*]->(leaf:MiniTaxonomyNode)\nWHERE NOT (leaf)-[:HAS_CHILD]->()\nWITH root, count(DISTINCT leaf) as leaf_count\nOPTIONAL MATCH path = (root)-[:HAS_CHILD*]->(descendant)\nWITH root, leaf_count, max(length(path)) as max_depth\nRETURN root.llm_tag as taxonomy_tag,\n       root.id as root_id,\n       leaf_count,\n       max_depth,\n       CASE \n         WHEN leaf_count = 0 THEN 'Empty'\n         WHEN leaf_count <= 5 THEN 'Small' \n         WHEN leaf_count <= 20 THEN 'Medium'\n         WHEN leaf_count <= 50 THEN 'Large'\n         ELSE 'Very Large'\n       END as size_category,\n       CASE\n         WHEN max_depth <= 2 THEN 'Shallow'\n         WHEN max_depth <= 5 THEN 'Medium'\n         WHEN max_depth <= 8 THEN 'Deep'\n         ELSE 'Very Deep'\n       END as depth_category\nORDER BY leaf_count DESC, max_depth DESC"
  }
}