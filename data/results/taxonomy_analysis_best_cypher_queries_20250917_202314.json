{
  "metadata": {
    "generated_at": "2025-09-17T20:23:14.970711",
    "query_type": "best_taxonomies",
    "taxonomy_count": 20
  },
  "individual_queries": [
    {
      "taxonomy_rank": 1,
      "root_id": "mini_taxonomy_root_Claude by Anthropic_Claude by Anthropic_llm_clusters_20250910_112014_7229c851_0_eebb1846",
      "tag": "productivity and organization",
      "quality_score": 196.4,
      "queries": {
        "screenshot_tree": "\n// Screenshot-friendly tree for: productivity and organization (Top 10 features only)\nMATCH (root:MiniTaxonomyNode {id: 'mini_taxonomy_root_Claude by Anthropic_Claude by Anthropic_llm_clusters_20250910_112014_7229c851_0_eebb1846'})\nWHERE NOT (()-[:HAS_CHILD]->(root))\nOPTIONAL MATCH path = (root)-[:HAS_CHILD*1..3]->(node:MiniTaxonomyNode)\nWITH root, node, path\nORDER BY length(path), node.feature\nWITH root, collect(DISTINCT {\n    feature: node.feature,\n    depth: length(path),\n    is_leaf: NOT (node)-[:HAS_CHILD]->()\n})[0..10] as sample_nodes\nRETURN root.llm_tag as taxonomy_name,\n       root.feature as root_feature,\n       sample_nodes",
        "sample_features": "\n// Sample features for screenshots: productivity and organization (Max 8 features)\nMATCH (root:MiniTaxonomyNode {id: 'mini_taxonomy_root_Claude by Anthropic_Claude by Anthropic_llm_clusters_20250910_112014_7229c851_0_eebb1846'})\nWHERE NOT (()-[:HAS_CHILD]->(root))\nMATCH (root)-[:HAS_CHILD*]->(leaf:MiniTaxonomyNode)\nWHERE NOT (leaf)-[:HAS_CHILD]->() AND leaf.feature IS NOT NULL\nWITH root, collect(DISTINCT leaf.feature) as all_features\nRETURN root.llm_tag as taxonomy_name,\n       size(all_features) as total_features,\n       all_features[0..8] as sample_features",
        "compact_hierarchy": "\n// Compact hierarchy for: productivity and organization (Screenshot ready)\nMATCH (root:MiniTaxonomyNode {id: 'mini_taxonomy_root_Claude by Anthropic_Claude by Anthropic_llm_clusters_20250910_112014_7229c851_0_eebb1846'})\nWHERE NOT (()-[:HAS_CHILD]->(root))\nOPTIONAL MATCH (root)-[:HAS_CHILD]->(level1:MiniTaxonomyNode)\nOPTIONAL MATCH (level1)-[:HAS_CHILD]->(level2:MiniTaxonomyNode)\nWHERE NOT (level2)-[:HAS_CHILD]->()\nWITH root, level1, collect(level2.feature)[0..3] as level2_sample\nRETURN root.llm_tag as root_tag,\n       level1.feature as level1_feature,\n       level2_sample\nORDER BY level1.feature\nLIMIT 5",
        "leaf_features": "\n// Top 10 leaf features for: productivity and organization\nMATCH (root:MiniTaxonomyNode {id: 'mini_taxonomy_root_Claude by Anthropic_Claude by Anthropic_llm_clusters_20250910_112014_7229c851_0_eebb1846'})\nWHERE NOT (()-[:HAS_CHILD]->(root))\nMATCH (root)-[:HAS_CHILD*]->(leaf:MiniTaxonomyNode)\nWHERE NOT (leaf)-[:HAS_CHILD]->() AND leaf.feature IS NOT NULL\nRETURN root.llm_tag as taxonomy_tag,\n       collect(DISTINCT leaf.feature)[0..10] as top_features,\n       count(DISTINCT leaf) as total_leaf_count",
        "tree_depth": "\n// Tree depth and structure metrics for: productivity and organization\nMATCH (root:MiniTaxonomyNode {id: 'mini_taxonomy_root_Claude by Anthropic_Claude by Anthropic_llm_clusters_20250910_112014_7229c851_0_eebb1846'})\nWHERE NOT (()-[:HAS_CHILD]->(root))\nOPTIONAL MATCH path = (root)-[:HAS_CHILD*]->(leaf)\nWHERE NOT (leaf)-[:HAS_CHILD]->()\nWITH root, \n     max(length(path)) as max_depth,\n     count(DISTINCT leaf) as leaf_count,\n     avg(length(path)) as avg_depth\nRETURN root.llm_tag as taxonomy_tag,\n       max_depth,\n       leaf_count,\n       round(avg_depth, 2) as average_depth",
        "parent_child_relationships": "\n// Parent-child relationships for: productivity and organization\nMATCH (parent:MiniTaxonomyNode)-[:HAS_CHILD]->(child:MiniTaxonomyNode)\nWHERE parent.id = 'mini_taxonomy_root_Claude by Anthropic_Claude by Anthropic_llm_clusters_20250910_112014_7229c851_0_eebb1846' OR \n      (parent)-[:HAS_CHILD*0..]-(:MiniTaxonomyNode {id: 'mini_taxonomy_root_Claude by Anthropic_Claude by Anthropic_llm_clusters_20250910_112014_7229c851_0_eebb1846'})\nRETURN parent.id as parent_id,\n       parent.feature as parent_feature,\n       parent.is_leaf as parent_is_leaf,\n       child.id as child_id,\n       child.feature as child_feature,\n       child.is_leaf as child_is_leaf\nORDER BY parent.feature, child.feature"
      }
    },
    {
      "taxonomy_rank": 2,
      "root_id": "mini_taxonomy_root_Le Chat by Mistral AI_Le Chat by Mistral AI_llm_clusters_20250912_220709_cf0221ab_0_19d1b8db",
      "tag": "human assistance",
      "quality_score": 167.0,
      "queries": {
        "screenshot_tree": "\n// Screenshot-friendly tree for: human assistance (Top 10 features only)\nMATCH (root:MiniTaxonomyNode {id: 'mini_taxonomy_root_Le Chat by Mistral AI_Le Chat by Mistral AI_llm_clusters_20250912_220709_cf0221ab_0_19d1b8db'})\nWHERE NOT (()-[:HAS_CHILD]->(root))\nOPTIONAL MATCH path = (root)-[:HAS_CHILD*1..3]->(node:MiniTaxonomyNode)\nWITH root, node, path\nORDER BY length(path), node.feature\nWITH root, collect(DISTINCT {\n    feature: node.feature,\n    depth: length(path),\n    is_leaf: NOT (node)-[:HAS_CHILD]->()\n})[0..10] as sample_nodes\nRETURN root.llm_tag as taxonomy_name,\n       root.feature as root_feature,\n       sample_nodes",
        "sample_features": "\n// Sample features for screenshots: human assistance (Max 8 features)\nMATCH (root:MiniTaxonomyNode {id: 'mini_taxonomy_root_Le Chat by Mistral AI_Le Chat by Mistral AI_llm_clusters_20250912_220709_cf0221ab_0_19d1b8db'})\nWHERE NOT (()-[:HAS_CHILD]->(root))\nMATCH (root)-[:HAS_CHILD*]->(leaf:MiniTaxonomyNode)\nWHERE NOT (leaf)-[:HAS_CHILD]->() AND leaf.feature IS NOT NULL\nWITH root, collect(DISTINCT leaf.feature) as all_features\nRETURN root.llm_tag as taxonomy_name,\n       size(all_features) as total_features,\n       all_features[0..8] as sample_features",
        "compact_hierarchy": "\n// Compact hierarchy for: human assistance (Screenshot ready)\nMATCH (root:MiniTaxonomyNode {id: 'mini_taxonomy_root_Le Chat by Mistral AI_Le Chat by Mistral AI_llm_clusters_20250912_220709_cf0221ab_0_19d1b8db'})\nWHERE NOT (()-[:HAS_CHILD]->(root))\nOPTIONAL MATCH (root)-[:HAS_CHILD]->(level1:MiniTaxonomyNode)\nOPTIONAL MATCH (level1)-[:HAS_CHILD]->(level2:MiniTaxonomyNode)\nWHERE NOT (level2)-[:HAS_CHILD]->()\nWITH root, level1, collect(level2.feature)[0..3] as level2_sample\nRETURN root.llm_tag as root_tag,\n       level1.feature as level1_feature,\n       level2_sample\nORDER BY level1.feature\nLIMIT 5",
        "leaf_features": "\n// Top 10 leaf features for: human assistance\nMATCH (root:MiniTaxonomyNode {id: 'mini_taxonomy_root_Le Chat by Mistral AI_Le Chat by Mistral AI_llm_clusters_20250912_220709_cf0221ab_0_19d1b8db'})\nWHERE NOT (()-[:HAS_CHILD]->(root))\nMATCH (root)-[:HAS_CHILD*]->(leaf:MiniTaxonomyNode)\nWHERE NOT (leaf)-[:HAS_CHILD]->() AND leaf.feature IS NOT NULL\nRETURN root.llm_tag as taxonomy_tag,\n       collect(DISTINCT leaf.feature)[0..10] as top_features,\n       count(DISTINCT leaf) as total_leaf_count",
        "tree_depth": "\n// Tree depth and structure metrics for: human assistance\nMATCH (root:MiniTaxonomyNode {id: 'mini_taxonomy_root_Le Chat by Mistral AI_Le Chat by Mistral AI_llm_clusters_20250912_220709_cf0221ab_0_19d1b8db'})\nWHERE NOT (()-[:HAS_CHILD]->(root))\nOPTIONAL MATCH path = (root)-[:HAS_CHILD*]->(leaf)\nWHERE NOT (leaf)-[:HAS_CHILD]->()\nWITH root, \n     max(length(path)) as max_depth,\n     count(DISTINCT leaf) as leaf_count,\n     avg(length(path)) as avg_depth\nRETURN root.llm_tag as taxonomy_tag,\n       max_depth,\n       leaf_count,\n       round(avg_depth, 2) as average_depth",
        "parent_child_relationships": "\n// Parent-child relationships for: human assistance\nMATCH (parent:MiniTaxonomyNode)-[:HAS_CHILD]->(child:MiniTaxonomyNode)\nWHERE parent.id = 'mini_taxonomy_root_Le Chat by Mistral AI_Le Chat by Mistral AI_llm_clusters_20250912_220709_cf0221ab_0_19d1b8db' OR \n      (parent)-[:HAS_CHILD*0..]-(:MiniTaxonomyNode {id: 'mini_taxonomy_root_Le Chat by Mistral AI_Le Chat by Mistral AI_llm_clusters_20250912_220709_cf0221ab_0_19d1b8db'})\nRETURN parent.id as parent_id,\n       parent.feature as parent_feature,\n       parent.is_leaf as parent_is_leaf,\n       child.id as child_id,\n       child.feature as child_feature,\n       child.is_leaf as child_is_leaf\nORDER BY parent.feature, child.feature"
      }
    },
    {
      "taxonomy_rank": 3,
      "root_id": "mini_taxonomy_root_Le Chat by Mistral AI_Le Chat by Mistral AI_llm_clusters_20250912_221350_0af95778_0_d4115af6",
      "tag": "multimodal assistance mmaa",
      "quality_score": 167.0,
      "queries": {
        "screenshot_tree": "\n// Screenshot-friendly tree for: multimodal assistance mmaa (Top 10 features only)\nMATCH (root:MiniTaxonomyNode {id: 'mini_taxonomy_root_Le Chat by Mistral AI_Le Chat by Mistral AI_llm_clusters_20250912_221350_0af95778_0_d4115af6'})\nWHERE NOT (()-[:HAS_CHILD]->(root))\nOPTIONAL MATCH path = (root)-[:HAS_CHILD*1..3]->(node:MiniTaxonomyNode)\nWITH root, node, path\nORDER BY length(path), node.feature\nWITH root, collect(DISTINCT {\n    feature: node.feature,\n    depth: length(path),\n    is_leaf: NOT (node)-[:HAS_CHILD]->()\n})[0..10] as sample_nodes\nRETURN root.llm_tag as taxonomy_name,\n       root.feature as root_feature,\n       sample_nodes",
        "sample_features": "\n// Sample features for screenshots: multimodal assistance mmaa (Max 8 features)\nMATCH (root:MiniTaxonomyNode {id: 'mini_taxonomy_root_Le Chat by Mistral AI_Le Chat by Mistral AI_llm_clusters_20250912_221350_0af95778_0_d4115af6'})\nWHERE NOT (()-[:HAS_CHILD]->(root))\nMATCH (root)-[:HAS_CHILD*]->(leaf:MiniTaxonomyNode)\nWHERE NOT (leaf)-[:HAS_CHILD]->() AND leaf.feature IS NOT NULL\nWITH root, collect(DISTINCT leaf.feature) as all_features\nRETURN root.llm_tag as taxonomy_name,\n       size(all_features) as total_features,\n       all_features[0..8] as sample_features",
        "compact_hierarchy": "\n// Compact hierarchy for: multimodal assistance mmaa (Screenshot ready)\nMATCH (root:MiniTaxonomyNode {id: 'mini_taxonomy_root_Le Chat by Mistral AI_Le Chat by Mistral AI_llm_clusters_20250912_221350_0af95778_0_d4115af6'})\nWHERE NOT (()-[:HAS_CHILD]->(root))\nOPTIONAL MATCH (root)-[:HAS_CHILD]->(level1:MiniTaxonomyNode)\nOPTIONAL MATCH (level1)-[:HAS_CHILD]->(level2:MiniTaxonomyNode)\nWHERE NOT (level2)-[:HAS_CHILD]->()\nWITH root, level1, collect(level2.feature)[0..3] as level2_sample\nRETURN root.llm_tag as root_tag,\n       level1.feature as level1_feature,\n       level2_sample\nORDER BY level1.feature\nLIMIT 5",
        "leaf_features": "\n// Top 10 leaf features for: multimodal assistance mmaa\nMATCH (root:MiniTaxonomyNode {id: 'mini_taxonomy_root_Le Chat by Mistral AI_Le Chat by Mistral AI_llm_clusters_20250912_221350_0af95778_0_d4115af6'})\nWHERE NOT (()-[:HAS_CHILD]->(root))\nMATCH (root)-[:HAS_CHILD*]->(leaf:MiniTaxonomyNode)\nWHERE NOT (leaf)-[:HAS_CHILD]->() AND leaf.feature IS NOT NULL\nRETURN root.llm_tag as taxonomy_tag,\n       collect(DISTINCT leaf.feature)[0..10] as top_features,\n       count(DISTINCT leaf) as total_leaf_count",
        "tree_depth": "\n// Tree depth and structure metrics for: multimodal assistance mmaa\nMATCH (root:MiniTaxonomyNode {id: 'mini_taxonomy_root_Le Chat by Mistral AI_Le Chat by Mistral AI_llm_clusters_20250912_221350_0af95778_0_d4115af6'})\nWHERE NOT (()-[:HAS_CHILD]->(root))\nOPTIONAL MATCH path = (root)-[:HAS_CHILD*]->(leaf)\nWHERE NOT (leaf)-[:HAS_CHILD]->()\nWITH root, \n     max(length(path)) as max_depth,\n     count(DISTINCT leaf) as leaf_count,\n     avg(length(path)) as avg_depth\nRETURN root.llm_tag as taxonomy_tag,\n       max_depth,\n       leaf_count,\n       round(avg_depth, 2) as average_depth",
        "parent_child_relationships": "\n// Parent-child relationships for: multimodal assistance mmaa\nMATCH (parent:MiniTaxonomyNode)-[:HAS_CHILD]->(child:MiniTaxonomyNode)\nWHERE parent.id = 'mini_taxonomy_root_Le Chat by Mistral AI_Le Chat by Mistral AI_llm_clusters_20250912_221350_0af95778_0_d4115af6' OR \n      (parent)-[:HAS_CHILD*0..]-(:MiniTaxonomyNode {id: 'mini_taxonomy_root_Le Chat by Mistral AI_Le Chat by Mistral AI_llm_clusters_20250912_221350_0af95778_0_d4115af6'})\nRETURN parent.id as parent_id,\n       parent.feature as parent_feature,\n       parent.is_leaf as parent_is_leaf,\n       child.id as child_id,\n       child.feature as child_feature,\n       child.is_leaf as child_is_leaf\nORDER BY parent.feature, child.feature"
      }
    },
    {
      "taxonomy_rank": 4,
      "root_id": "mini_taxonomy_root_Le Chat by Mistral AI_Le Chat by Mistral AI_llm_clusters_20250912_222145_775e88ad_0_050d6dcf",
      "tag": "artificial intelligence ai support",
      "quality_score": 167.0,
      "queries": {
        "screenshot_tree": "\n// Screenshot-friendly tree for: artificial intelligence ai support (Top 10 features only)\nMATCH (root:MiniTaxonomyNode {id: 'mini_taxonomy_root_Le Chat by Mistral AI_Le Chat by Mistral AI_llm_clusters_20250912_222145_775e88ad_0_050d6dcf'})\nWHERE NOT (()-[:HAS_CHILD]->(root))\nOPTIONAL MATCH path = (root)-[:HAS_CHILD*1..3]->(node:MiniTaxonomyNode)\nWITH root, node, path\nORDER BY length(path), node.feature\nWITH root, collect(DISTINCT {\n    feature: node.feature,\n    depth: length(path),\n    is_leaf: NOT (node)-[:HAS_CHILD]->()\n})[0..10] as sample_nodes\nRETURN root.llm_tag as taxonomy_name,\n       root.feature as root_feature,\n       sample_nodes",
        "sample_features": "\n// Sample features for screenshots: artificial intelligence ai support (Max 8 features)\nMATCH (root:MiniTaxonomyNode {id: 'mini_taxonomy_root_Le Chat by Mistral AI_Le Chat by Mistral AI_llm_clusters_20250912_222145_775e88ad_0_050d6dcf'})\nWHERE NOT (()-[:HAS_CHILD]->(root))\nMATCH (root)-[:HAS_CHILD*]->(leaf:MiniTaxonomyNode)\nWHERE NOT (leaf)-[:HAS_CHILD]->() AND leaf.feature IS NOT NULL\nWITH root, collect(DISTINCT leaf.feature) as all_features\nRETURN root.llm_tag as taxonomy_name,\n       size(all_features) as total_features,\n       all_features[0..8] as sample_features",
        "compact_hierarchy": "\n// Compact hierarchy for: artificial intelligence ai support (Screenshot ready)\nMATCH (root:MiniTaxonomyNode {id: 'mini_taxonomy_root_Le Chat by Mistral AI_Le Chat by Mistral AI_llm_clusters_20250912_222145_775e88ad_0_050d6dcf'})\nWHERE NOT (()-[:HAS_CHILD]->(root))\nOPTIONAL MATCH (root)-[:HAS_CHILD]->(level1:MiniTaxonomyNode)\nOPTIONAL MATCH (level1)-[:HAS_CHILD]->(level2:MiniTaxonomyNode)\nWHERE NOT (level2)-[:HAS_CHILD]->()\nWITH root, level1, collect(level2.feature)[0..3] as level2_sample\nRETURN root.llm_tag as root_tag,\n       level1.feature as level1_feature,\n       level2_sample\nORDER BY level1.feature\nLIMIT 5",
        "leaf_features": "\n// Top 10 leaf features for: artificial intelligence ai support\nMATCH (root:MiniTaxonomyNode {id: 'mini_taxonomy_root_Le Chat by Mistral AI_Le Chat by Mistral AI_llm_clusters_20250912_222145_775e88ad_0_050d6dcf'})\nWHERE NOT (()-[:HAS_CHILD]->(root))\nMATCH (root)-[:HAS_CHILD*]->(leaf:MiniTaxonomyNode)\nWHERE NOT (leaf)-[:HAS_CHILD]->() AND leaf.feature IS NOT NULL\nRETURN root.llm_tag as taxonomy_tag,\n       collect(DISTINCT leaf.feature)[0..10] as top_features,\n       count(DISTINCT leaf) as total_leaf_count",
        "tree_depth": "\n// Tree depth and structure metrics for: artificial intelligence ai support\nMATCH (root:MiniTaxonomyNode {id: 'mini_taxonomy_root_Le Chat by Mistral AI_Le Chat by Mistral AI_llm_clusters_20250912_222145_775e88ad_0_050d6dcf'})\nWHERE NOT (()-[:HAS_CHILD]->(root))\nOPTIONAL MATCH path = (root)-[:HAS_CHILD*]->(leaf)\nWHERE NOT (leaf)-[:HAS_CHILD]->()\nWITH root, \n     max(length(path)) as max_depth,\n     count(DISTINCT leaf) as leaf_count,\n     avg(length(path)) as avg_depth\nRETURN root.llm_tag as taxonomy_tag,\n       max_depth,\n       leaf_count,\n       round(avg_depth, 2) as average_depth",
        "parent_child_relationships": "\n// Parent-child relationships for: artificial intelligence ai support\nMATCH (parent:MiniTaxonomyNode)-[:HAS_CHILD]->(child:MiniTaxonomyNode)\nWHERE parent.id = 'mini_taxonomy_root_Le Chat by Mistral AI_Le Chat by Mistral AI_llm_clusters_20250912_222145_775e88ad_0_050d6dcf' OR \n      (parent)-[:HAS_CHILD*0..]-(:MiniTaxonomyNode {id: 'mini_taxonomy_root_Le Chat by Mistral AI_Le Chat by Mistral AI_llm_clusters_20250912_222145_775e88ad_0_050d6dcf'})\nRETURN parent.id as parent_id,\n       parent.feature as parent_feature,\n       parent.is_leaf as parent_is_leaf,\n       child.id as child_id,\n       child.feature as child_feature,\n       child.is_leaf as child_is_leaf\nORDER BY parent.feature, child.feature"
      }
    },
    {
      "taxonomy_rank": 5,
      "root_id": "mini_taxonomy_root_Le Chat by Mistral AI_Le Chat by Mistral AI_llm_clusters_20250912_220118_afdd25e8_0_cfa6a4db",
      "tag": "technology",
      "quality_score": 163.0,
      "queries": {
        "screenshot_tree": "\n// Screenshot-friendly tree for: technology (Top 10 features only)\nMATCH (root:MiniTaxonomyNode {id: 'mini_taxonomy_root_Le Chat by Mistral AI_Le Chat by Mistral AI_llm_clusters_20250912_220118_afdd25e8_0_cfa6a4db'})\nWHERE NOT (()-[:HAS_CHILD]->(root))\nOPTIONAL MATCH path = (root)-[:HAS_CHILD*1..3]->(node:MiniTaxonomyNode)\nWITH root, node, path\nORDER BY length(path), node.feature\nWITH root, collect(DISTINCT {\n    feature: node.feature,\n    depth: length(path),\n    is_leaf: NOT (node)-[:HAS_CHILD]->()\n})[0..10] as sample_nodes\nRETURN root.llm_tag as taxonomy_name,\n       root.feature as root_feature,\n       sample_nodes",
        "sample_features": "\n// Sample features for screenshots: technology (Max 8 features)\nMATCH (root:MiniTaxonomyNode {id: 'mini_taxonomy_root_Le Chat by Mistral AI_Le Chat by Mistral AI_llm_clusters_20250912_220118_afdd25e8_0_cfa6a4db'})\nWHERE NOT (()-[:HAS_CHILD]->(root))\nMATCH (root)-[:HAS_CHILD*]->(leaf:MiniTaxonomyNode)\nWHERE NOT (leaf)-[:HAS_CHILD]->() AND leaf.feature IS NOT NULL\nWITH root, collect(DISTINCT leaf.feature) as all_features\nRETURN root.llm_tag as taxonomy_name,\n       size(all_features) as total_features,\n       all_features[0..8] as sample_features",
        "compact_hierarchy": "\n// Compact hierarchy for: technology (Screenshot ready)\nMATCH (root:MiniTaxonomyNode {id: 'mini_taxonomy_root_Le Chat by Mistral AI_Le Chat by Mistral AI_llm_clusters_20250912_220118_afdd25e8_0_cfa6a4db'})\nWHERE NOT (()-[:HAS_CHILD]->(root))\nOPTIONAL MATCH (root)-[:HAS_CHILD]->(level1:MiniTaxonomyNode)\nOPTIONAL MATCH (level1)-[:HAS_CHILD]->(level2:MiniTaxonomyNode)\nWHERE NOT (level2)-[:HAS_CHILD]->()\nWITH root, level1, collect(level2.feature)[0..3] as level2_sample\nRETURN root.llm_tag as root_tag,\n       level1.feature as level1_feature,\n       level2_sample\nORDER BY level1.feature\nLIMIT 5",
        "leaf_features": "\n// Top 10 leaf features for: technology\nMATCH (root:MiniTaxonomyNode {id: 'mini_taxonomy_root_Le Chat by Mistral AI_Le Chat by Mistral AI_llm_clusters_20250912_220118_afdd25e8_0_cfa6a4db'})\nWHERE NOT (()-[:HAS_CHILD]->(root))\nMATCH (root)-[:HAS_CHILD*]->(leaf:MiniTaxonomyNode)\nWHERE NOT (leaf)-[:HAS_CHILD]->() AND leaf.feature IS NOT NULL\nRETURN root.llm_tag as taxonomy_tag,\n       collect(DISTINCT leaf.feature)[0..10] as top_features,\n       count(DISTINCT leaf) as total_leaf_count",
        "tree_depth": "\n// Tree depth and structure metrics for: technology\nMATCH (root:MiniTaxonomyNode {id: 'mini_taxonomy_root_Le Chat by Mistral AI_Le Chat by Mistral AI_llm_clusters_20250912_220118_afdd25e8_0_cfa6a4db'})\nWHERE NOT (()-[:HAS_CHILD]->(root))\nOPTIONAL MATCH path = (root)-[:HAS_CHILD*]->(leaf)\nWHERE NOT (leaf)-[:HAS_CHILD]->()\nWITH root, \n     max(length(path)) as max_depth,\n     count(DISTINCT leaf) as leaf_count,\n     avg(length(path)) as avg_depth\nRETURN root.llm_tag as taxonomy_tag,\n       max_depth,\n       leaf_count,\n       round(avg_depth, 2) as average_depth",
        "parent_child_relationships": "\n// Parent-child relationships for: technology\nMATCH (parent:MiniTaxonomyNode)-[:HAS_CHILD]->(child:MiniTaxonomyNode)\nWHERE parent.id = 'mini_taxonomy_root_Le Chat by Mistral AI_Le Chat by Mistral AI_llm_clusters_20250912_220118_afdd25e8_0_cfa6a4db' OR \n      (parent)-[:HAS_CHILD*0..]-(:MiniTaxonomyNode {id: 'mini_taxonomy_root_Le Chat by Mistral AI_Le Chat by Mistral AI_llm_clusters_20250912_220118_afdd25e8_0_cfa6a4db'})\nRETURN parent.id as parent_id,\n       parent.feature as parent_feature,\n       parent.is_leaf as parent_is_leaf,\n       child.id as child_id,\n       child.feature as child_feature,\n       child.is_leaf as child_is_leaf\nORDER BY parent.feature, child.feature"
      }
    },
    {
      "taxonomy_rank": 6,
      "root_id": "mini_taxonomy_root_Le Chat by Mistral AI_Le Chat by Mistral AI_llm_clusters_20250912_220459_0d41558a_0_6d1d4ef6",
      "tag": "language model",
      "quality_score": 163.0,
      "queries": {
        "screenshot_tree": "\n// Screenshot-friendly tree for: language model (Top 10 features only)\nMATCH (root:MiniTaxonomyNode {id: 'mini_taxonomy_root_Le Chat by Mistral AI_Le Chat by Mistral AI_llm_clusters_20250912_220459_0d41558a_0_6d1d4ef6'})\nWHERE NOT (()-[:HAS_CHILD]->(root))\nOPTIONAL MATCH path = (root)-[:HAS_CHILD*1..3]->(node:MiniTaxonomyNode)\nWITH root, node, path\nORDER BY length(path), node.feature\nWITH root, collect(DISTINCT {\n    feature: node.feature,\n    depth: length(path),\n    is_leaf: NOT (node)-[:HAS_CHILD]->()\n})[0..10] as sample_nodes\nRETURN root.llm_tag as taxonomy_name,\n       root.feature as root_feature,\n       sample_nodes",
        "sample_features": "\n// Sample features for screenshots: language model (Max 8 features)\nMATCH (root:MiniTaxonomyNode {id: 'mini_taxonomy_root_Le Chat by Mistral AI_Le Chat by Mistral AI_llm_clusters_20250912_220459_0d41558a_0_6d1d4ef6'})\nWHERE NOT (()-[:HAS_CHILD]->(root))\nMATCH (root)-[:HAS_CHILD*]->(leaf:MiniTaxonomyNode)\nWHERE NOT (leaf)-[:HAS_CHILD]->() AND leaf.feature IS NOT NULL\nWITH root, collect(DISTINCT leaf.feature) as all_features\nRETURN root.llm_tag as taxonomy_name,\n       size(all_features) as total_features,\n       all_features[0..8] as sample_features",
        "compact_hierarchy": "\n// Compact hierarchy for: language model (Screenshot ready)\nMATCH (root:MiniTaxonomyNode {id: 'mini_taxonomy_root_Le Chat by Mistral AI_Le Chat by Mistral AI_llm_clusters_20250912_220459_0d41558a_0_6d1d4ef6'})\nWHERE NOT (()-[:HAS_CHILD]->(root))\nOPTIONAL MATCH (root)-[:HAS_CHILD]->(level1:MiniTaxonomyNode)\nOPTIONAL MATCH (level1)-[:HAS_CHILD]->(level2:MiniTaxonomyNode)\nWHERE NOT (level2)-[:HAS_CHILD]->()\nWITH root, level1, collect(level2.feature)[0..3] as level2_sample\nRETURN root.llm_tag as root_tag,\n       level1.feature as level1_feature,\n       level2_sample\nORDER BY level1.feature\nLIMIT 5",
        "leaf_features": "\n// Top 10 leaf features for: language model\nMATCH (root:MiniTaxonomyNode {id: 'mini_taxonomy_root_Le Chat by Mistral AI_Le Chat by Mistral AI_llm_clusters_20250912_220459_0d41558a_0_6d1d4ef6'})\nWHERE NOT (()-[:HAS_CHILD]->(root))\nMATCH (root)-[:HAS_CHILD*]->(leaf:MiniTaxonomyNode)\nWHERE NOT (leaf)-[:HAS_CHILD]->() AND leaf.feature IS NOT NULL\nRETURN root.llm_tag as taxonomy_tag,\n       collect(DISTINCT leaf.feature)[0..10] as top_features,\n       count(DISTINCT leaf) as total_leaf_count",
        "tree_depth": "\n// Tree depth and structure metrics for: language model\nMATCH (root:MiniTaxonomyNode {id: 'mini_taxonomy_root_Le Chat by Mistral AI_Le Chat by Mistral AI_llm_clusters_20250912_220459_0d41558a_0_6d1d4ef6'})\nWHERE NOT (()-[:HAS_CHILD]->(root))\nOPTIONAL MATCH path = (root)-[:HAS_CHILD*]->(leaf)\nWHERE NOT (leaf)-[:HAS_CHILD]->()\nWITH root, \n     max(length(path)) as max_depth,\n     count(DISTINCT leaf) as leaf_count,\n     avg(length(path)) as avg_depth\nRETURN root.llm_tag as taxonomy_tag,\n       max_depth,\n       leaf_count,\n       round(avg_depth, 2) as average_depth",
        "parent_child_relationships": "\n// Parent-child relationships for: language model\nMATCH (parent:MiniTaxonomyNode)-[:HAS_CHILD]->(child:MiniTaxonomyNode)\nWHERE parent.id = 'mini_taxonomy_root_Le Chat by Mistral AI_Le Chat by Mistral AI_llm_clusters_20250912_220459_0d41558a_0_6d1d4ef6' OR \n      (parent)-[:HAS_CHILD*0..]-(:MiniTaxonomyNode {id: 'mini_taxonomy_root_Le Chat by Mistral AI_Le Chat by Mistral AI_llm_clusters_20250912_220459_0d41558a_0_6d1d4ef6'})\nRETURN parent.id as parent_id,\n       parent.feature as parent_feature,\n       parent.is_leaf as parent_is_leaf,\n       child.id as child_id,\n       child.feature as child_feature,\n       child.is_leaf as child_is_leaf\nORDER BY parent.feature, child.feature"
      }
    },
    {
      "taxonomy_rank": 7,
      "root_id": "mini_taxonomy_root_Le Chat by Mistral AI_Le Chat by Mistral AI_llm_clusters_20250912_221003_cb74ad37_0_5c93bede",
      "tag": "business proposal",
      "quality_score": 163.0,
      "queries": {
        "screenshot_tree": "\n// Screenshot-friendly tree for: business proposal (Top 10 features only)\nMATCH (root:MiniTaxonomyNode {id: 'mini_taxonomy_root_Le Chat by Mistral AI_Le Chat by Mistral AI_llm_clusters_20250912_221003_cb74ad37_0_5c93bede'})\nWHERE NOT (()-[:HAS_CHILD]->(root))\nOPTIONAL MATCH path = (root)-[:HAS_CHILD*1..3]->(node:MiniTaxonomyNode)\nWITH root, node, path\nORDER BY length(path), node.feature\nWITH root, collect(DISTINCT {\n    feature: node.feature,\n    depth: length(path),\n    is_leaf: NOT (node)-[:HAS_CHILD]->()\n})[0..10] as sample_nodes\nRETURN root.llm_tag as taxonomy_name,\n       root.feature as root_feature,\n       sample_nodes",
        "sample_features": "\n// Sample features for screenshots: business proposal (Max 8 features)\nMATCH (root:MiniTaxonomyNode {id: 'mini_taxonomy_root_Le Chat by Mistral AI_Le Chat by Mistral AI_llm_clusters_20250912_221003_cb74ad37_0_5c93bede'})\nWHERE NOT (()-[:HAS_CHILD]->(root))\nMATCH (root)-[:HAS_CHILD*]->(leaf:MiniTaxonomyNode)\nWHERE NOT (leaf)-[:HAS_CHILD]->() AND leaf.feature IS NOT NULL\nWITH root, collect(DISTINCT leaf.feature) as all_features\nRETURN root.llm_tag as taxonomy_name,\n       size(all_features) as total_features,\n       all_features[0..8] as sample_features",
        "compact_hierarchy": "\n// Compact hierarchy for: business proposal (Screenshot ready)\nMATCH (root:MiniTaxonomyNode {id: 'mini_taxonomy_root_Le Chat by Mistral AI_Le Chat by Mistral AI_llm_clusters_20250912_221003_cb74ad37_0_5c93bede'})\nWHERE NOT (()-[:HAS_CHILD]->(root))\nOPTIONAL MATCH (root)-[:HAS_CHILD]->(level1:MiniTaxonomyNode)\nOPTIONAL MATCH (level1)-[:HAS_CHILD]->(level2:MiniTaxonomyNode)\nWHERE NOT (level2)-[:HAS_CHILD]->()\nWITH root, level1, collect(level2.feature)[0..3] as level2_sample\nRETURN root.llm_tag as root_tag,\n       level1.feature as level1_feature,\n       level2_sample\nORDER BY level1.feature\nLIMIT 5",
        "leaf_features": "\n// Top 10 leaf features for: business proposal\nMATCH (root:MiniTaxonomyNode {id: 'mini_taxonomy_root_Le Chat by Mistral AI_Le Chat by Mistral AI_llm_clusters_20250912_221003_cb74ad37_0_5c93bede'})\nWHERE NOT (()-[:HAS_CHILD]->(root))\nMATCH (root)-[:HAS_CHILD*]->(leaf:MiniTaxonomyNode)\nWHERE NOT (leaf)-[:HAS_CHILD]->() AND leaf.feature IS NOT NULL\nRETURN root.llm_tag as taxonomy_tag,\n       collect(DISTINCT leaf.feature)[0..10] as top_features,\n       count(DISTINCT leaf) as total_leaf_count",
        "tree_depth": "\n// Tree depth and structure metrics for: business proposal\nMATCH (root:MiniTaxonomyNode {id: 'mini_taxonomy_root_Le Chat by Mistral AI_Le Chat by Mistral AI_llm_clusters_20250912_221003_cb74ad37_0_5c93bede'})\nWHERE NOT (()-[:HAS_CHILD]->(root))\nOPTIONAL MATCH path = (root)-[:HAS_CHILD*]->(leaf)\nWHERE NOT (leaf)-[:HAS_CHILD]->()\nWITH root, \n     max(length(path)) as max_depth,\n     count(DISTINCT leaf) as leaf_count,\n     avg(length(path)) as avg_depth\nRETURN root.llm_tag as taxonomy_tag,\n       max_depth,\n       leaf_count,\n       round(avg_depth, 2) as average_depth",
        "parent_child_relationships": "\n// Parent-child relationships for: business proposal\nMATCH (parent:MiniTaxonomyNode)-[:HAS_CHILD]->(child:MiniTaxonomyNode)\nWHERE parent.id = 'mini_taxonomy_root_Le Chat by Mistral AI_Le Chat by Mistral AI_llm_clusters_20250912_221003_cb74ad37_0_5c93bede' OR \n      (parent)-[:HAS_CHILD*0..]-(:MiniTaxonomyNode {id: 'mini_taxonomy_root_Le Chat by Mistral AI_Le Chat by Mistral AI_llm_clusters_20250912_221003_cb74ad37_0_5c93bede'})\nRETURN parent.id as parent_id,\n       parent.feature as parent_feature,\n       parent.is_leaf as parent_is_leaf,\n       child.id as child_id,\n       child.feature as child_feature,\n       child.is_leaf as child_is_leaf\nORDER BY parent.feature, child.feature"
      }
    },
    {
      "taxonomy_rank": 8,
      "root_id": "mini_taxonomy_root_Le Chat by Mistral AI_Le Chat by Mistral AI_llm_clusters_20250912_221055_85c56ece_0_7a0f9a5a",
      "tag": "e-commerce",
      "quality_score": 163.0,
      "queries": {
        "screenshot_tree": "\n// Screenshot-friendly tree for: e-commerce (Top 10 features only)\nMATCH (root:MiniTaxonomyNode {id: 'mini_taxonomy_root_Le Chat by Mistral AI_Le Chat by Mistral AI_llm_clusters_20250912_221055_85c56ece_0_7a0f9a5a'})\nWHERE NOT (()-[:HAS_CHILD]->(root))\nOPTIONAL MATCH path = (root)-[:HAS_CHILD*1..3]->(node:MiniTaxonomyNode)\nWITH root, node, path\nORDER BY length(path), node.feature\nWITH root, collect(DISTINCT {\n    feature: node.feature,\n    depth: length(path),\n    is_leaf: NOT (node)-[:HAS_CHILD]->()\n})[0..10] as sample_nodes\nRETURN root.llm_tag as taxonomy_name,\n       root.feature as root_feature,\n       sample_nodes",
        "sample_features": "\n// Sample features for screenshots: e-commerce (Max 8 features)\nMATCH (root:MiniTaxonomyNode {id: 'mini_taxonomy_root_Le Chat by Mistral AI_Le Chat by Mistral AI_llm_clusters_20250912_221055_85c56ece_0_7a0f9a5a'})\nWHERE NOT (()-[:HAS_CHILD]->(root))\nMATCH (root)-[:HAS_CHILD*]->(leaf:MiniTaxonomyNode)\nWHERE NOT (leaf)-[:HAS_CHILD]->() AND leaf.feature IS NOT NULL\nWITH root, collect(DISTINCT leaf.feature) as all_features\nRETURN root.llm_tag as taxonomy_name,\n       size(all_features) as total_features,\n       all_features[0..8] as sample_features",
        "compact_hierarchy": "\n// Compact hierarchy for: e-commerce (Screenshot ready)\nMATCH (root:MiniTaxonomyNode {id: 'mini_taxonomy_root_Le Chat by Mistral AI_Le Chat by Mistral AI_llm_clusters_20250912_221055_85c56ece_0_7a0f9a5a'})\nWHERE NOT (()-[:HAS_CHILD]->(root))\nOPTIONAL MATCH (root)-[:HAS_CHILD]->(level1:MiniTaxonomyNode)\nOPTIONAL MATCH (level1)-[:HAS_CHILD]->(level2:MiniTaxonomyNode)\nWHERE NOT (level2)-[:HAS_CHILD]->()\nWITH root, level1, collect(level2.feature)[0..3] as level2_sample\nRETURN root.llm_tag as root_tag,\n       level1.feature as level1_feature,\n       level2_sample\nORDER BY level1.feature\nLIMIT 5",
        "leaf_features": "\n// Top 10 leaf features for: e-commerce\nMATCH (root:MiniTaxonomyNode {id: 'mini_taxonomy_root_Le Chat by Mistral AI_Le Chat by Mistral AI_llm_clusters_20250912_221055_85c56ece_0_7a0f9a5a'})\nWHERE NOT (()-[:HAS_CHILD]->(root))\nMATCH (root)-[:HAS_CHILD*]->(leaf:MiniTaxonomyNode)\nWHERE NOT (leaf)-[:HAS_CHILD]->() AND leaf.feature IS NOT NULL\nRETURN root.llm_tag as taxonomy_tag,\n       collect(DISTINCT leaf.feature)[0..10] as top_features,\n       count(DISTINCT leaf) as total_leaf_count",
        "tree_depth": "\n// Tree depth and structure metrics for: e-commerce\nMATCH (root:MiniTaxonomyNode {id: 'mini_taxonomy_root_Le Chat by Mistral AI_Le Chat by Mistral AI_llm_clusters_20250912_221055_85c56ece_0_7a0f9a5a'})\nWHERE NOT (()-[:HAS_CHILD]->(root))\nOPTIONAL MATCH path = (root)-[:HAS_CHILD*]->(leaf)\nWHERE NOT (leaf)-[:HAS_CHILD]->()\nWITH root, \n     max(length(path)) as max_depth,\n     count(DISTINCT leaf) as leaf_count,\n     avg(length(path)) as avg_depth\nRETURN root.llm_tag as taxonomy_tag,\n       max_depth,\n       leaf_count,\n       round(avg_depth, 2) as average_depth",
        "parent_child_relationships": "\n// Parent-child relationships for: e-commerce\nMATCH (parent:MiniTaxonomyNode)-[:HAS_CHILD]->(child:MiniTaxonomyNode)\nWHERE parent.id = 'mini_taxonomy_root_Le Chat by Mistral AI_Le Chat by Mistral AI_llm_clusters_20250912_221055_85c56ece_0_7a0f9a5a' OR \n      (parent)-[:HAS_CHILD*0..]-(:MiniTaxonomyNode {id: 'mini_taxonomy_root_Le Chat by Mistral AI_Le Chat by Mistral AI_llm_clusters_20250912_221055_85c56ece_0_7a0f9a5a'})\nRETURN parent.id as parent_id,\n       parent.feature as parent_feature,\n       parent.is_leaf as parent_is_leaf,\n       child.id as child_id,\n       child.feature as child_feature,\n       child.is_leaf as child_is_leaf\nORDER BY parent.feature, child.feature"
      }
    },
    {
      "taxonomy_rank": 9,
      "root_id": "mini_taxonomy_root_Le Chat by Mistral AI_Le Chat by Mistral AI_llm_clusters_20250912_221143_640b4f34_0_f683a7d0",
      "tag": "multimodal information retrieval mimir",
      "quality_score": 163.0,
      "queries": {
        "screenshot_tree": "\n// Screenshot-friendly tree for: multimodal information retrieval mimir (Top 10 features only)\nMATCH (root:MiniTaxonomyNode {id: 'mini_taxonomy_root_Le Chat by Mistral AI_Le Chat by Mistral AI_llm_clusters_20250912_221143_640b4f34_0_f683a7d0'})\nWHERE NOT (()-[:HAS_CHILD]->(root))\nOPTIONAL MATCH path = (root)-[:HAS_CHILD*1..3]->(node:MiniTaxonomyNode)\nWITH root, node, path\nORDER BY length(path), node.feature\nWITH root, collect(DISTINCT {\n    feature: node.feature,\n    depth: length(path),\n    is_leaf: NOT (node)-[:HAS_CHILD]->()\n})[0..10] as sample_nodes\nRETURN root.llm_tag as taxonomy_name,\n       root.feature as root_feature,\n       sample_nodes",
        "sample_features": "\n// Sample features for screenshots: multimodal information retrieval mimir (Max 8 features)\nMATCH (root:MiniTaxonomyNode {id: 'mini_taxonomy_root_Le Chat by Mistral AI_Le Chat by Mistral AI_llm_clusters_20250912_221143_640b4f34_0_f683a7d0'})\nWHERE NOT (()-[:HAS_CHILD]->(root))\nMATCH (root)-[:HAS_CHILD*]->(leaf:MiniTaxonomyNode)\nWHERE NOT (leaf)-[:HAS_CHILD]->() AND leaf.feature IS NOT NULL\nWITH root, collect(DISTINCT leaf.feature) as all_features\nRETURN root.llm_tag as taxonomy_name,\n       size(all_features) as total_features,\n       all_features[0..8] as sample_features",
        "compact_hierarchy": "\n// Compact hierarchy for: multimodal information retrieval mimir (Screenshot ready)\nMATCH (root:MiniTaxonomyNode {id: 'mini_taxonomy_root_Le Chat by Mistral AI_Le Chat by Mistral AI_llm_clusters_20250912_221143_640b4f34_0_f683a7d0'})\nWHERE NOT (()-[:HAS_CHILD]->(root))\nOPTIONAL MATCH (root)-[:HAS_CHILD]->(level1:MiniTaxonomyNode)\nOPTIONAL MATCH (level1)-[:HAS_CHILD]->(level2:MiniTaxonomyNode)\nWHERE NOT (level2)-[:HAS_CHILD]->()\nWITH root, level1, collect(level2.feature)[0..3] as level2_sample\nRETURN root.llm_tag as root_tag,\n       level1.feature as level1_feature,\n       level2_sample\nORDER BY level1.feature\nLIMIT 5",
        "leaf_features": "\n// Top 10 leaf features for: multimodal information retrieval mimir\nMATCH (root:MiniTaxonomyNode {id: 'mini_taxonomy_root_Le Chat by Mistral AI_Le Chat by Mistral AI_llm_clusters_20250912_221143_640b4f34_0_f683a7d0'})\nWHERE NOT (()-[:HAS_CHILD]->(root))\nMATCH (root)-[:HAS_CHILD*]->(leaf:MiniTaxonomyNode)\nWHERE NOT (leaf)-[:HAS_CHILD]->() AND leaf.feature IS NOT NULL\nRETURN root.llm_tag as taxonomy_tag,\n       collect(DISTINCT leaf.feature)[0..10] as top_features,\n       count(DISTINCT leaf) as total_leaf_count",
        "tree_depth": "\n// Tree depth and structure metrics for: multimodal information retrieval mimir\nMATCH (root:MiniTaxonomyNode {id: 'mini_taxonomy_root_Le Chat by Mistral AI_Le Chat by Mistral AI_llm_clusters_20250912_221143_640b4f34_0_f683a7d0'})\nWHERE NOT (()-[:HAS_CHILD]->(root))\nOPTIONAL MATCH path = (root)-[:HAS_CHILD*]->(leaf)\nWHERE NOT (leaf)-[:HAS_CHILD]->()\nWITH root, \n     max(length(path)) as max_depth,\n     count(DISTINCT leaf) as leaf_count,\n     avg(length(path)) as avg_depth\nRETURN root.llm_tag as taxonomy_tag,\n       max_depth,\n       leaf_count,\n       round(avg_depth, 2) as average_depth",
        "parent_child_relationships": "\n// Parent-child relationships for: multimodal information retrieval mimir\nMATCH (parent:MiniTaxonomyNode)-[:HAS_CHILD]->(child:MiniTaxonomyNode)\nWHERE parent.id = 'mini_taxonomy_root_Le Chat by Mistral AI_Le Chat by Mistral AI_llm_clusters_20250912_221143_640b4f34_0_f683a7d0' OR \n      (parent)-[:HAS_CHILD*0..]-(:MiniTaxonomyNode {id: 'mini_taxonomy_root_Le Chat by Mistral AI_Le Chat by Mistral AI_llm_clusters_20250912_221143_640b4f34_0_f683a7d0'})\nRETURN parent.id as parent_id,\n       parent.feature as parent_feature,\n       parent.is_leaf as parent_is_leaf,\n       child.id as child_id,\n       child.feature as child_feature,\n       child.is_leaf as child_is_leaf\nORDER BY parent.feature, child.feature"
      }
    },
    {
      "taxonomy_rank": 10,
      "root_id": "mini_taxonomy_root_Le Chat by Mistral AI_Le Chat by Mistral AI_llm_clusters_20250912_221556_0ae9cadf_0_c84b0313",
      "tag": "multimodal input and output miio",
      "quality_score": 163.0,
      "queries": {
        "screenshot_tree": "\n// Screenshot-friendly tree for: multimodal input and output miio (Top 10 features only)\nMATCH (root:MiniTaxonomyNode {id: 'mini_taxonomy_root_Le Chat by Mistral AI_Le Chat by Mistral AI_llm_clusters_20250912_221556_0ae9cadf_0_c84b0313'})\nWHERE NOT (()-[:HAS_CHILD]->(root))\nOPTIONAL MATCH path = (root)-[:HAS_CHILD*1..3]->(node:MiniTaxonomyNode)\nWITH root, node, path\nORDER BY length(path), node.feature\nWITH root, collect(DISTINCT {\n    feature: node.feature,\n    depth: length(path),\n    is_leaf: NOT (node)-[:HAS_CHILD]->()\n})[0..10] as sample_nodes\nRETURN root.llm_tag as taxonomy_name,\n       root.feature as root_feature,\n       sample_nodes",
        "sample_features": "\n// Sample features for screenshots: multimodal input and output miio (Max 8 features)\nMATCH (root:MiniTaxonomyNode {id: 'mini_taxonomy_root_Le Chat by Mistral AI_Le Chat by Mistral AI_llm_clusters_20250912_221556_0ae9cadf_0_c84b0313'})\nWHERE NOT (()-[:HAS_CHILD]->(root))\nMATCH (root)-[:HAS_CHILD*]->(leaf:MiniTaxonomyNode)\nWHERE NOT (leaf)-[:HAS_CHILD]->() AND leaf.feature IS NOT NULL\nWITH root, collect(DISTINCT leaf.feature) as all_features\nRETURN root.llm_tag as taxonomy_name,\n       size(all_features) as total_features,\n       all_features[0..8] as sample_features",
        "compact_hierarchy": "\n// Compact hierarchy for: multimodal input and output miio (Screenshot ready)\nMATCH (root:MiniTaxonomyNode {id: 'mini_taxonomy_root_Le Chat by Mistral AI_Le Chat by Mistral AI_llm_clusters_20250912_221556_0ae9cadf_0_c84b0313'})\nWHERE NOT (()-[:HAS_CHILD]->(root))\nOPTIONAL MATCH (root)-[:HAS_CHILD]->(level1:MiniTaxonomyNode)\nOPTIONAL MATCH (level1)-[:HAS_CHILD]->(level2:MiniTaxonomyNode)\nWHERE NOT (level2)-[:HAS_CHILD]->()\nWITH root, level1, collect(level2.feature)[0..3] as level2_sample\nRETURN root.llm_tag as root_tag,\n       level1.feature as level1_feature,\n       level2_sample\nORDER BY level1.feature\nLIMIT 5",
        "leaf_features": "\n// Top 10 leaf features for: multimodal input and output miio\nMATCH (root:MiniTaxonomyNode {id: 'mini_taxonomy_root_Le Chat by Mistral AI_Le Chat by Mistral AI_llm_clusters_20250912_221556_0ae9cadf_0_c84b0313'})\nWHERE NOT (()-[:HAS_CHILD]->(root))\nMATCH (root)-[:HAS_CHILD*]->(leaf:MiniTaxonomyNode)\nWHERE NOT (leaf)-[:HAS_CHILD]->() AND leaf.feature IS NOT NULL\nRETURN root.llm_tag as taxonomy_tag,\n       collect(DISTINCT leaf.feature)[0..10] as top_features,\n       count(DISTINCT leaf) as total_leaf_count",
        "tree_depth": "\n// Tree depth and structure metrics for: multimodal input and output miio\nMATCH (root:MiniTaxonomyNode {id: 'mini_taxonomy_root_Le Chat by Mistral AI_Le Chat by Mistral AI_llm_clusters_20250912_221556_0ae9cadf_0_c84b0313'})\nWHERE NOT (()-[:HAS_CHILD]->(root))\nOPTIONAL MATCH path = (root)-[:HAS_CHILD*]->(leaf)\nWHERE NOT (leaf)-[:HAS_CHILD]->()\nWITH root, \n     max(length(path)) as max_depth,\n     count(DISTINCT leaf) as leaf_count,\n     avg(length(path)) as avg_depth\nRETURN root.llm_tag as taxonomy_tag,\n       max_depth,\n       leaf_count,\n       round(avg_depth, 2) as average_depth",
        "parent_child_relationships": "\n// Parent-child relationships for: multimodal input and output miio\nMATCH (parent:MiniTaxonomyNode)-[:HAS_CHILD]->(child:MiniTaxonomyNode)\nWHERE parent.id = 'mini_taxonomy_root_Le Chat by Mistral AI_Le Chat by Mistral AI_llm_clusters_20250912_221556_0ae9cadf_0_c84b0313' OR \n      (parent)-[:HAS_CHILD*0..]-(:MiniTaxonomyNode {id: 'mini_taxonomy_root_Le Chat by Mistral AI_Le Chat by Mistral AI_llm_clusters_20250912_221556_0ae9cadf_0_c84b0313'})\nRETURN parent.id as parent_id,\n       parent.feature as parent_feature,\n       parent.is_leaf as parent_is_leaf,\n       child.id as child_id,\n       child.feature as child_feature,\n       child.is_leaf as child_is_leaf\nORDER BY parent.feature, child.feature"
      }
    },
    {
      "taxonomy_rank": 11,
      "root_id": "mini_taxonomy_root_Le Chat by Mistral AI_Le Chat by Mistral AI_llm_clusters_20250912_221851_72f190d8_0_d3a71efc",
      "tag": "e-commerce platform",
      "quality_score": 163.0,
      "queries": {
        "screenshot_tree": "\n// Screenshot-friendly tree for: e-commerce platform (Top 10 features only)\nMATCH (root:MiniTaxonomyNode {id: 'mini_taxonomy_root_Le Chat by Mistral AI_Le Chat by Mistral AI_llm_clusters_20250912_221851_72f190d8_0_d3a71efc'})\nWHERE NOT (()-[:HAS_CHILD]->(root))\nOPTIONAL MATCH path = (root)-[:HAS_CHILD*1..3]->(node:MiniTaxonomyNode)\nWITH root, node, path\nORDER BY length(path), node.feature\nWITH root, collect(DISTINCT {\n    feature: node.feature,\n    depth: length(path),\n    is_leaf: NOT (node)-[:HAS_CHILD]->()\n})[0..10] as sample_nodes\nRETURN root.llm_tag as taxonomy_name,\n       root.feature as root_feature,\n       sample_nodes",
        "sample_features": "\n// Sample features for screenshots: e-commerce platform (Max 8 features)\nMATCH (root:MiniTaxonomyNode {id: 'mini_taxonomy_root_Le Chat by Mistral AI_Le Chat by Mistral AI_llm_clusters_20250912_221851_72f190d8_0_d3a71efc'})\nWHERE NOT (()-[:HAS_CHILD]->(root))\nMATCH (root)-[:HAS_CHILD*]->(leaf:MiniTaxonomyNode)\nWHERE NOT (leaf)-[:HAS_CHILD]->() AND leaf.feature IS NOT NULL\nWITH root, collect(DISTINCT leaf.feature) as all_features\nRETURN root.llm_tag as taxonomy_name,\n       size(all_features) as total_features,\n       all_features[0..8] as sample_features",
        "compact_hierarchy": "\n// Compact hierarchy for: e-commerce platform (Screenshot ready)\nMATCH (root:MiniTaxonomyNode {id: 'mini_taxonomy_root_Le Chat by Mistral AI_Le Chat by Mistral AI_llm_clusters_20250912_221851_72f190d8_0_d3a71efc'})\nWHERE NOT (()-[:HAS_CHILD]->(root))\nOPTIONAL MATCH (root)-[:HAS_CHILD]->(level1:MiniTaxonomyNode)\nOPTIONAL MATCH (level1)-[:HAS_CHILD]->(level2:MiniTaxonomyNode)\nWHERE NOT (level2)-[:HAS_CHILD]->()\nWITH root, level1, collect(level2.feature)[0..3] as level2_sample\nRETURN root.llm_tag as root_tag,\n       level1.feature as level1_feature,\n       level2_sample\nORDER BY level1.feature\nLIMIT 5",
        "leaf_features": "\n// Top 10 leaf features for: e-commerce platform\nMATCH (root:MiniTaxonomyNode {id: 'mini_taxonomy_root_Le Chat by Mistral AI_Le Chat by Mistral AI_llm_clusters_20250912_221851_72f190d8_0_d3a71efc'})\nWHERE NOT (()-[:HAS_CHILD]->(root))\nMATCH (root)-[:HAS_CHILD*]->(leaf:MiniTaxonomyNode)\nWHERE NOT (leaf)-[:HAS_CHILD]->() AND leaf.feature IS NOT NULL\nRETURN root.llm_tag as taxonomy_tag,\n       collect(DISTINCT leaf.feature)[0..10] as top_features,\n       count(DISTINCT leaf) as total_leaf_count",
        "tree_depth": "\n// Tree depth and structure metrics for: e-commerce platform\nMATCH (root:MiniTaxonomyNode {id: 'mini_taxonomy_root_Le Chat by Mistral AI_Le Chat by Mistral AI_llm_clusters_20250912_221851_72f190d8_0_d3a71efc'})\nWHERE NOT (()-[:HAS_CHILD]->(root))\nOPTIONAL MATCH path = (root)-[:HAS_CHILD*]->(leaf)\nWHERE NOT (leaf)-[:HAS_CHILD]->()\nWITH root, \n     max(length(path)) as max_depth,\n     count(DISTINCT leaf) as leaf_count,\n     avg(length(path)) as avg_depth\nRETURN root.llm_tag as taxonomy_tag,\n       max_depth,\n       leaf_count,\n       round(avg_depth, 2) as average_depth",
        "parent_child_relationships": "\n// Parent-child relationships for: e-commerce platform\nMATCH (parent:MiniTaxonomyNode)-[:HAS_CHILD]->(child:MiniTaxonomyNode)\nWHERE parent.id = 'mini_taxonomy_root_Le Chat by Mistral AI_Le Chat by Mistral AI_llm_clusters_20250912_221851_72f190d8_0_d3a71efc' OR \n      (parent)-[:HAS_CHILD*0..]-(:MiniTaxonomyNode {id: 'mini_taxonomy_root_Le Chat by Mistral AI_Le Chat by Mistral AI_llm_clusters_20250912_221851_72f190d8_0_d3a71efc'})\nRETURN parent.id as parent_id,\n       parent.feature as parent_feature,\n       parent.is_leaf as parent_is_leaf,\n       child.id as child_id,\n       child.feature as child_feature,\n       child.is_leaf as child_is_leaf\nORDER BY parent.feature, child.feature"
      }
    },
    {
      "taxonomy_rank": 12,
      "root_id": "mini_taxonomy_root_Microsoft Copilot_Microsoft Copilot_llm_clusters_20250913_053908_d79118ef_1_bf16a722",
      "tag": "community",
      "quality_score": 159.0,
      "queries": {
        "screenshot_tree": "\n// Screenshot-friendly tree for: community (Top 10 features only)\nMATCH (root:MiniTaxonomyNode {id: 'mini_taxonomy_root_Microsoft Copilot_Microsoft Copilot_llm_clusters_20250913_053908_d79118ef_1_bf16a722'})\nWHERE NOT (()-[:HAS_CHILD]->(root))\nOPTIONAL MATCH path = (root)-[:HAS_CHILD*1..3]->(node:MiniTaxonomyNode)\nWITH root, node, path\nORDER BY length(path), node.feature\nWITH root, collect(DISTINCT {\n    feature: node.feature,\n    depth: length(path),\n    is_leaf: NOT (node)-[:HAS_CHILD]->()\n})[0..10] as sample_nodes\nRETURN root.llm_tag as taxonomy_name,\n       root.feature as root_feature,\n       sample_nodes",
        "sample_features": "\n// Sample features for screenshots: community (Max 8 features)\nMATCH (root:MiniTaxonomyNode {id: 'mini_taxonomy_root_Microsoft Copilot_Microsoft Copilot_llm_clusters_20250913_053908_d79118ef_1_bf16a722'})\nWHERE NOT (()-[:HAS_CHILD]->(root))\nMATCH (root)-[:HAS_CHILD*]->(leaf:MiniTaxonomyNode)\nWHERE NOT (leaf)-[:HAS_CHILD]->() AND leaf.feature IS NOT NULL\nWITH root, collect(DISTINCT leaf.feature) as all_features\nRETURN root.llm_tag as taxonomy_name,\n       size(all_features) as total_features,\n       all_features[0..8] as sample_features",
        "compact_hierarchy": "\n// Compact hierarchy for: community (Screenshot ready)\nMATCH (root:MiniTaxonomyNode {id: 'mini_taxonomy_root_Microsoft Copilot_Microsoft Copilot_llm_clusters_20250913_053908_d79118ef_1_bf16a722'})\nWHERE NOT (()-[:HAS_CHILD]->(root))\nOPTIONAL MATCH (root)-[:HAS_CHILD]->(level1:MiniTaxonomyNode)\nOPTIONAL MATCH (level1)-[:HAS_CHILD]->(level2:MiniTaxonomyNode)\nWHERE NOT (level2)-[:HAS_CHILD]->()\nWITH root, level1, collect(level2.feature)[0..3] as level2_sample\nRETURN root.llm_tag as root_tag,\n       level1.feature as level1_feature,\n       level2_sample\nORDER BY level1.feature\nLIMIT 5",
        "leaf_features": "\n// Top 10 leaf features for: community\nMATCH (root:MiniTaxonomyNode {id: 'mini_taxonomy_root_Microsoft Copilot_Microsoft Copilot_llm_clusters_20250913_053908_d79118ef_1_bf16a722'})\nWHERE NOT (()-[:HAS_CHILD]->(root))\nMATCH (root)-[:HAS_CHILD*]->(leaf:MiniTaxonomyNode)\nWHERE NOT (leaf)-[:HAS_CHILD]->() AND leaf.feature IS NOT NULL\nRETURN root.llm_tag as taxonomy_tag,\n       collect(DISTINCT leaf.feature)[0..10] as top_features,\n       count(DISTINCT leaf) as total_leaf_count",
        "tree_depth": "\n// Tree depth and structure metrics for: community\nMATCH (root:MiniTaxonomyNode {id: 'mini_taxonomy_root_Microsoft Copilot_Microsoft Copilot_llm_clusters_20250913_053908_d79118ef_1_bf16a722'})\nWHERE NOT (()-[:HAS_CHILD]->(root))\nOPTIONAL MATCH path = (root)-[:HAS_CHILD*]->(leaf)\nWHERE NOT (leaf)-[:HAS_CHILD]->()\nWITH root, \n     max(length(path)) as max_depth,\n     count(DISTINCT leaf) as leaf_count,\n     avg(length(path)) as avg_depth\nRETURN root.llm_tag as taxonomy_tag,\n       max_depth,\n       leaf_count,\n       round(avg_depth, 2) as average_depth",
        "parent_child_relationships": "\n// Parent-child relationships for: community\nMATCH (parent:MiniTaxonomyNode)-[:HAS_CHILD]->(child:MiniTaxonomyNode)\nWHERE parent.id = 'mini_taxonomy_root_Microsoft Copilot_Microsoft Copilot_llm_clusters_20250913_053908_d79118ef_1_bf16a722' OR \n      (parent)-[:HAS_CHILD*0..]-(:MiniTaxonomyNode {id: 'mini_taxonomy_root_Microsoft Copilot_Microsoft Copilot_llm_clusters_20250913_053908_d79118ef_1_bf16a722'})\nRETURN parent.id as parent_id,\n       parent.feature as parent_feature,\n       parent.is_leaf as parent_is_leaf,\n       child.id as child_id,\n       child.feature as child_feature,\n       child.is_leaf as child_is_leaf\nORDER BY parent.feature, child.feature"
      }
    },
    {
      "taxonomy_rank": 13,
      "root_id": "mini_taxonomy_root_Perplexity - Ask Anything_Perplexity - Ask Anything_llm_clusters_20250913_075913_a14fdebd_47_b56fd0d4",
      "tag": "text-based assistance",
      "quality_score": 156.0,
      "queries": {
        "screenshot_tree": "\n// Screenshot-friendly tree for: text-based assistance (Top 10 features only)\nMATCH (root:MiniTaxonomyNode {id: 'mini_taxonomy_root_Perplexity - Ask Anything_Perplexity - Ask Anything_llm_clusters_20250913_075913_a14fdebd_47_b56fd0d4'})\nWHERE NOT (()-[:HAS_CHILD]->(root))\nOPTIONAL MATCH path = (root)-[:HAS_CHILD*1..3]->(node:MiniTaxonomyNode)\nWITH root, node, path\nORDER BY length(path), node.feature\nWITH root, collect(DISTINCT {\n    feature: node.feature,\n    depth: length(path),\n    is_leaf: NOT (node)-[:HAS_CHILD]->()\n})[0..10] as sample_nodes\nRETURN root.llm_tag as taxonomy_name,\n       root.feature as root_feature,\n       sample_nodes",
        "sample_features": "\n// Sample features for screenshots: text-based assistance (Max 8 features)\nMATCH (root:MiniTaxonomyNode {id: 'mini_taxonomy_root_Perplexity - Ask Anything_Perplexity - Ask Anything_llm_clusters_20250913_075913_a14fdebd_47_b56fd0d4'})\nWHERE NOT (()-[:HAS_CHILD]->(root))\nMATCH (root)-[:HAS_CHILD*]->(leaf:MiniTaxonomyNode)\nWHERE NOT (leaf)-[:HAS_CHILD]->() AND leaf.feature IS NOT NULL\nWITH root, collect(DISTINCT leaf.feature) as all_features\nRETURN root.llm_tag as taxonomy_name,\n       size(all_features) as total_features,\n       all_features[0..8] as sample_features",
        "compact_hierarchy": "\n// Compact hierarchy for: text-based assistance (Screenshot ready)\nMATCH (root:MiniTaxonomyNode {id: 'mini_taxonomy_root_Perplexity - Ask Anything_Perplexity - Ask Anything_llm_clusters_20250913_075913_a14fdebd_47_b56fd0d4'})\nWHERE NOT (()-[:HAS_CHILD]->(root))\nOPTIONAL MATCH (root)-[:HAS_CHILD]->(level1:MiniTaxonomyNode)\nOPTIONAL MATCH (level1)-[:HAS_CHILD]->(level2:MiniTaxonomyNode)\nWHERE NOT (level2)-[:HAS_CHILD]->()\nWITH root, level1, collect(level2.feature)[0..3] as level2_sample\nRETURN root.llm_tag as root_tag,\n       level1.feature as level1_feature,\n       level2_sample\nORDER BY level1.feature\nLIMIT 5",
        "leaf_features": "\n// Top 10 leaf features for: text-based assistance\nMATCH (root:MiniTaxonomyNode {id: 'mini_taxonomy_root_Perplexity - Ask Anything_Perplexity - Ask Anything_llm_clusters_20250913_075913_a14fdebd_47_b56fd0d4'})\nWHERE NOT (()-[:HAS_CHILD]->(root))\nMATCH (root)-[:HAS_CHILD*]->(leaf:MiniTaxonomyNode)\nWHERE NOT (leaf)-[:HAS_CHILD]->() AND leaf.feature IS NOT NULL\nRETURN root.llm_tag as taxonomy_tag,\n       collect(DISTINCT leaf.feature)[0..10] as top_features,\n       count(DISTINCT leaf) as total_leaf_count",
        "tree_depth": "\n// Tree depth and structure metrics for: text-based assistance\nMATCH (root:MiniTaxonomyNode {id: 'mini_taxonomy_root_Perplexity - Ask Anything_Perplexity - Ask Anything_llm_clusters_20250913_075913_a14fdebd_47_b56fd0d4'})\nWHERE NOT (()-[:HAS_CHILD]->(root))\nOPTIONAL MATCH path = (root)-[:HAS_CHILD*]->(leaf)\nWHERE NOT (leaf)-[:HAS_CHILD]->()\nWITH root, \n     max(length(path)) as max_depth,\n     count(DISTINCT leaf) as leaf_count,\n     avg(length(path)) as avg_depth\nRETURN root.llm_tag as taxonomy_tag,\n       max_depth,\n       leaf_count,\n       round(avg_depth, 2) as average_depth",
        "parent_child_relationships": "\n// Parent-child relationships for: text-based assistance\nMATCH (parent:MiniTaxonomyNode)-[:HAS_CHILD]->(child:MiniTaxonomyNode)\nWHERE parent.id = 'mini_taxonomy_root_Perplexity - Ask Anything_Perplexity - Ask Anything_llm_clusters_20250913_075913_a14fdebd_47_b56fd0d4' OR \n      (parent)-[:HAS_CHILD*0..]-(:MiniTaxonomyNode {id: 'mini_taxonomy_root_Perplexity - Ask Anything_Perplexity - Ask Anything_llm_clusters_20250913_075913_a14fdebd_47_b56fd0d4'})\nRETURN parent.id as parent_id,\n       parent.feature as parent_feature,\n       parent.is_leaf as parent_is_leaf,\n       child.id as child_id,\n       child.feature as child_feature,\n       child.is_leaf as child_is_leaf\nORDER BY parent.feature, child.feature"
      }
    },
    {
      "taxonomy_rank": 14,
      "root_id": "mini_taxonomy_root_Le Chat by Mistral AI_Le Chat by Mistral AI_llm_clusters_20250912_220411_1223eb27_0_d325ef2d",
      "tag": "multimodal assistance mmaa refers to the application of multiple modes of communication including text voice images and other forms of digital information to support human interaction and facilitate various tasks and activities",
      "quality_score": 155.0,
      "queries": {
        "screenshot_tree": "\n// Screenshot-friendly tree for: multimodal assistance mmaa refers to the application of multiple modes of communication including text voice images and other forms of digital information to support human interaction and facilitate various tasks and activities (Top 10 features only)\nMATCH (root:MiniTaxonomyNode {id: 'mini_taxonomy_root_Le Chat by Mistral AI_Le Chat by Mistral AI_llm_clusters_20250912_220411_1223eb27_0_d325ef2d'})\nWHERE NOT (()-[:HAS_CHILD]->(root))\nOPTIONAL MATCH path = (root)-[:HAS_CHILD*1..3]->(node:MiniTaxonomyNode)\nWITH root, node, path\nORDER BY length(path), node.feature\nWITH root, collect(DISTINCT {\n    feature: node.feature,\n    depth: length(path),\n    is_leaf: NOT (node)-[:HAS_CHILD]->()\n})[0..10] as sample_nodes\nRETURN root.llm_tag as taxonomy_name,\n       root.feature as root_feature,\n       sample_nodes",
        "sample_features": "\n// Sample features for screenshots: multimodal assistance mmaa refers to the application of multiple modes of communication including text voice images and other forms of digital information to support human interaction and facilitate various tasks and activities (Max 8 features)\nMATCH (root:MiniTaxonomyNode {id: 'mini_taxonomy_root_Le Chat by Mistral AI_Le Chat by Mistral AI_llm_clusters_20250912_220411_1223eb27_0_d325ef2d'})\nWHERE NOT (()-[:HAS_CHILD]->(root))\nMATCH (root)-[:HAS_CHILD*]->(leaf:MiniTaxonomyNode)\nWHERE NOT (leaf)-[:HAS_CHILD]->() AND leaf.feature IS NOT NULL\nWITH root, collect(DISTINCT leaf.feature) as all_features\nRETURN root.llm_tag as taxonomy_name,\n       size(all_features) as total_features,\n       all_features[0..8] as sample_features",
        "compact_hierarchy": "\n// Compact hierarchy for: multimodal assistance mmaa refers to the application of multiple modes of communication including text voice images and other forms of digital information to support human interaction and facilitate various tasks and activities (Screenshot ready)\nMATCH (root:MiniTaxonomyNode {id: 'mini_taxonomy_root_Le Chat by Mistral AI_Le Chat by Mistral AI_llm_clusters_20250912_220411_1223eb27_0_d325ef2d'})\nWHERE NOT (()-[:HAS_CHILD]->(root))\nOPTIONAL MATCH (root)-[:HAS_CHILD]->(level1:MiniTaxonomyNode)\nOPTIONAL MATCH (level1)-[:HAS_CHILD]->(level2:MiniTaxonomyNode)\nWHERE NOT (level2)-[:HAS_CHILD]->()\nWITH root, level1, collect(level2.feature)[0..3] as level2_sample\nRETURN root.llm_tag as root_tag,\n       level1.feature as level1_feature,\n       level2_sample\nORDER BY level1.feature\nLIMIT 5",
        "leaf_features": "\n// Top 10 leaf features for: multimodal assistance mmaa refers to the application of multiple modes of communication including text voice images and other forms of digital information to support human interaction and facilitate various tasks and activities\nMATCH (root:MiniTaxonomyNode {id: 'mini_taxonomy_root_Le Chat by Mistral AI_Le Chat by Mistral AI_llm_clusters_20250912_220411_1223eb27_0_d325ef2d'})\nWHERE NOT (()-[:HAS_CHILD]->(root))\nMATCH (root)-[:HAS_CHILD*]->(leaf:MiniTaxonomyNode)\nWHERE NOT (leaf)-[:HAS_CHILD]->() AND leaf.feature IS NOT NULL\nRETURN root.llm_tag as taxonomy_tag,\n       collect(DISTINCT leaf.feature)[0..10] as top_features,\n       count(DISTINCT leaf) as total_leaf_count",
        "tree_depth": "\n// Tree depth and structure metrics for: multimodal assistance mmaa refers to the application of multiple modes of communication including text voice images and other forms of digital information to support human interaction and facilitate various tasks and activities\nMATCH (root:MiniTaxonomyNode {id: 'mini_taxonomy_root_Le Chat by Mistral AI_Le Chat by Mistral AI_llm_clusters_20250912_220411_1223eb27_0_d325ef2d'})\nWHERE NOT (()-[:HAS_CHILD]->(root))\nOPTIONAL MATCH path = (root)-[:HAS_CHILD*]->(leaf)\nWHERE NOT (leaf)-[:HAS_CHILD]->()\nWITH root, \n     max(length(path)) as max_depth,\n     count(DISTINCT leaf) as leaf_count,\n     avg(length(path)) as avg_depth\nRETURN root.llm_tag as taxonomy_tag,\n       max_depth,\n       leaf_count,\n       round(avg_depth, 2) as average_depth",
        "parent_child_relationships": "\n// Parent-child relationships for: multimodal assistance mmaa refers to the application of multiple modes of communication including text voice images and other forms of digital information to support human interaction and facilitate various tasks and activities\nMATCH (parent:MiniTaxonomyNode)-[:HAS_CHILD]->(child:MiniTaxonomyNode)\nWHERE parent.id = 'mini_taxonomy_root_Le Chat by Mistral AI_Le Chat by Mistral AI_llm_clusters_20250912_220411_1223eb27_0_d325ef2d' OR \n      (parent)-[:HAS_CHILD*0..]-(:MiniTaxonomyNode {id: 'mini_taxonomy_root_Le Chat by Mistral AI_Le Chat by Mistral AI_llm_clusters_20250912_220411_1223eb27_0_d325ef2d'})\nRETURN parent.id as parent_id,\n       parent.feature as parent_feature,\n       parent.is_leaf as parent_is_leaf,\n       child.id as child_id,\n       child.feature as child_feature,\n       child.is_leaf as child_is_leaf\nORDER BY parent.feature, child.feature"
      }
    },
    {
      "taxonomy_rank": 15,
      "root_id": "mini_taxonomy_root_Microsoft Copilot_Microsoft Copilot_llm_clusters_20250912_231510_9c40efbe_19_e2d3a96e",
      "tag": "language models",
      "quality_score": 154.0,
      "queries": {
        "screenshot_tree": "\n// Screenshot-friendly tree for: language models (Top 10 features only)\nMATCH (root:MiniTaxonomyNode {id: 'mini_taxonomy_root_Microsoft Copilot_Microsoft Copilot_llm_clusters_20250912_231510_9c40efbe_19_e2d3a96e'})\nWHERE NOT (()-[:HAS_CHILD]->(root))\nOPTIONAL MATCH path = (root)-[:HAS_CHILD*1..3]->(node:MiniTaxonomyNode)\nWITH root, node, path\nORDER BY length(path), node.feature\nWITH root, collect(DISTINCT {\n    feature: node.feature,\n    depth: length(path),\n    is_leaf: NOT (node)-[:HAS_CHILD]->()\n})[0..10] as sample_nodes\nRETURN root.llm_tag as taxonomy_name,\n       root.feature as root_feature,\n       sample_nodes",
        "sample_features": "\n// Sample features for screenshots: language models (Max 8 features)\nMATCH (root:MiniTaxonomyNode {id: 'mini_taxonomy_root_Microsoft Copilot_Microsoft Copilot_llm_clusters_20250912_231510_9c40efbe_19_e2d3a96e'})\nWHERE NOT (()-[:HAS_CHILD]->(root))\nMATCH (root)-[:HAS_CHILD*]->(leaf:MiniTaxonomyNode)\nWHERE NOT (leaf)-[:HAS_CHILD]->() AND leaf.feature IS NOT NULL\nWITH root, collect(DISTINCT leaf.feature) as all_features\nRETURN root.llm_tag as taxonomy_name,\n       size(all_features) as total_features,\n       all_features[0..8] as sample_features",
        "compact_hierarchy": "\n// Compact hierarchy for: language models (Screenshot ready)\nMATCH (root:MiniTaxonomyNode {id: 'mini_taxonomy_root_Microsoft Copilot_Microsoft Copilot_llm_clusters_20250912_231510_9c40efbe_19_e2d3a96e'})\nWHERE NOT (()-[:HAS_CHILD]->(root))\nOPTIONAL MATCH (root)-[:HAS_CHILD]->(level1:MiniTaxonomyNode)\nOPTIONAL MATCH (level1)-[:HAS_CHILD]->(level2:MiniTaxonomyNode)\nWHERE NOT (level2)-[:HAS_CHILD]->()\nWITH root, level1, collect(level2.feature)[0..3] as level2_sample\nRETURN root.llm_tag as root_tag,\n       level1.feature as level1_feature,\n       level2_sample\nORDER BY level1.feature\nLIMIT 5",
        "leaf_features": "\n// Top 10 leaf features for: language models\nMATCH (root:MiniTaxonomyNode {id: 'mini_taxonomy_root_Microsoft Copilot_Microsoft Copilot_llm_clusters_20250912_231510_9c40efbe_19_e2d3a96e'})\nWHERE NOT (()-[:HAS_CHILD]->(root))\nMATCH (root)-[:HAS_CHILD*]->(leaf:MiniTaxonomyNode)\nWHERE NOT (leaf)-[:HAS_CHILD]->() AND leaf.feature IS NOT NULL\nRETURN root.llm_tag as taxonomy_tag,\n       collect(DISTINCT leaf.feature)[0..10] as top_features,\n       count(DISTINCT leaf) as total_leaf_count",
        "tree_depth": "\n// Tree depth and structure metrics for: language models\nMATCH (root:MiniTaxonomyNode {id: 'mini_taxonomy_root_Microsoft Copilot_Microsoft Copilot_llm_clusters_20250912_231510_9c40efbe_19_e2d3a96e'})\nWHERE NOT (()-[:HAS_CHILD]->(root))\nOPTIONAL MATCH path = (root)-[:HAS_CHILD*]->(leaf)\nWHERE NOT (leaf)-[:HAS_CHILD]->()\nWITH root, \n     max(length(path)) as max_depth,\n     count(DISTINCT leaf) as leaf_count,\n     avg(length(path)) as avg_depth\nRETURN root.llm_tag as taxonomy_tag,\n       max_depth,\n       leaf_count,\n       round(avg_depth, 2) as average_depth",
        "parent_child_relationships": "\n// Parent-child relationships for: language models\nMATCH (parent:MiniTaxonomyNode)-[:HAS_CHILD]->(child:MiniTaxonomyNode)\nWHERE parent.id = 'mini_taxonomy_root_Microsoft Copilot_Microsoft Copilot_llm_clusters_20250912_231510_9c40efbe_19_e2d3a96e' OR \n      (parent)-[:HAS_CHILD*0..]-(:MiniTaxonomyNode {id: 'mini_taxonomy_root_Microsoft Copilot_Microsoft Copilot_llm_clusters_20250912_231510_9c40efbe_19_e2d3a96e'})\nRETURN parent.id as parent_id,\n       parent.feature as parent_feature,\n       parent.is_leaf as parent_is_leaf,\n       child.id as child_id,\n       child.feature as child_feature,\n       child.is_leaf as child_is_leaf\nORDER BY parent.feature, child.feature"
      }
    },
    {
      "taxonomy_rank": 16,
      "root_id": "mini_taxonomy_root_Claude by Anthropic_Claude by Anthropic_llm_clusters_20250911_223214_7655b06f_8_c1eae1bc",
      "tag": "ai-assisted communication ac",
      "quality_score": 152.0,
      "queries": {
        "screenshot_tree": "\n// Screenshot-friendly tree for: ai-assisted communication ac (Top 10 features only)\nMATCH (root:MiniTaxonomyNode {id: 'mini_taxonomy_root_Claude by Anthropic_Claude by Anthropic_llm_clusters_20250911_223214_7655b06f_8_c1eae1bc'})\nWHERE NOT (()-[:HAS_CHILD]->(root))\nOPTIONAL MATCH path = (root)-[:HAS_CHILD*1..3]->(node:MiniTaxonomyNode)\nWITH root, node, path\nORDER BY length(path), node.feature\nWITH root, collect(DISTINCT {\n    feature: node.feature,\n    depth: length(path),\n    is_leaf: NOT (node)-[:HAS_CHILD]->()\n})[0..10] as sample_nodes\nRETURN root.llm_tag as taxonomy_name,\n       root.feature as root_feature,\n       sample_nodes",
        "sample_features": "\n// Sample features for screenshots: ai-assisted communication ac (Max 8 features)\nMATCH (root:MiniTaxonomyNode {id: 'mini_taxonomy_root_Claude by Anthropic_Claude by Anthropic_llm_clusters_20250911_223214_7655b06f_8_c1eae1bc'})\nWHERE NOT (()-[:HAS_CHILD]->(root))\nMATCH (root)-[:HAS_CHILD*]->(leaf:MiniTaxonomyNode)\nWHERE NOT (leaf)-[:HAS_CHILD]->() AND leaf.feature IS NOT NULL\nWITH root, collect(DISTINCT leaf.feature) as all_features\nRETURN root.llm_tag as taxonomy_name,\n       size(all_features) as total_features,\n       all_features[0..8] as sample_features",
        "compact_hierarchy": "\n// Compact hierarchy for: ai-assisted communication ac (Screenshot ready)\nMATCH (root:MiniTaxonomyNode {id: 'mini_taxonomy_root_Claude by Anthropic_Claude by Anthropic_llm_clusters_20250911_223214_7655b06f_8_c1eae1bc'})\nWHERE NOT (()-[:HAS_CHILD]->(root))\nOPTIONAL MATCH (root)-[:HAS_CHILD]->(level1:MiniTaxonomyNode)\nOPTIONAL MATCH (level1)-[:HAS_CHILD]->(level2:MiniTaxonomyNode)\nWHERE NOT (level2)-[:HAS_CHILD]->()\nWITH root, level1, collect(level2.feature)[0..3] as level2_sample\nRETURN root.llm_tag as root_tag,\n       level1.feature as level1_feature,\n       level2_sample\nORDER BY level1.feature\nLIMIT 5",
        "leaf_features": "\n// Top 10 leaf features for: ai-assisted communication ac\nMATCH (root:MiniTaxonomyNode {id: 'mini_taxonomy_root_Claude by Anthropic_Claude by Anthropic_llm_clusters_20250911_223214_7655b06f_8_c1eae1bc'})\nWHERE NOT (()-[:HAS_CHILD]->(root))\nMATCH (root)-[:HAS_CHILD*]->(leaf:MiniTaxonomyNode)\nWHERE NOT (leaf)-[:HAS_CHILD]->() AND leaf.feature IS NOT NULL\nRETURN root.llm_tag as taxonomy_tag,\n       collect(DISTINCT leaf.feature)[0..10] as top_features,\n       count(DISTINCT leaf) as total_leaf_count",
        "tree_depth": "\n// Tree depth and structure metrics for: ai-assisted communication ac\nMATCH (root:MiniTaxonomyNode {id: 'mini_taxonomy_root_Claude by Anthropic_Claude by Anthropic_llm_clusters_20250911_223214_7655b06f_8_c1eae1bc'})\nWHERE NOT (()-[:HAS_CHILD]->(root))\nOPTIONAL MATCH path = (root)-[:HAS_CHILD*]->(leaf)\nWHERE NOT (leaf)-[:HAS_CHILD]->()\nWITH root, \n     max(length(path)) as max_depth,\n     count(DISTINCT leaf) as leaf_count,\n     avg(length(path)) as avg_depth\nRETURN root.llm_tag as taxonomy_tag,\n       max_depth,\n       leaf_count,\n       round(avg_depth, 2) as average_depth",
        "parent_child_relationships": "\n// Parent-child relationships for: ai-assisted communication ac\nMATCH (parent:MiniTaxonomyNode)-[:HAS_CHILD]->(child:MiniTaxonomyNode)\nWHERE parent.id = 'mini_taxonomy_root_Claude by Anthropic_Claude by Anthropic_llm_clusters_20250911_223214_7655b06f_8_c1eae1bc' OR \n      (parent)-[:HAS_CHILD*0..]-(:MiniTaxonomyNode {id: 'mini_taxonomy_root_Claude by Anthropic_Claude by Anthropic_llm_clusters_20250911_223214_7655b06f_8_c1eae1bc'})\nRETURN parent.id as parent_id,\n       parent.feature as parent_feature,\n       parent.is_leaf as parent_is_leaf,\n       child.id as child_id,\n       child.feature as child_feature,\n       child.is_leaf as child_is_leaf\nORDER BY parent.feature, child.feature"
      }
    },
    {
      "taxonomy_rank": 17,
      "root_id": "mini_taxonomy_root_DeepSeek - AI Assistant_DeepSeek - AI Assistant_llm_clusters_20250911_230214_b7d66724_7_858f1296",
      "tag": "tech support",
      "quality_score": 152.0,
      "queries": {
        "screenshot_tree": "\n// Screenshot-friendly tree for: tech support (Top 10 features only)\nMATCH (root:MiniTaxonomyNode {id: 'mini_taxonomy_root_DeepSeek - AI Assistant_DeepSeek - AI Assistant_llm_clusters_20250911_230214_b7d66724_7_858f1296'})\nWHERE NOT (()-[:HAS_CHILD]->(root))\nOPTIONAL MATCH path = (root)-[:HAS_CHILD*1..3]->(node:MiniTaxonomyNode)\nWITH root, node, path\nORDER BY length(path), node.feature\nWITH root, collect(DISTINCT {\n    feature: node.feature,\n    depth: length(path),\n    is_leaf: NOT (node)-[:HAS_CHILD]->()\n})[0..10] as sample_nodes\nRETURN root.llm_tag as taxonomy_name,\n       root.feature as root_feature,\n       sample_nodes",
        "sample_features": "\n// Sample features for screenshots: tech support (Max 8 features)\nMATCH (root:MiniTaxonomyNode {id: 'mini_taxonomy_root_DeepSeek - AI Assistant_DeepSeek - AI Assistant_llm_clusters_20250911_230214_b7d66724_7_858f1296'})\nWHERE NOT (()-[:HAS_CHILD]->(root))\nMATCH (root)-[:HAS_CHILD*]->(leaf:MiniTaxonomyNode)\nWHERE NOT (leaf)-[:HAS_CHILD]->() AND leaf.feature IS NOT NULL\nWITH root, collect(DISTINCT leaf.feature) as all_features\nRETURN root.llm_tag as taxonomy_name,\n       size(all_features) as total_features,\n       all_features[0..8] as sample_features",
        "compact_hierarchy": "\n// Compact hierarchy for: tech support (Screenshot ready)\nMATCH (root:MiniTaxonomyNode {id: 'mini_taxonomy_root_DeepSeek - AI Assistant_DeepSeek - AI Assistant_llm_clusters_20250911_230214_b7d66724_7_858f1296'})\nWHERE NOT (()-[:HAS_CHILD]->(root))\nOPTIONAL MATCH (root)-[:HAS_CHILD]->(level1:MiniTaxonomyNode)\nOPTIONAL MATCH (level1)-[:HAS_CHILD]->(level2:MiniTaxonomyNode)\nWHERE NOT (level2)-[:HAS_CHILD]->()\nWITH root, level1, collect(level2.feature)[0..3] as level2_sample\nRETURN root.llm_tag as root_tag,\n       level1.feature as level1_feature,\n       level2_sample\nORDER BY level1.feature\nLIMIT 5",
        "leaf_features": "\n// Top 10 leaf features for: tech support\nMATCH (root:MiniTaxonomyNode {id: 'mini_taxonomy_root_DeepSeek - AI Assistant_DeepSeek - AI Assistant_llm_clusters_20250911_230214_b7d66724_7_858f1296'})\nWHERE NOT (()-[:HAS_CHILD]->(root))\nMATCH (root)-[:HAS_CHILD*]->(leaf:MiniTaxonomyNode)\nWHERE NOT (leaf)-[:HAS_CHILD]->() AND leaf.feature IS NOT NULL\nRETURN root.llm_tag as taxonomy_tag,\n       collect(DISTINCT leaf.feature)[0..10] as top_features,\n       count(DISTINCT leaf) as total_leaf_count",
        "tree_depth": "\n// Tree depth and structure metrics for: tech support\nMATCH (root:MiniTaxonomyNode {id: 'mini_taxonomy_root_DeepSeek - AI Assistant_DeepSeek - AI Assistant_llm_clusters_20250911_230214_b7d66724_7_858f1296'})\nWHERE NOT (()-[:HAS_CHILD]->(root))\nOPTIONAL MATCH path = (root)-[:HAS_CHILD*]->(leaf)\nWHERE NOT (leaf)-[:HAS_CHILD]->()\nWITH root, \n     max(length(path)) as max_depth,\n     count(DISTINCT leaf) as leaf_count,\n     avg(length(path)) as avg_depth\nRETURN root.llm_tag as taxonomy_tag,\n       max_depth,\n       leaf_count,\n       round(avg_depth, 2) as average_depth",
        "parent_child_relationships": "\n// Parent-child relationships for: tech support\nMATCH (parent:MiniTaxonomyNode)-[:HAS_CHILD]->(child:MiniTaxonomyNode)\nWHERE parent.id = 'mini_taxonomy_root_DeepSeek - AI Assistant_DeepSeek - AI Assistant_llm_clusters_20250911_230214_b7d66724_7_858f1296' OR \n      (parent)-[:HAS_CHILD*0..]-(:MiniTaxonomyNode {id: 'mini_taxonomy_root_DeepSeek - AI Assistant_DeepSeek - AI Assistant_llm_clusters_20250911_230214_b7d66724_7_858f1296'})\nRETURN parent.id as parent_id,\n       parent.feature as parent_feature,\n       parent.is_leaf as parent_is_leaf,\n       child.id as child_id,\n       child.feature as child_feature,\n       child.is_leaf as child_is_leaf\nORDER BY parent.feature, child.feature"
      }
    },
    {
      "taxonomy_rank": 18,
      "root_id": "mini_taxonomy_root_ChatGPT_ChatGPT_llm_clusters_20250911_154309_2ee30592_3_f1e5fb49",
      "tag": "language identification",
      "quality_score": 151.0,
      "queries": {
        "screenshot_tree": "\n// Screenshot-friendly tree for: language identification (Top 10 features only)\nMATCH (root:MiniTaxonomyNode {id: 'mini_taxonomy_root_ChatGPT_ChatGPT_llm_clusters_20250911_154309_2ee30592_3_f1e5fb49'})\nWHERE NOT (()-[:HAS_CHILD]->(root))\nOPTIONAL MATCH path = (root)-[:HAS_CHILD*1..3]->(node:MiniTaxonomyNode)\nWITH root, node, path\nORDER BY length(path), node.feature\nWITH root, collect(DISTINCT {\n    feature: node.feature,\n    depth: length(path),\n    is_leaf: NOT (node)-[:HAS_CHILD]->()\n})[0..10] as sample_nodes\nRETURN root.llm_tag as taxonomy_name,\n       root.feature as root_feature,\n       sample_nodes",
        "sample_features": "\n// Sample features for screenshots: language identification (Max 8 features)\nMATCH (root:MiniTaxonomyNode {id: 'mini_taxonomy_root_ChatGPT_ChatGPT_llm_clusters_20250911_154309_2ee30592_3_f1e5fb49'})\nWHERE NOT (()-[:HAS_CHILD]->(root))\nMATCH (root)-[:HAS_CHILD*]->(leaf:MiniTaxonomyNode)\nWHERE NOT (leaf)-[:HAS_CHILD]->() AND leaf.feature IS NOT NULL\nWITH root, collect(DISTINCT leaf.feature) as all_features\nRETURN root.llm_tag as taxonomy_name,\n       size(all_features) as total_features,\n       all_features[0..8] as sample_features",
        "compact_hierarchy": "\n// Compact hierarchy for: language identification (Screenshot ready)\nMATCH (root:MiniTaxonomyNode {id: 'mini_taxonomy_root_ChatGPT_ChatGPT_llm_clusters_20250911_154309_2ee30592_3_f1e5fb49'})\nWHERE NOT (()-[:HAS_CHILD]->(root))\nOPTIONAL MATCH (root)-[:HAS_CHILD]->(level1:MiniTaxonomyNode)\nOPTIONAL MATCH (level1)-[:HAS_CHILD]->(level2:MiniTaxonomyNode)\nWHERE NOT (level2)-[:HAS_CHILD]->()\nWITH root, level1, collect(level2.feature)[0..3] as level2_sample\nRETURN root.llm_tag as root_tag,\n       level1.feature as level1_feature,\n       level2_sample\nORDER BY level1.feature\nLIMIT 5",
        "leaf_features": "\n// Top 10 leaf features for: language identification\nMATCH (root:MiniTaxonomyNode {id: 'mini_taxonomy_root_ChatGPT_ChatGPT_llm_clusters_20250911_154309_2ee30592_3_f1e5fb49'})\nWHERE NOT (()-[:HAS_CHILD]->(root))\nMATCH (root)-[:HAS_CHILD*]->(leaf:MiniTaxonomyNode)\nWHERE NOT (leaf)-[:HAS_CHILD]->() AND leaf.feature IS NOT NULL\nRETURN root.llm_tag as taxonomy_tag,\n       collect(DISTINCT leaf.feature)[0..10] as top_features,\n       count(DISTINCT leaf) as total_leaf_count",
        "tree_depth": "\n// Tree depth and structure metrics for: language identification\nMATCH (root:MiniTaxonomyNode {id: 'mini_taxonomy_root_ChatGPT_ChatGPT_llm_clusters_20250911_154309_2ee30592_3_f1e5fb49'})\nWHERE NOT (()-[:HAS_CHILD]->(root))\nOPTIONAL MATCH path = (root)-[:HAS_CHILD*]->(leaf)\nWHERE NOT (leaf)-[:HAS_CHILD]->()\nWITH root, \n     max(length(path)) as max_depth,\n     count(DISTINCT leaf) as leaf_count,\n     avg(length(path)) as avg_depth\nRETURN root.llm_tag as taxonomy_tag,\n       max_depth,\n       leaf_count,\n       round(avg_depth, 2) as average_depth",
        "parent_child_relationships": "\n// Parent-child relationships for: language identification\nMATCH (parent:MiniTaxonomyNode)-[:HAS_CHILD]->(child:MiniTaxonomyNode)\nWHERE parent.id = 'mini_taxonomy_root_ChatGPT_ChatGPT_llm_clusters_20250911_154309_2ee30592_3_f1e5fb49' OR \n      (parent)-[:HAS_CHILD*0..]-(:MiniTaxonomyNode {id: 'mini_taxonomy_root_ChatGPT_ChatGPT_llm_clusters_20250911_154309_2ee30592_3_f1e5fb49'})\nRETURN parent.id as parent_id,\n       parent.feature as parent_feature,\n       parent.is_leaf as parent_is_leaf,\n       child.id as child_id,\n       child.feature as child_feature,\n       child.is_leaf as child_is_leaf\nORDER BY parent.feature, child.feature"
      }
    },
    {
      "taxonomy_rank": 19,
      "root_id": "mini_taxonomy_root_Claude by Anthropic_Claude by Anthropic_llm_clusters_20250911_221849_b187de02_5_8a9dffea",
      "tag": "communication",
      "quality_score": 151.0,
      "queries": {
        "screenshot_tree": "\n// Screenshot-friendly tree for: communication (Top 10 features only)\nMATCH (root:MiniTaxonomyNode {id: 'mini_taxonomy_root_Claude by Anthropic_Claude by Anthropic_llm_clusters_20250911_221849_b187de02_5_8a9dffea'})\nWHERE NOT (()-[:HAS_CHILD]->(root))\nOPTIONAL MATCH path = (root)-[:HAS_CHILD*1..3]->(node:MiniTaxonomyNode)\nWITH root, node, path\nORDER BY length(path), node.feature\nWITH root, collect(DISTINCT {\n    feature: node.feature,\n    depth: length(path),\n    is_leaf: NOT (node)-[:HAS_CHILD]->()\n})[0..10] as sample_nodes\nRETURN root.llm_tag as taxonomy_name,\n       root.feature as root_feature,\n       sample_nodes",
        "sample_features": "\n// Sample features for screenshots: communication (Max 8 features)\nMATCH (root:MiniTaxonomyNode {id: 'mini_taxonomy_root_Claude by Anthropic_Claude by Anthropic_llm_clusters_20250911_221849_b187de02_5_8a9dffea'})\nWHERE NOT (()-[:HAS_CHILD]->(root))\nMATCH (root)-[:HAS_CHILD*]->(leaf:MiniTaxonomyNode)\nWHERE NOT (leaf)-[:HAS_CHILD]->() AND leaf.feature IS NOT NULL\nWITH root, collect(DISTINCT leaf.feature) as all_features\nRETURN root.llm_tag as taxonomy_name,\n       size(all_features) as total_features,\n       all_features[0..8] as sample_features",
        "compact_hierarchy": "\n// Compact hierarchy for: communication (Screenshot ready)\nMATCH (root:MiniTaxonomyNode {id: 'mini_taxonomy_root_Claude by Anthropic_Claude by Anthropic_llm_clusters_20250911_221849_b187de02_5_8a9dffea'})\nWHERE NOT (()-[:HAS_CHILD]->(root))\nOPTIONAL MATCH (root)-[:HAS_CHILD]->(level1:MiniTaxonomyNode)\nOPTIONAL MATCH (level1)-[:HAS_CHILD]->(level2:MiniTaxonomyNode)\nWHERE NOT (level2)-[:HAS_CHILD]->()\nWITH root, level1, collect(level2.feature)[0..3] as level2_sample\nRETURN root.llm_tag as root_tag,\n       level1.feature as level1_feature,\n       level2_sample\nORDER BY level1.feature\nLIMIT 5",
        "leaf_features": "\n// Top 10 leaf features for: communication\nMATCH (root:MiniTaxonomyNode {id: 'mini_taxonomy_root_Claude by Anthropic_Claude by Anthropic_llm_clusters_20250911_221849_b187de02_5_8a9dffea'})\nWHERE NOT (()-[:HAS_CHILD]->(root))\nMATCH (root)-[:HAS_CHILD*]->(leaf:MiniTaxonomyNode)\nWHERE NOT (leaf)-[:HAS_CHILD]->() AND leaf.feature IS NOT NULL\nRETURN root.llm_tag as taxonomy_tag,\n       collect(DISTINCT leaf.feature)[0..10] as top_features,\n       count(DISTINCT leaf) as total_leaf_count",
        "tree_depth": "\n// Tree depth and structure metrics for: communication\nMATCH (root:MiniTaxonomyNode {id: 'mini_taxonomy_root_Claude by Anthropic_Claude by Anthropic_llm_clusters_20250911_221849_b187de02_5_8a9dffea'})\nWHERE NOT (()-[:HAS_CHILD]->(root))\nOPTIONAL MATCH path = (root)-[:HAS_CHILD*]->(leaf)\nWHERE NOT (leaf)-[:HAS_CHILD]->()\nWITH root, \n     max(length(path)) as max_depth,\n     count(DISTINCT leaf) as leaf_count,\n     avg(length(path)) as avg_depth\nRETURN root.llm_tag as taxonomy_tag,\n       max_depth,\n       leaf_count,\n       round(avg_depth, 2) as average_depth",
        "parent_child_relationships": "\n// Parent-child relationships for: communication\nMATCH (parent:MiniTaxonomyNode)-[:HAS_CHILD]->(child:MiniTaxonomyNode)\nWHERE parent.id = 'mini_taxonomy_root_Claude by Anthropic_Claude by Anthropic_llm_clusters_20250911_221849_b187de02_5_8a9dffea' OR \n      (parent)-[:HAS_CHILD*0..]-(:MiniTaxonomyNode {id: 'mini_taxonomy_root_Claude by Anthropic_Claude by Anthropic_llm_clusters_20250911_221849_b187de02_5_8a9dffea'})\nRETURN parent.id as parent_id,\n       parent.feature as parent_feature,\n       parent.is_leaf as parent_is_leaf,\n       child.id as child_id,\n       child.feature as child_feature,\n       child.is_leaf as child_is_leaf\nORDER BY parent.feature, child.feature"
      }
    },
    {
      "taxonomy_rank": 20,
      "root_id": "mini_taxonomy_root_ChatGPT_ChatGPT_llm_clusters_20250910_211317_7446ddbb_0_d4cc3d46",
      "tag": "voice interaction vi",
      "quality_score": 150.0,
      "queries": {
        "screenshot_tree": "\n// Screenshot-friendly tree for: voice interaction vi (Top 10 features only)\nMATCH (root:MiniTaxonomyNode {id: 'mini_taxonomy_root_ChatGPT_ChatGPT_llm_clusters_20250910_211317_7446ddbb_0_d4cc3d46'})\nWHERE NOT (()-[:HAS_CHILD]->(root))\nOPTIONAL MATCH path = (root)-[:HAS_CHILD*1..3]->(node:MiniTaxonomyNode)\nWITH root, node, path\nORDER BY length(path), node.feature\nWITH root, collect(DISTINCT {\n    feature: node.feature,\n    depth: length(path),\n    is_leaf: NOT (node)-[:HAS_CHILD]->()\n})[0..10] as sample_nodes\nRETURN root.llm_tag as taxonomy_name,\n       root.feature as root_feature,\n       sample_nodes",
        "sample_features": "\n// Sample features for screenshots: voice interaction vi (Max 8 features)\nMATCH (root:MiniTaxonomyNode {id: 'mini_taxonomy_root_ChatGPT_ChatGPT_llm_clusters_20250910_211317_7446ddbb_0_d4cc3d46'})\nWHERE NOT (()-[:HAS_CHILD]->(root))\nMATCH (root)-[:HAS_CHILD*]->(leaf:MiniTaxonomyNode)\nWHERE NOT (leaf)-[:HAS_CHILD]->() AND leaf.feature IS NOT NULL\nWITH root, collect(DISTINCT leaf.feature) as all_features\nRETURN root.llm_tag as taxonomy_name,\n       size(all_features) as total_features,\n       all_features[0..8] as sample_features",
        "compact_hierarchy": "\n// Compact hierarchy for: voice interaction vi (Screenshot ready)\nMATCH (root:MiniTaxonomyNode {id: 'mini_taxonomy_root_ChatGPT_ChatGPT_llm_clusters_20250910_211317_7446ddbb_0_d4cc3d46'})\nWHERE NOT (()-[:HAS_CHILD]->(root))\nOPTIONAL MATCH (root)-[:HAS_CHILD]->(level1:MiniTaxonomyNode)\nOPTIONAL MATCH (level1)-[:HAS_CHILD]->(level2:MiniTaxonomyNode)\nWHERE NOT (level2)-[:HAS_CHILD]->()\nWITH root, level1, collect(level2.feature)[0..3] as level2_sample\nRETURN root.llm_tag as root_tag,\n       level1.feature as level1_feature,\n       level2_sample\nORDER BY level1.feature\nLIMIT 5",
        "leaf_features": "\n// Top 10 leaf features for: voice interaction vi\nMATCH (root:MiniTaxonomyNode {id: 'mini_taxonomy_root_ChatGPT_ChatGPT_llm_clusters_20250910_211317_7446ddbb_0_d4cc3d46'})\nWHERE NOT (()-[:HAS_CHILD]->(root))\nMATCH (root)-[:HAS_CHILD*]->(leaf:MiniTaxonomyNode)\nWHERE NOT (leaf)-[:HAS_CHILD]->() AND leaf.feature IS NOT NULL\nRETURN root.llm_tag as taxonomy_tag,\n       collect(DISTINCT leaf.feature)[0..10] as top_features,\n       count(DISTINCT leaf) as total_leaf_count",
        "tree_depth": "\n// Tree depth and structure metrics for: voice interaction vi\nMATCH (root:MiniTaxonomyNode {id: 'mini_taxonomy_root_ChatGPT_ChatGPT_llm_clusters_20250910_211317_7446ddbb_0_d4cc3d46'})\nWHERE NOT (()-[:HAS_CHILD]->(root))\nOPTIONAL MATCH path = (root)-[:HAS_CHILD*]->(leaf)\nWHERE NOT (leaf)-[:HAS_CHILD]->()\nWITH root, \n     max(length(path)) as max_depth,\n     count(DISTINCT leaf) as leaf_count,\n     avg(length(path)) as avg_depth\nRETURN root.llm_tag as taxonomy_tag,\n       max_depth,\n       leaf_count,\n       round(avg_depth, 2) as average_depth",
        "parent_child_relationships": "\n// Parent-child relationships for: voice interaction vi\nMATCH (parent:MiniTaxonomyNode)-[:HAS_CHILD]->(child:MiniTaxonomyNode)\nWHERE parent.id = 'mini_taxonomy_root_ChatGPT_ChatGPT_llm_clusters_20250910_211317_7446ddbb_0_d4cc3d46' OR \n      (parent)-[:HAS_CHILD*0..]-(:MiniTaxonomyNode {id: 'mini_taxonomy_root_ChatGPT_ChatGPT_llm_clusters_20250910_211317_7446ddbb_0_d4cc3d46'})\nRETURN parent.id as parent_id,\n       parent.feature as parent_feature,\n       parent.is_leaf as parent_is_leaf,\n       child.id as child_id,\n       child.feature as child_feature,\n       child.is_leaf as child_is_leaf\nORDER BY parent.feature, child.feature"
      }
    }
  ],
  "batch_queries": {
    "all_selected_taxonomies": "\n// All selected taxonomies overview\nMATCH (root:MiniTaxonomyNode)\nWHERE root.id IN ['mini_taxonomy_root_Claude by Anthropic_Claude by Anthropic_llm_clusters_20250910_112014_7229c851_0_eebb1846', 'mini_taxonomy_root_Le Chat by Mistral AI_Le Chat by Mistral AI_llm_clusters_20250912_220709_cf0221ab_0_19d1b8db', 'mini_taxonomy_root_Le Chat by Mistral AI_Le Chat by Mistral AI_llm_clusters_20250912_221350_0af95778_0_d4115af6', 'mini_taxonomy_root_Le Chat by Mistral AI_Le Chat by Mistral AI_llm_clusters_20250912_222145_775e88ad_0_050d6dcf', 'mini_taxonomy_root_Le Chat by Mistral AI_Le Chat by Mistral AI_llm_clusters_20250912_220118_afdd25e8_0_cfa6a4db', 'mini_taxonomy_root_Le Chat by Mistral AI_Le Chat by Mistral AI_llm_clusters_20250912_220459_0d41558a_0_6d1d4ef6', 'mini_taxonomy_root_Le Chat by Mistral AI_Le Chat by Mistral AI_llm_clusters_20250912_221003_cb74ad37_0_5c93bede', 'mini_taxonomy_root_Le Chat by Mistral AI_Le Chat by Mistral AI_llm_clusters_20250912_221055_85c56ece_0_7a0f9a5a', 'mini_taxonomy_root_Le Chat by Mistral AI_Le Chat by Mistral AI_llm_clusters_20250912_221143_640b4f34_0_f683a7d0', 'mini_taxonomy_root_Le Chat by Mistral AI_Le Chat by Mistral AI_llm_clusters_20250912_221556_0ae9cadf_0_c84b0313', 'mini_taxonomy_root_Le Chat by Mistral AI_Le Chat by Mistral AI_llm_clusters_20250912_221851_72f190d8_0_d3a71efc', 'mini_taxonomy_root_Microsoft Copilot_Microsoft Copilot_llm_clusters_20250913_053908_d79118ef_1_bf16a722', 'mini_taxonomy_root_Perplexity - Ask Anything_Perplexity - Ask Anything_llm_clusters_20250913_075913_a14fdebd_47_b56fd0d4', 'mini_taxonomy_root_Le Chat by Mistral AI_Le Chat by Mistral AI_llm_clusters_20250912_220411_1223eb27_0_d325ef2d', 'mini_taxonomy_root_Microsoft Copilot_Microsoft Copilot_llm_clusters_20250912_231510_9c40efbe_19_e2d3a96e', 'mini_taxonomy_root_Claude by Anthropic_Claude by Anthropic_llm_clusters_20250911_223214_7655b06f_8_c1eae1bc', 'mini_taxonomy_root_DeepSeek - AI Assistant_DeepSeek - AI Assistant_llm_clusters_20250911_230214_b7d66724_7_858f1296', 'mini_taxonomy_root_ChatGPT_ChatGPT_llm_clusters_20250911_154309_2ee30592_3_f1e5fb49', 'mini_taxonomy_root_Claude by Anthropic_Claude by Anthropic_llm_clusters_20250911_221849_b187de02_5_8a9dffea', 'mini_taxonomy_root_ChatGPT_ChatGPT_llm_clusters_20250910_211317_7446ddbb_0_d4cc3d46'] AND NOT (()-[:HAS_CHILD]->(root))\nOPTIONAL MATCH (root)-[:HAS_CHILD*]->(leaf:MiniTaxonomyNode)\nWHERE NOT (leaf)-[:HAS_CHILD]->()\nWITH root,\n     count(DISTINCT leaf) as leaf_count,\n     collect(DISTINCT leaf.feature) as leaf_features\nOPTIONAL MATCH path = (root)-[:HAS_CHILD*]->(descendant)\nWITH root, leaf_count, leaf_features,\n     max(length(path)) as max_depth\nRETURN root.id as root_id,\n       root.llm_tag as tag,\n       root.session_id as session_id,\n       max_depth as depth,\n       leaf_count as leaves,\n       leaf_features\nORDER BY root.llm_tag",
    "feature_overlap_analysis": "\n// Feature overlap analysis between selected taxonomies\nMATCH (root1:MiniTaxonomyNode)-[:HAS_CHILD*]->(leaf1:MiniTaxonomyNode)\nWHERE root1.id IN ['mini_taxonomy_root_Claude by Anthropic_Claude by Anthropic_llm_clusters_20250910_112014_7229c851_0_eebb1846', 'mini_taxonomy_root_Le Chat by Mistral AI_Le Chat by Mistral AI_llm_clusters_20250912_220709_cf0221ab_0_19d1b8db', 'mini_taxonomy_root_Le Chat by Mistral AI_Le Chat by Mistral AI_llm_clusters_20250912_221350_0af95778_0_d4115af6', 'mini_taxonomy_root_Le Chat by Mistral AI_Le Chat by Mistral AI_llm_clusters_20250912_222145_775e88ad_0_050d6dcf', 'mini_taxonomy_root_Le Chat by Mistral AI_Le Chat by Mistral AI_llm_clusters_20250912_220118_afdd25e8_0_cfa6a4db', 'mini_taxonomy_root_Le Chat by Mistral AI_Le Chat by Mistral AI_llm_clusters_20250912_220459_0d41558a_0_6d1d4ef6', 'mini_taxonomy_root_Le Chat by Mistral AI_Le Chat by Mistral AI_llm_clusters_20250912_221003_cb74ad37_0_5c93bede', 'mini_taxonomy_root_Le Chat by Mistral AI_Le Chat by Mistral AI_llm_clusters_20250912_221055_85c56ece_0_7a0f9a5a', 'mini_taxonomy_root_Le Chat by Mistral AI_Le Chat by Mistral AI_llm_clusters_20250912_221143_640b4f34_0_f683a7d0', 'mini_taxonomy_root_Le Chat by Mistral AI_Le Chat by Mistral AI_llm_clusters_20250912_221556_0ae9cadf_0_c84b0313', 'mini_taxonomy_root_Le Chat by Mistral AI_Le Chat by Mistral AI_llm_clusters_20250912_221851_72f190d8_0_d3a71efc', 'mini_taxonomy_root_Microsoft Copilot_Microsoft Copilot_llm_clusters_20250913_053908_d79118ef_1_bf16a722', 'mini_taxonomy_root_Perplexity - Ask Anything_Perplexity - Ask Anything_llm_clusters_20250913_075913_a14fdebd_47_b56fd0d4', 'mini_taxonomy_root_Le Chat by Mistral AI_Le Chat by Mistral AI_llm_clusters_20250912_220411_1223eb27_0_d325ef2d', 'mini_taxonomy_root_Microsoft Copilot_Microsoft Copilot_llm_clusters_20250912_231510_9c40efbe_19_e2d3a96e', 'mini_taxonomy_root_Claude by Anthropic_Claude by Anthropic_llm_clusters_20250911_223214_7655b06f_8_c1eae1bc', 'mini_taxonomy_root_DeepSeek - AI Assistant_DeepSeek - AI Assistant_llm_clusters_20250911_230214_b7d66724_7_858f1296', 'mini_taxonomy_root_ChatGPT_ChatGPT_llm_clusters_20250911_154309_2ee30592_3_f1e5fb49', 'mini_taxonomy_root_Claude by Anthropic_Claude by Anthropic_llm_clusters_20250911_221849_b187de02_5_8a9dffea', 'mini_taxonomy_root_ChatGPT_ChatGPT_llm_clusters_20250910_211317_7446ddbb_0_d4cc3d46'] AND NOT (()-[:HAS_CHILD]->(root1)) AND NOT (leaf1)-[:HAS_CHILD]->()\nMATCH (root2:MiniTaxonomyNode)-[:HAS_CHILD*]->(leaf2:MiniTaxonomyNode)\nWHERE root2.id IN ['mini_taxonomy_root_Claude by Anthropic_Claude by Anthropic_llm_clusters_20250910_112014_7229c851_0_eebb1846', 'mini_taxonomy_root_Le Chat by Mistral AI_Le Chat by Mistral AI_llm_clusters_20250912_220709_cf0221ab_0_19d1b8db', 'mini_taxonomy_root_Le Chat by Mistral AI_Le Chat by Mistral AI_llm_clusters_20250912_221350_0af95778_0_d4115af6', 'mini_taxonomy_root_Le Chat by Mistral AI_Le Chat by Mistral AI_llm_clusters_20250912_222145_775e88ad_0_050d6dcf', 'mini_taxonomy_root_Le Chat by Mistral AI_Le Chat by Mistral AI_llm_clusters_20250912_220118_afdd25e8_0_cfa6a4db', 'mini_taxonomy_root_Le Chat by Mistral AI_Le Chat by Mistral AI_llm_clusters_20250912_220459_0d41558a_0_6d1d4ef6', 'mini_taxonomy_root_Le Chat by Mistral AI_Le Chat by Mistral AI_llm_clusters_20250912_221003_cb74ad37_0_5c93bede', 'mini_taxonomy_root_Le Chat by Mistral AI_Le Chat by Mistral AI_llm_clusters_20250912_221055_85c56ece_0_7a0f9a5a', 'mini_taxonomy_root_Le Chat by Mistral AI_Le Chat by Mistral AI_llm_clusters_20250912_221143_640b4f34_0_f683a7d0', 'mini_taxonomy_root_Le Chat by Mistral AI_Le Chat by Mistral AI_llm_clusters_20250912_221556_0ae9cadf_0_c84b0313', 'mini_taxonomy_root_Le Chat by Mistral AI_Le Chat by Mistral AI_llm_clusters_20250912_221851_72f190d8_0_d3a71efc', 'mini_taxonomy_root_Microsoft Copilot_Microsoft Copilot_llm_clusters_20250913_053908_d79118ef_1_bf16a722', 'mini_taxonomy_root_Perplexity - Ask Anything_Perplexity - Ask Anything_llm_clusters_20250913_075913_a14fdebd_47_b56fd0d4', 'mini_taxonomy_root_Le Chat by Mistral AI_Le Chat by Mistral AI_llm_clusters_20250912_220411_1223eb27_0_d325ef2d', 'mini_taxonomy_root_Microsoft Copilot_Microsoft Copilot_llm_clusters_20250912_231510_9c40efbe_19_e2d3a96e', 'mini_taxonomy_root_Claude by Anthropic_Claude by Anthropic_llm_clusters_20250911_223214_7655b06f_8_c1eae1bc', 'mini_taxonomy_root_DeepSeek - AI Assistant_DeepSeek - AI Assistant_llm_clusters_20250911_230214_b7d66724_7_858f1296', 'mini_taxonomy_root_ChatGPT_ChatGPT_llm_clusters_20250911_154309_2ee30592_3_f1e5fb49', 'mini_taxonomy_root_Claude by Anthropic_Claude by Anthropic_llm_clusters_20250911_221849_b187de02_5_8a9dffea', 'mini_taxonomy_root_ChatGPT_ChatGPT_llm_clusters_20250910_211317_7446ddbb_0_d4cc3d46'] AND NOT (()-[:HAS_CHILD]->(root2)) AND NOT (leaf2)-[:HAS_CHILD]->()\n      AND root1.id < root2.id AND leaf1.feature = leaf2.feature\nRETURN root1.llm_tag as taxonomy1,\n       root2.llm_tag as taxonomy2,\n       collect(DISTINCT leaf1.feature) as shared_features,\n       count(DISTINCT leaf1.feature) as overlap_count\nORDER BY overlap_count DESC",
    "session_analysis": "\n// Session analysis for selected taxonomies\nMATCH (root:MiniTaxonomyNode)\nWHERE root.id IN ['mini_taxonomy_root_Claude by Anthropic_Claude by Anthropic_llm_clusters_20250910_112014_7229c851_0_eebb1846', 'mini_taxonomy_root_Le Chat by Mistral AI_Le Chat by Mistral AI_llm_clusters_20250912_220709_cf0221ab_0_19d1b8db', 'mini_taxonomy_root_Le Chat by Mistral AI_Le Chat by Mistral AI_llm_clusters_20250912_221350_0af95778_0_d4115af6', 'mini_taxonomy_root_Le Chat by Mistral AI_Le Chat by Mistral AI_llm_clusters_20250912_222145_775e88ad_0_050d6dcf', 'mini_taxonomy_root_Le Chat by Mistral AI_Le Chat by Mistral AI_llm_clusters_20250912_220118_afdd25e8_0_cfa6a4db', 'mini_taxonomy_root_Le Chat by Mistral AI_Le Chat by Mistral AI_llm_clusters_20250912_220459_0d41558a_0_6d1d4ef6', 'mini_taxonomy_root_Le Chat by Mistral AI_Le Chat by Mistral AI_llm_clusters_20250912_221003_cb74ad37_0_5c93bede', 'mini_taxonomy_root_Le Chat by Mistral AI_Le Chat by Mistral AI_llm_clusters_20250912_221055_85c56ece_0_7a0f9a5a', 'mini_taxonomy_root_Le Chat by Mistral AI_Le Chat by Mistral AI_llm_clusters_20250912_221143_640b4f34_0_f683a7d0', 'mini_taxonomy_root_Le Chat by Mistral AI_Le Chat by Mistral AI_llm_clusters_20250912_221556_0ae9cadf_0_c84b0313', 'mini_taxonomy_root_Le Chat by Mistral AI_Le Chat by Mistral AI_llm_clusters_20250912_221851_72f190d8_0_d3a71efc', 'mini_taxonomy_root_Microsoft Copilot_Microsoft Copilot_llm_clusters_20250913_053908_d79118ef_1_bf16a722', 'mini_taxonomy_root_Perplexity - Ask Anything_Perplexity - Ask Anything_llm_clusters_20250913_075913_a14fdebd_47_b56fd0d4', 'mini_taxonomy_root_Le Chat by Mistral AI_Le Chat by Mistral AI_llm_clusters_20250912_220411_1223eb27_0_d325ef2d', 'mini_taxonomy_root_Microsoft Copilot_Microsoft Copilot_llm_clusters_20250912_231510_9c40efbe_19_e2d3a96e', 'mini_taxonomy_root_Claude by Anthropic_Claude by Anthropic_llm_clusters_20250911_223214_7655b06f_8_c1eae1bc', 'mini_taxonomy_root_DeepSeek - AI Assistant_DeepSeek - AI Assistant_llm_clusters_20250911_230214_b7d66724_7_858f1296', 'mini_taxonomy_root_ChatGPT_ChatGPT_llm_clusters_20250911_154309_2ee30592_3_f1e5fb49', 'mini_taxonomy_root_Claude by Anthropic_Claude by Anthropic_llm_clusters_20250911_221849_b187de02_5_8a9dffea', 'mini_taxonomy_root_ChatGPT_ChatGPT_llm_clusters_20250910_211317_7446ddbb_0_d4cc3d46'] AND NOT (()-[:HAS_CHILD]->(root))\nWITH root.session_id as session_id, collect(root.llm_tag) as taxonomy_tags, count(*) as count\nRETURN session_id,\n       count as taxonomies_in_session,\n       taxonomy_tags\nORDER BY count DESC",
    "comparative_metrics": "\n// Comparative metrics for selected taxonomies\nMATCH (root:MiniTaxonomyNode)\nWHERE root.id IN ['mini_taxonomy_root_Claude by Anthropic_Claude by Anthropic_llm_clusters_20250910_112014_7229c851_0_eebb1846', 'mini_taxonomy_root_Le Chat by Mistral AI_Le Chat by Mistral AI_llm_clusters_20250912_220709_cf0221ab_0_19d1b8db', 'mini_taxonomy_root_Le Chat by Mistral AI_Le Chat by Mistral AI_llm_clusters_20250912_221350_0af95778_0_d4115af6', 'mini_taxonomy_root_Le Chat by Mistral AI_Le Chat by Mistral AI_llm_clusters_20250912_222145_775e88ad_0_050d6dcf', 'mini_taxonomy_root_Le Chat by Mistral AI_Le Chat by Mistral AI_llm_clusters_20250912_220118_afdd25e8_0_cfa6a4db', 'mini_taxonomy_root_Le Chat by Mistral AI_Le Chat by Mistral AI_llm_clusters_20250912_220459_0d41558a_0_6d1d4ef6', 'mini_taxonomy_root_Le Chat by Mistral AI_Le Chat by Mistral AI_llm_clusters_20250912_221003_cb74ad37_0_5c93bede', 'mini_taxonomy_root_Le Chat by Mistral AI_Le Chat by Mistral AI_llm_clusters_20250912_221055_85c56ece_0_7a0f9a5a', 'mini_taxonomy_root_Le Chat by Mistral AI_Le Chat by Mistral AI_llm_clusters_20250912_221143_640b4f34_0_f683a7d0', 'mini_taxonomy_root_Le Chat by Mistral AI_Le Chat by Mistral AI_llm_clusters_20250912_221556_0ae9cadf_0_c84b0313', 'mini_taxonomy_root_Le Chat by Mistral AI_Le Chat by Mistral AI_llm_clusters_20250912_221851_72f190d8_0_d3a71efc', 'mini_taxonomy_root_Microsoft Copilot_Microsoft Copilot_llm_clusters_20250913_053908_d79118ef_1_bf16a722', 'mini_taxonomy_root_Perplexity - Ask Anything_Perplexity - Ask Anything_llm_clusters_20250913_075913_a14fdebd_47_b56fd0d4', 'mini_taxonomy_root_Le Chat by Mistral AI_Le Chat by Mistral AI_llm_clusters_20250912_220411_1223eb27_0_d325ef2d', 'mini_taxonomy_root_Microsoft Copilot_Microsoft Copilot_llm_clusters_20250912_231510_9c40efbe_19_e2d3a96e', 'mini_taxonomy_root_Claude by Anthropic_Claude by Anthropic_llm_clusters_20250911_223214_7655b06f_8_c1eae1bc', 'mini_taxonomy_root_DeepSeek - AI Assistant_DeepSeek - AI Assistant_llm_clusters_20250911_230214_b7d66724_7_858f1296', 'mini_taxonomy_root_ChatGPT_ChatGPT_llm_clusters_20250911_154309_2ee30592_3_f1e5fb49', 'mini_taxonomy_root_Claude by Anthropic_Claude by Anthropic_llm_clusters_20250911_221849_b187de02_5_8a9dffea', 'mini_taxonomy_root_ChatGPT_ChatGPT_llm_clusters_20250910_211317_7446ddbb_0_d4cc3d46'] AND NOT (()-[:HAS_CHILD]->(root))\nOPTIONAL MATCH (root)-[:HAS_CHILD*]->(leaf:MiniTaxonomyNode)\nWHERE NOT (leaf)-[:HAS_CHILD]->()\nWITH root, count(DISTINCT leaf) as leaf_count\nOPTIONAL MATCH path = (root)-[:HAS_CHILD*]->(descendant)\nWITH root, leaf_count, max(length(path)) as max_depth\nRETURN root.llm_tag as taxonomy_tag,\n       root.id as root_id,\n       leaf_count,\n       max_depth,\n       CASE \n         WHEN leaf_count = 0 THEN 'Empty'\n         WHEN leaf_count <= 5 THEN 'Small' \n         WHEN leaf_count <= 20 THEN 'Medium'\n         WHEN leaf_count <= 50 THEN 'Large'\n         ELSE 'Very Large'\n       END as size_category,\n       CASE\n         WHEN max_depth <= 2 THEN 'Shallow'\n         WHEN max_depth <= 5 THEN 'Medium'\n         WHEN max_depth <= 8 THEN 'Deep'\n         ELSE 'Very Deep'\n       END as depth_category\nORDER BY leaf_count DESC, max_depth DESC"
  }
}